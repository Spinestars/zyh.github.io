<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ansible☞角色</title>
      <link href="/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/"/>
      <url>/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞模板</title>
      <link href="/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你用ansible进行多机器的配置调整，且调整的东西都一模一样，此时你不会拒绝模板的诱惑。</p><p>ansible的模板是jinja2，所以jinja2的特性，在这里都可以用。</p><blockquote><p>模板中，不要出现任何你觉得模板会忽略的东西，包括但不限于空格</p></blockquote><h2 id="模块-template"><a href="#模块-template" class="headerlink" title="模块 template"></a>模块 template</h2><p>参数：</p><ul><li>src 模板文件路径</li><li>dest 目的文件路径</li></ul><p>牵扯到目的路径，必然有权限参数</p><ul><li>owner 目的属主</li><li>group 目的属组</li><li>mode 目的权限</li></ul><p>覆盖与备份</p><ul><li>force 覆盖，yes / no</li><li>backup 备份， yes / no ， 若为 yes ，则目的重名文件会先改名</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/test.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">~/test.info</span></span><br></pre></td></tr></table></figure><h2 id="模板分隔符"><a href="#模板分隔符" class="headerlink" title="模板分隔符"></a>模板分隔符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 一般用来填充变量，可以是过滤器，也可以填充表达式，从而返回相应的值，例如 &#123;&#123; 1==1 &#125;&#125; 返回 True</span><br><span class="line">&#123;% %&#125; 一般用来填充控制语句</span><br><span class="line">&#123;<span class="comment"># #&#125; 模板注释语句，并非渲染后会出现</span></span><br><span class="line"><span class="comment">#  ... ## 这一种 ansible 貌似不支持，所以可以忽略</span></span><br></pre></td></tr></table></figure><h3 id="分隔符1"><a href="#分隔符1" class="headerlink" title="分隔符1 "></a>分隔符1  {{ }} </h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 常用来进行下列操作：</span><br><span class="line">&#123;# 普通变量 #&#125;</span><br><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line">&#123;&#123; foo[&#39;bar&#39;] &#125;&#125;</span><br><span class="line">&#123;# 以过滤器 lookup 为例 #&#125;</span><br><span class="line">&#123;&#123; lookup(&#39;file&#39;, &#39;~&#x2F;test.file&#39;) &#125;&#125;</span><br><span class="line">&#123;&#123; lookup(&#39;env&#39;, &#39;PATH&#39; )&#125;&#125;</span><br></pre></td></tr></table></figure><p>最终目的文件，会输出<code>~/test.file</code> 内容和 <code>$PATH</code> 内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">字符串拼接需要使用`~`，例如&#123;&#123; <span class="string">"&#123;&#123; a~b &#125;&#125;"</span> &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="分隔符2"><a href="#分隔符2" class="headerlink" title="分隔符2 "></a>分隔符2  {% %} </h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% %&#125; 控制语句，官网所有的控制列表</span><br><span class="line">https://jinja.palletsprojects.com/en/master/templates/<span class="comment">#list-of-control-structures</span></span><br><span class="line">这里只列出部分</span><br></pre></td></tr></table></figure><h4 id="条件控制语句-if"><a href="#条件控制语句-if" class="headerlink" title="条件控制语句 if"></a>条件控制语句 if</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if 条件1 %&#125;</span><br><span class="line">  pass</span><br><span class="line">&#123;% elif 条件2 %&#125;</span><br><span class="line">  pass</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  pass </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句 for"></a>循环语句 for</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in 可迭代对象 %&#125;</span><br><span class="line">  &#123;&#123; i &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认循环后，每一个循环单体独占一行，如果需要删除独占，则需要给第二个%}和第三个控制符{%加减号，最终变为-%}和{%-。</p></blockquote><p>关于字典类型，可以使用 iteritems() 函数，从而方便的获取到字典的 k 和 v。例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for k,v in &#123;&#39;name&#39;:&#39;zhangsan&#39;, &#39;gender&#39;:&#39;male&#39;&#125;.iteritems() %&#125;</span><br><span class="line">  &#123;&#123; k &#125;&#125;:&#123;&#123; v &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">name:zhangsan</span><br><span class="line">gender:male</span><br></pre></td></tr></table></figure><h4 id="条件和循环组合语句"><a href="#条件和循环组合语句" class="headerlink" title="条件和循环组合语句"></a>条件和循环组合语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in 可迭代对象 if 条件 %&#125;</span><br><span class="line">  满足条件语句</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  不满足条件语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in [1,2,3,4] if i&gt;2 %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;&#39;s index is &#123;&#123; loop.index &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">3<span class="string">'s index is 1</span></span><br><span class="line"><span class="string">4'</span>s index is 2</span><br></pre></td></tr></table></figure><blockquote><p>loop.index 是循环体索引，这里可能会有个疑问。</p><p>正常情况下，3和4的索引应该就是3和4，之所以是1和2，原因在于当条件控制和循环控制位于同一行的时候，先行运算的是 <code>[1,2,3,4] if i&gt;2</code>，之后才开始走<code>for</code>循环。</p><p>如果你想输出原始循环体，则需要将条件控制语句另起一行，放在<code>for</code>循环内部</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in [1,2,3,4] %&#125;</span><br><span class="line">&#123;% if i&gt;2 %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;&#39;s index is &#123;&#123; loop.index &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">3<span class="string">'s index is 3</span></span><br><span class="line"><span class="string">4'</span>s index is 4</span><br></pre></td></tr></table></figure><blockquote><p>上述的 loop.index 只是jinja2的一种使用方式，其它方式具体可见官网文档</p><p><a href="https://jinja.palletsprojects.com/en/master/templates/#list-of-control-structures" target="_blank" rel="noopener">https://jinja.palletsprojects.com/en/master/templates/#list-of-control-structures</a></p></blockquote><h4 id="宏-macro"><a href="#宏-macro" class="headerlink" title="宏 macro"></a>宏 macro</h4><p>宏就是类似于函数的一个东西。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 编写宏 #&#125;</span><br><span class="line">&#123;% macro func() %&#125;</span><br><span class="line">函数体</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 调用宏 #&#125;</span><br><span class="line">&#123;&#123; func() &#125;&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% macro func(a,b,c&#x3D;3,d&#x3D;4) %&#125;</span><br><span class="line">&#123;# 宏编写的时候，宏参数，要遵循默认参数在后</span><br><span class="line">&#123;&#123; a &#125;&#125;</span><br><span class="line">&#123;&#123; b &#125;&#125;</span><br><span class="line">&#123;&#123; c &#125;&#125;</span><br><span class="line">&#123;&#123; d &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;&#123; func(1,2,5) &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>当给出参数超出了宏所定义的参数时，根据情况，宏会将多余的参数存在变量中，即：</p><p>超出的为非关键字参数，则存放在一个叫<code>varargs</code>的元组中</p><p>超出的为关键字参数，则存放在一个叫<code>kwargs</code>的字典中</p></blockquote><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h4><p>如同当前函数的装饰器，可以扩展当前宏的功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 编写宏 func，并调用 caller #&#125;</span><br><span class="line">&#123;% macro func(a) %&#125;</span><br><span class="line">我有一个&#123;&#123; a &#125;&#125;。</span><br><span class="line">&#123;&#123; caller(a) &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 编写宏 func_ext #&#125;</span><br><span class="line">&#123;% macro func_ext(a,b) %&#125;</span><br><span class="line">但&#123;&#123; b &#125;&#125;比&#123;&#123; a &#125;&#125;好吃。</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 通过 call 关联 func，加载 func_ext #&#125;</span><br><span class="line">&#123;% call(a) func(&#39;汉堡&#39;) %&#125;</span><br><span class="line">&#123;&#123; func_ext(a,&#39;三明治&#39;) &#125;&#125;</span><br><span class="line">&#123;% endcall %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>caller是call的对象，因此caller也是可以给call传参</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">我有一个汉堡。</span><br><span class="line">但三明治比汉堡好吃</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p> 扩展官方文档，可见 <a href="https://jinja.palletsprojects.com/en/master/extensions/" target="_blank" rel="noopener">https://jinja.palletsprojects.com/en/master/extensions/</a></p></blockquote><p>这里我只简单的说一下如何启动 <code>for</code> 循环中的 <code>break</code> 和 <code>continue</code>。</p><p><code>ansible</code> 中添加 <code>jinja2</code> 扩展，需要修改主配置文件 <code>/etc/ansible/ansible.cfg</code>，找到 <code>jinja2_extensions</code>，在后面追加扩展配置即可，每一个扩展用逗号<code>,</code>分割。</p><p><code>break</code>和<code>continue</code> 的扩展名叫：<code>jinja2.ext.loopcontrols</code></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-include</title>
      <link href="/2020/05/18/ansible%E2%98%9Eplaybook-include/"/>
      <url>/2020/05/18/ansible%E2%98%9Eplaybook-include/</url>
      
        <content type="html"><![CDATA[<h2 id="引入额外任务"><a href="#引入额外任务" class="headerlink" title="引入额外任务"></a>引入额外任务</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br></pre></td></tr></table></figure><h2 id="绑定-kv-对，从而改变额外任务里的变量"><a href="#绑定-kv-对，从而改变额外任务里的变量" class="headerlink" title="绑定 kv 对，从而改变额外任务里的变量"></a>绑定 kv 对，从而改变额外任务里的变量</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="string">var1=hello</span></span><br><span class="line">    <span class="string">var2=world</span></span><br></pre></td></tr></table></figure><h2 id="绑定-tags-标记"><a href="#绑定-tags-标记" class="headerlink" title="绑定 tags 标记"></a>绑定 tags 标记</h2><blockquote><p>可以通过tags执行相应的额外任务</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - include: add1.yml</span><br><span class="line">    tags: add1</span><br><span class="line">  - include: add2.yml</span><br><span class="line">    tags: add2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play --tags add1 <span class="comment"># 仅执行 add1.yml 任务</span></span><br></pre></td></tr></table></figure><h2 id="绑定-loop-循环"><a href="#绑定-loop-循环" class="headerlink" title="绑定 loop 循环"></a>绑定 loop 循环</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="attr">loop:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">[1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">  <span class="attr">msg:</span> <span class="string">"loop-item: <span class="template-variable">&#123;&#123; item &#125;&#125;</span> in add.yml "</span></span><br></pre></td></tr></table></figure><h2 id="绑定-when-条件"><a href="#绑定-when-条件" class="headerlink" title="绑定 when 条件"></a>绑定 when 条件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="attr">when:</span> <span class="number">1</span> <span class="string">&lt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> include </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo☞本地搜索</title>
      <link href="/2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
      <url>/2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装完 hexo-generator-search 后，发现搜索结果始终是所有文章.</p><p>如果你用的也是 <a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">Melody</a> 主题，那么可以参考如下信息，来确认。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2//image-20200518121421437.png" alt="image-20200518121421437"></p><h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><blockquote><p>截至：2020.05.18，软件包如下</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"gitalk"</span>: <span class="string">"^1.6.2"</span>,</span><br><span class="line">  <span class="string">"hexo"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-asset-image"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-deployer-git"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-archive"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-category"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-index"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-search"</span>: <span class="string">"^2.4.0"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-tag"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-pug"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">  <span class="string">"hexo-server"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">  <span class="string">"react"</span>: <span class="string">"^15.3.1"</span>,</span><br><span class="line">  <span class="string">"react-dom"</span>: <span class="string">"^15.3.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><blockquote><p>追加内容如下</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote><p>修改内容</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-lookup插件</title>
      <link href="/2020/05/15/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/05/15/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="lookup-查询插件"><a href="#lookup-查询插件" class="headerlink" title="lookup 查询插件"></a>lookup 查询插件</h3><blockquote><p>query 插件与 lookup 插件一样，区别在于 query 默认情况下，启用了wantlist=true。<br>wantlist 的意思是将返回的字符串构成一个列表<br>另外，query 可以简写为q</p></blockquote><h5 id="loop-关键词"><a href="#loop-关键词" class="headerlink" title="loop 关键词"></a>loop 关键词</h5><p>用于将一个列表进行循环，默认循环单体变量是 item. 官方用来替代 with_xxx </p><p>用来遍历 lookup 结果集</p><blockquote><p>自定义loop循环单体变量为 xxx</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">loop_control:</span></span><br><span class="line"><span class="attr">loop_var:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="常用参数示例"><a href="#常用参数示例" class="headerlink" title="常用参数示例"></a>常用参数示例</h3><h4 id="file-参数"><a href="#file-参数" class="headerlink" title="file 参数"></a>file 参数</h4><blockquote><p>多个文件内容合并在一起，或以字符串逗号分隔输出，或以列表形式输出</p></blockquote><h4 id="ini-参数"><a href="#ini-参数" class="headerlink" title="ini 参数"></a>ini 参数</h4><blockquote><p>获取 ini 配置信息</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/test.ini</span></span><br><span class="line"><span class="section">[testA]</span></span><br><span class="line"><span class="attr">a1</span>=zhangsan</span><br><span class="line"><span class="attr">a2</span>=lisi</span><br><span class="line"></span><br><span class="line"><span class="section">[testB]</span></span><br><span class="line"><span class="attr">b1</span>=wangwu</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">ini</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; q('ini', 'a1 section=testA file=~/test.ini') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: [</span><br><span class="line">        <span class="string">"zhangsan"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当配置是 properties，可以追加 type=properties </p></blockquote><h4 id="dict参数"><a href="#dict参数" class="headerlink" title="dict参数"></a>dict参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果集 </span></span><br><span class="line">[&#123;key: xxx, value: xxx&#125;, &#123;key: xxx, value: xxx&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="attr">male:</span> <span class="string">Bob</span></span><br><span class="line">      <span class="attr">female:</span> <span class="string">Maris</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item.key &#125;&#125;</span>: <span class="template-variable">&#123;&#123; item.value &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">"<span class="template-variable">&#123;&#123; lookup('dict', users) &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=&#123;<span class="string">'key'</span>: u<span class="string">'male'</span>, <span class="string">'value'</span>: u<span class="string">'Bob'</span>&#125;) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"male: Bob"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=&#123;<span class="string">'key'</span>: u<span class="string">'female'</span>, <span class="string">'value'</span>: u<span class="string">'Maris'</span>&#125;) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"female: Maris"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subelements参数"><a href="#subelements参数" class="headerlink" title="subelements参数"></a>subelements参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法：</span></span><br><span class="line">&#123;&#123; lookup(<span class="string">'subelements'</span>,list,<span class="string">'content'</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个由相同结构字典组成的列表list，将字典中某一个元素key（值必须是列表）与字典剩余的元素（剩余的元素作为一个整体新字典），构建笛卡尔积。从而形成 item。每一个字典拆分组合后的 item 构建结果集 items</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果集</span></span><br><span class="line"></span><br><span class="line">items=[</span><br><span class="line">[&#123;list.0.剩余kv&#125;,  list.0.key.0], </span><br><span class="line">[&#123;list.0.剩余kv&#125;,  list.0.key.1], </span><br><span class="line">[&#123;list.1.剩余kv&#125;,  list.1.key.0], </span><br><span class="line">[&#123;list.1.剩余kv&#125;,  list.1.key.1], </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">debug:</span></span><br><span class="line">                    <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item.0.name &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.0.gender &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>"</span></span><br><span class="line">            <span class="attr">loop:</span> <span class="string">"<span class="template-variable">&#123;&#123; lookup('subelements',users,'content') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'male'</span>, u<span class="string">'age'</span>: 18, u<span class="string">'name'</span>: u<span class="string">'Bob'</span>&#125;, u<span class="string">'eating'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Bob - male - eating"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'male'</span>, u<span class="string">'age'</span>: 18, u<span class="string">'name'</span>: u<span class="string">'Bob'</span>&#125;, u<span class="string">'sleeping'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Bob - male - sleeping"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'male'</span>, u<span class="string">'age'</span>: 18, u<span class="string">'name'</span>: u<span class="string">'Bob'</span>&#125;, u<span class="string">'play ogre'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Bob - male - play ogre"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'female'</span>, u<span class="string">'age'</span>: 20, u<span class="string">'name'</span>: u<span class="string">'Maris'</span>&#125;, u<span class="string">'eating'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Maris - female - eating"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'female'</span>, u<span class="string">'age'</span>: 20, u<span class="string">'name'</span>: u<span class="string">'Maris'</span>&#125;, u<span class="string">'sleeping'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Maris - female - sleeping"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">'gender'</span>: u<span class="string">'female'</span>, u<span class="string">'age'</span>: 20, u<span class="string">'name'</span>: u<span class="string">'Maris'</span>&#125;, u<span class="string">'shopping'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Maris - female - shopping"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若有多个key需要附加，需要 nested 与  include_tasks 的组合实现</p></blockquote><h4 id="nested参数"><a href="#nested参数" class="headerlink" title="nested参数"></a>nested参数</h4><blockquote><p>将多个列表进行笛卡尔积运算</p><ol><li>test3.yml 中拿到 users循环单体 user</li><li>针对循环单体 user引入附加任务 test3_1.yml</li><li>通过lookup插件nested，将 user字典中各key的value相互遍历，构建新列表 item</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">################ test3.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span>       </span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span>   </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span> </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                    <span class="attr">specialty:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">english</span>  </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">game</span>     </span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span>        </span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span>     </span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span>   </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span> </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span> </span><br><span class="line">                    <span class="attr">specialty:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">history</span>  </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">cooking</span>  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">test3_1.yml</span> </span><br><span class="line">            <span class="attr">loop:</span> <span class="string">"<span class="template-variable">&#123;&#123; users &#125;&#125;</span>"</span></span><br><span class="line">            <span class="attr">loop_control:</span></span><br><span class="line">                    <span class="attr">loop_var:</span> <span class="string">user</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">################ test3_1.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">loop:</span> <span class="string">"<span class="template-variable">&#123;&#123; lookup('nested',user.name, user.age, user.content, user.specialty) &#125;&#125;</span>"</span></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">"name:<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>, age:<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; item.2 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; item.3 &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'eating'</span>, u<span class="string">'english'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, eating, english"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'eating'</span>, u<span class="string">'game'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, eating, game"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'sleeping'</span>, u<span class="string">'english'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, sleeping, english"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'sleeping'</span>, u<span class="string">'game'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, sleeping, game"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'play ogre'</span>, u<span class="string">'english'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, play ogre, english"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Bob'</span>, 18, u<span class="string">'play ogre'</span>, u<span class="string">'game'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Bob, age:18, play ogre, game"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'eating'</span>, u<span class="string">'history'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, eating, history"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'eating'</span>, u<span class="string">'cooking'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, eating, cooking"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'sleeping'</span>, u<span class="string">'history'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, sleeping, history"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'sleeping'</span>, u<span class="string">'cooking'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, sleeping, cooking"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'shopping'</span>, u<span class="string">'history'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, shopping, history"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">'Maris'</span>, 20, u<span class="string">'shopping'</span>, u<span class="string">'cooking'</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"name:Maris, age:20, shopping, cooking"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> lookup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞nginx编译方式</title>
      <link href="/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此脚本用于安装 nginx;tengine;openresty. 安装版本为：</p><ul><li>nginx: 1.14</li><li>openresty: 1.15.8.3</li><li>tengine: 2.1.2 # 这是一个很古老的版本…</li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>因为是编译安装，所以产出目录均在 /usr/local/&lt;nginx/openresty/tengine&gt;，除了 logs 做了软链<code>/usr/local/xxx/logs -&gt; /export/logs/nginx</code></p><p><code>/usr/local/xxx/conf 目录结构</code></p><p><img src="/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F//image-20200515120037239.png" alt="image-20200515120037239"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面两个主配置文件会告诉你，相应的上下文配置，应该以什么结尾！！！</span></span><br><span class="line">include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/server/*.server;</span><br><span class="line">include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/upstream/*.upstream;</span><br></pre></td></tr></table></figure><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$basedir</span></span><br><span class="line">runuser=`whoami`</span><br><span class="line">[[ <span class="variable">$runuser</span> == <span class="string">'root'</span> ]] || &#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ERROR:执行用户不是<span class="variable">$runuser</span>"</span> &amp;&amp; <span class="built_in">exit</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[ -d /<span class="built_in">export</span>/logs/nginx ]] || &#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"/export/logs/nginx/目录不存在"</span> &amp;&amp; <span class="built_in">exit</span> </span><br><span class="line">&#125;</span><br><span class="line">CpuNum=`cat /proc/cpuinfo | grep processor | wc -l`</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入安装的Nginx版本:(nginx;tengine;openresty):"</span> NginxVer</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入开发日常操作用户:"</span> KaifaUser</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"输入nginx worker用户:"</span> NginxWorkerUser</span><br><span class="line">useradd -s /sbin/nologin <span class="variable">$&#123;NginxWorkerUser&#125;</span></span><br><span class="line">usermod -a -G <span class="variable">$&#123;KaifaUser&#125;</span> <span class="variable">$&#123;NginxWorkerUser&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">rm -rf <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; mkdir <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line"></span><br><span class="line">cat&gt;&gt;<span class="variable">$basedir</span>/test.com.server&lt;&lt;EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com;</span><br><span class="line">    root /<span class="built_in">export</span>/<span class="variable">$&#123;NginxWorkerUser&#125;</span>/test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    access_log logs/nginx-test.com.access.log main;</span><br><span class="line">    error_log logs/nginx-test.com.error.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭日志</span></span><br><span class="line">    location = /favicon.ico &#123;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 关闭日志</span></span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        auth_basic off;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拒绝探测网站根下的隐藏文件 Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).</span></span><br><span class="line">    location ~ /\. &#123;</span><br><span class="line">        deny all;</span><br><span class="line">        access_log off;</span><br><span class="line">        log_not_found off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment">#######这个是一个thinkphp框架的伪静态规则，请忽略</span></span><br><span class="line">        <span class="keyword">if</span> (!-e \<span class="variable">$request_filename</span>) &#123;</span><br><span class="line">           rewrite ^(.*)\$ /index.php?s=\<span class="variable">$1</span> last;</span><br><span class="line">           <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#######</span></span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启浏览器静态文件缓存</span></span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)\$ &#123; </span><br><span class="line">        expires 3h; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若php-fpm,请保留这里修改</span></span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1：9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout 10s;</span><br><span class="line">        fastcgi_send_timeout 10s;</span><br><span class="line">        fastcgi_read_timeout 10s;</span><br><span class="line">        fastcgi_buffers 8 256k;                           </span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 若 http，请保留这里修改</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_connect_timeout 300ms;</span><br><span class="line">        proxy_send_timeout 300ms;</span><br><span class="line">        proxy_read_timeout 300ms;</span><br><span class="line">        proxy_max_temp_file_size 1024m;</span><br><span class="line">        proxy_set_header   Host         <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header   X-Real-IP    <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_buffers 256 4k;</span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat&gt;&gt;nginx_status.server&lt;&lt;EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># charset koi8-r;</span></span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location /server_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NginxVer</span> == <span class="string">'nginx'</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">'/usr/local/$NginxVer 已存在'</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc</span><br><span class="line">    wget http://<span class="variable">$&#123;NginxVer&#125;</span>.org/download/<span class="variable">$&#123;NginxVer&#125;</span>-1.14.0.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_v2_module || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">'\$remote_addr - \$remote_user [\$time_local] \$request_time \$host "\$request" '</span></span><br><span class="line">                      <span class="string">'\$status \$body_bytes_sent "\$http_referer" '</span></span><br><span class="line">                      <span class="string">'"\$http_user_agent" "\$http_x_forwarded_for" \$upstream_addr \$upstream_status'</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">        deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$NginxVer</span> == <span class="string">'openresty'</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">'/usr/local/$NginxVer 已存在'</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc</span><br><span class="line">    wget https://openresty.org/download/openresty-1.15.8.3.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_v2_module || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">'\$remote_addr - \$remote_user [\$time_local] \$request_time \$host "\$request" '</span></span><br><span class="line">                      <span class="string">'\$status \$body_bytes_sent "\$http_referer" '</span></span><br><span class="line">                      <span class="string">'"\$http_user_agent" "\$http_x_forwarded_for" \$upstream_addr \$upstream_status'</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="built_in">return</span> 444;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$NginxVer</span> == <span class="string">'tengine'</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">'/usr/local/$NginxVer 已存在'</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc jemalloc-devel</span><br><span class="line">    wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-jemalloc || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">'\$remote_addr - \$remote_user [\$time_local] \$request_time \$host "\$request" '</span></span><br><span class="line">                      <span class="string">'\$status \$body_bytes_sent "\$http_referer" '</span></span><br><span class="line">                      <span class="string">'"\$http_user_agent" "\$http_x_forwarded_for" \$upstream_addr \$upstream_status'</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo☞图片显示</title>
      <link href="/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
      <url>/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>写作工具：typora</p><p>部署端：github</p><p>部署包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 你可以通过hexo的根目录下的package.json来确认版本</span><br><span class="line">&quot;hexo&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;hexo-asset-image&quot;: &quot;^1.0.0&quot;</span><br></pre></td></tr></table></figure><p>目前网上大多数的博文描述的场景，均不是当前场景（截至到2020.05.14），所以博文里虽然展示都正常，但是按照博文的操作却会有路径问题，具体表现是图片前多了一级路径（路径应该是1级域名，比如.com，.io等，根据你的域名来定）</p><p>那么，请按照下面我的步骤来操作，如果还有问题，那就不是上述我所说的情况了。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li><p>修改 hexo-asset-image，修改内容如图所示</p><p><img src="/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA//image-20200514185529806.png" alt="image-20200514185529806"></p></li><li><p>修改typora的图片存放路径，修改内容如图所示</p><p><img src="/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA//image-20200514185631903.png" alt="image-20200514185631903"></p><blockquote><p>这不是必须的，但是我想没人会拒绝方便的操作。 typora 在进行如上操作后，就可以在你往文章里粘贴图片的时候，自动生成以文件名前缀命名的目录（效果就如同你开启了hexo的post_asset_folder: true参数），并将图片存放在此目录中。</p></blockquote></li><li><p>开启 hexo 的 _config.yml 中 post_asset_folder: true 参数配置</p></li></ol><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>经过上述操作，我想你已经可以在本地 md 文件和线上同时看到图片了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx☞日志切割脚本</title>
      <link href="/2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/"/>
      <url>/2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本脚本用于将 nginx 日志进行时间周期切割，并 lzo 压缩，最终上传到 s3。<br>脚本分为三个函数，切割函数，压缩上传函数，删除函数，需要执行哪个，就填写相对应变量。<br>详情可以看脚本注释。</p><blockquote><p>请务必执行前，确认安装了 lzop 和 jq 命令 ，且机器是 aws EC2 </p></blockquote><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># by zyh</span></span><br><span class="line"><span class="comment"># time: 2019-12-13</span></span><br><span class="line"><span class="comment"># warning: 使用之前 yum install -y lzop jq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab (执行时间周期需要和切割时间周期一致) 重要!!!!!!!</span></span><br><span class="line"><span class="comment"># */10 * * * * root bash /export/shell/nginxlog2s3/start.sh &gt; /export/shell/nginxlog2s3/start.log 2&gt;&amp;1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标识日志名前缀</span></span><br><span class="line">localtag=`curl -sq http://169.254.169.254/latest/dynamic/instance-identity/document/ | jq -r .<span class="string">"accountId"</span>,.<span class="string">"availabilityZone"</span>,.<span class="string">"privateIp"</span> | sed <span class="string">'N;N;s@\n@_@g'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------人为变量填写开始区域----------------------------------</span></span><br><span class="line"><span class="comment"># 切割时间周期，定位切割后日期的初始写入时间（仅适用于连续切割，且不适用于第一次切割）</span></span><br><span class="line">todaytime=$(date -d <span class="string">"-10 mins"</span> +%Y%m%d)</span><br><span class="line">todayhour=$(date -d <span class="string">"-10 mins"</span> +%H)</span><br><span class="line">todaytimestr=$(date  -d <span class="string">"-10 mins"</span> +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 企业微信机器人</span></span><br><span class="line">wx_api=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx 日志目录 logs 所在路径, 备份日志目录是 logs/logsbak</span></span><br><span class="line"><span class="comment"># 例如日志目录是 /usr/local/nginx/logs，则填写 /usr/loca/nginx, 则切割后本地备份路径是 /usr/local/nginx/logs/logsbak</span></span><br><span class="line">nginx_base=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志位于S3的根路径，例如 s3://xxx/logs/xxxdays/nginx</span></span><br><span class="line">S3Base=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MvLogList="a.log b.log c.log"  需要切割的日志，这是必须的</span></span><br><span class="line">MvLogList=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LzopS3LogList="a.log b.log c.log" 需要压缩并上传S3的日志，如果你需要执行此步骤</span></span><br><span class="line"><span class="comment"># S3目录格式：$&#123;S3Base&#125;/$&#123;日志名&#125;/$&#123;todaytime&#125;/$&#123;todayhour&#125;/ </span></span><br><span class="line">LzopS3LogList=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DeleteLocalLog="a.log b.log c.log" 需要本地设置保留时间的日志，如果你需要执行此步</span></span><br><span class="line">DeleteLocalLog=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地保存时间</span></span><br><span class="line">deletetime=$(date -d <span class="string">"72 hours ago"</span> +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------人为变量填写结束区域----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志原始路径</span></span><br><span class="line">nginx_logs=<span class="string">"<span class="variable">$&#123;nginx_base&#125;</span>/logs"</span></span><br><span class="line"><span class="comment"># 日志位于本地的切割后备份路径</span></span><br><span class="line">backup_logs=<span class="string">"<span class="variable">$&#123;nginx_logs&#125;</span>/logsbak"</span></span><br><span class="line">[[ -d <span class="variable">$&#123;backup_logs&#125;</span> ]] || mkdir -p <span class="variable">$&#123;backup_logs&#125;</span></span><br><span class="line"><span class="comment"># nginx pid 文件路径</span></span><br><span class="line">nginx_pid=<span class="string">"<span class="variable">$&#123;nginx_logs&#125;</span>/nginx.pid"</span></span><br><span class="line">[[ -f <span class="variable">$&#123;nginx_pid&#125;</span> ]] || &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;nginx_pid&#125;</span> is not exist!!!!"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mvlog</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  [[ -d <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> ]] || mkdir -p <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  mv <span class="variable">$&#123;nginx_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"MV: <span class="variable">$&#123;nginx_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> to <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">lzops3log</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  S3Path=<span class="variable">$2</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  lzop <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span> &amp;&amp; aws s3 cp <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo <span class="variable">$&#123;S3Path&#125;</span>/<span class="variable">$&#123;todaytime&#125;</span>/<span class="variable">$&#123;todayhour&#125;</span>/ --quiet &amp;&amp; rm -rf <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo &amp;&amp; <span class="built_in">echo</span> <span class="string">"UPLOAD: <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo to <span class="variable">$&#123;S3Path&#125;</span>/<span class="variable">$&#123;todaytime&#125;</span>/<span class="variable">$&#123;todayhour&#125;</span>/"</span> || curl <span class="string">"<span class="variable">$wx_api</span>"</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"msgtype": "markdown","markdown": &#123;"content": "# `'</span><span class="string">"<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo"</span><span class="string">'` 日志上传失败!!!!!!"&#125;&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">deletelocallog</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  <span class="keyword">for</span> logname <span class="keyword">in</span> `ls`;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;deletetime&#125;</span> -ge <span class="variable">$&#123;logname##*_&#125;</span> ]];<span class="keyword">then</span></span><br><span class="line">      rm -rf <span class="variable">$&#123;logname&#125;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"DELETE: <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;deletetime&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#MV</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;MvLogList&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  mvlog <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#nginx log reload</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;nginx_pid&#125;</span>`</span><br><span class="line"><span class="comment">#lzop and to s3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;LzopS3LogList&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  lzops3log <span class="variable">$&#123;i&#125;</span> <span class="variable">$&#123;S3Base&#125;</span>/<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#Delete</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;DeleteLocalLog&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  deletelocallog <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ redis</title>
      <link href="/2020/05/14/zabbix%E2%98%9Eredis/"/>
      <url>/2020/05/14/zabbix%E2%98%9Eredis/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-模板"><a href="#zabbix-模板" class="headerlink" title="zabbix 模板"></a>zabbix 模板</h2><ol><li><p>自动发现规则</p><p><img src="/2020/05/14/zabbix%E2%98%9Eredis//image-20200520152740815.png" alt="image-20200520152740815"></p></li><li><p>过滤器</p><p><img src="/2020/05/14/zabbix%E2%98%9Eredis//image-20200520152922570.png" alt="image-20200520152922570"></p></li><li><p>监控项原型</p><table><thead><tr><th>名称</th><th>键值</th><th>间隔</th><th>历史记录</th><th>趋势</th><th>类型</th></tr></thead><tbody><tr><td><code>{#IP},{#TCP_PORT} connected_clients[客户端连接数]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},connected_clients]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} maxmemory[redis配置的内存上限]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},maxmemory]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} mem_fragmentation_ratio[内存碎片率]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},mem_fragmentation_ratio]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} redis_instantaneous_ops_per_sec[每秒执行的命令个数]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},instantaneous_ops_per_sec]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} redis 存活状态</code></td><td><code>redis_info[{#IP},{#TCP_PORT},exist]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} rejected_connections[被拒绝的客户端连接数]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},rejected_connections]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_cpu_sys[redis-master sys-cpu占用]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_cpu_sys]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_cpu_sys_children[redis-children sys-cpu占用]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_cpu_sys_children]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_cpu_user[redis-master user-cpu占用]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_cpu_user]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_cpu_user_children[redis-children user-cpu占用]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_cpu_user_children]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_memory[redis层面已使用内存-不含碎片]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_memory]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_memory_pct[操作系统层面已使用内存百分比]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_memory_pct]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_memory_peak[操作系统层面已使用内存历史峰值-含内存碎片]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_memory_peak]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>{#IP},{#TCP_PORT} used_memory_rss[操作系统层面已使用内存-含内存碎片]</code></td><td><code>redis_info[{#IP},{#TCP_PORT},used_memory_rss]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr></tbody></table></li><li><p>触发器原型</p><table><thead><tr><th>严重性</th><th>名称</th><th>表达式</th></tr></thead><tbody><tr><td>一般严重</td><td><code>{#IP}:{#TCP_PORT} Redis  内存碎片化超过50%, 剩余可用内存低于30%</code></td><td><code>{Template Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},mem_fragmentation_ratio].last()}&gt;1.5  and {Template Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},used_memory_pct].last()}&gt;0.7</code></td></tr><tr><td>严重</td><td><code>{#IP}:{#TCP_PORT} Redis  可用内存低, 存在使用交换分区</code></td><td><code>{Template Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},mem_fragmentation_ratio].last()}&lt;1  and {Template Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},used_memory_pct].last()}&gt;0.7</code></td></tr><tr><td>一般严重</td><td><code>{#IP}:{#TCP_PORT} Redis  操作系统层面内存占用百分比过高</code></td><td><code>{Template  Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},used_memory_pct].last()}&gt;0.7</code></td></tr><tr><td>灾难</td><td><code>{#IP}:{#TCP_PORT} Redis 端口无法访问</code></td><td><code>{Template  Redis Auto Discovert Active  mode:redis_info[{#IP},{#TCP_PORT},exist].last()}&lt;&gt;1</code></td></tr></tbody></table></li><li><p>图形原型，就不详细写了，这里只列出我自己的分类</p><table><thead><tr><th>名称</th><th>宽</th><th>高</th><th>图形类别</th></tr></thead><tbody><tr><td><code>{#IP},{#TCP_PORT}  redis 连接数监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>{#IP},{#TCP_PORT}  redis 其他监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>{#IP},{#TCP_PORT}  redis qps 监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>{#IP},{#TCP_PORT}  redis mem 监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>{#IP},{#TCP_PORT}  redis cpu 监控</code></td><td>900</td><td>200</td><td>正常</td></tr></tbody></table></li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本会生成自动发现进程脚本和redis检测脚本</p><p>zabbix的redis配置路径：ZabbixEtc</p><p>zabbix的脚本路径：ZabbixShell</p><p>redis的cli命令路径：RedisCli</p><p>自动发现脚本：ip_port_discovery.sh</p><ul><li>bash ip_port_discovery.sh 进程名或者端口</li></ul><p>redis检测脚本：redis_info.sh</p><ul><li>bash redis_info.sh ip port item</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZabbixEtc&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d</span><br><span class="line">ZabbixShell&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;shell</span><br><span class="line">RedisCli&#x3D;&#39;docker exec -t redis redis-cli&#39;</span><br><span class="line"></span><br><span class="line">[[ -d $&#123;ZabbixShell&#125; ]] || mkdir -p $&#123;ZabbixShell&#125;</span><br><span class="line">[[ -z $&#123;ZabbixEtc&#125; ]] &amp;&amp; [[ -z $&#123;ZabbixShell&#125; ]] || [[ -z $&#123;RedisCli&#125; ]] &amp;&amp; exit</span><br><span class="line"></span><br><span class="line">cat&gt;$&#123;ZabbixEtc&#125;&#x2F;redis.conf&lt;&lt;EOF</span><br><span class="line">##redis monitor</span><br><span class="line">UserParameter&#x3D;redis_info[*],$&#123;ZabbixShell&#125;&#x2F;redis_info.sh \$1 \$2 \$3 \$4</span><br><span class="line">UserParameter&#x3D;ip_port_discovery[*],$&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh \$1</span><br><span class="line">EOF</span><br><span class="line">cat&gt;$&#123;ZabbixShell&#125;&#x2F;redis_info.sh&lt;&lt;&quot;EOF&quot;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">RedisCli&#x3D;</span><br><span class="line">HOST&#x3D;$1</span><br><span class="line">PORT&#x3D;$2</span><br><span class="line">REDIS_INFO&#x3D;&quot;$RedisCli -h $HOST -p $PORT info&quot;</span><br><span class="line">[[ $# -ne 3 ]] &amp;&amp; [[ $# -ne 4 ]] &amp;&amp; &#123;</span><br><span class="line"> exit</span><br><span class="line">&#125;</span><br><span class="line">if [[ $# -eq 3 ]];then</span><br><span class="line">case $3 in</span><br><span class="line">exist)</span><br><span class="line"> result&#x3D;&#96;$RedisCli -h $HOST -p $PORT ping 2&gt;&#x2F;dev&#x2F;null |grep -c PONG&#96;</span><br><span class="line"> echo $result</span><br><span class="line">;;</span><br><span class="line">cluster)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep cluster|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">uptime_in_seconds)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep uptime_in_seconds|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_clients)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep connected_clients|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_longest_output_list)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep client_longest_output_list|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_biggest_input_buf)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep client_biggest_input_buf|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">blocked_clients)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep blocked_clients|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#内存</span><br><span class="line">maxmemory)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep maxmemory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_rss)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w used_memory_rss|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk -F&#39;k&#39; &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_pct)</span><br><span class="line"> A&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line"> B&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep maxmemory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line"> result&#x3D;&#96;echo $A $B | awk &#39;&#123;printf&quot;%0.2f&quot;,$1&#x2F;$2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_peak)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory_peak|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_lua)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory_lua|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">mem_fragmentation_ratio)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep mem_fragmentation_ratio|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#rdb</span><br><span class="line">rdb_changes_since_last_save)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_changes_since_last_save|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_bgsave_in_progress)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_bgsave_in_progress|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_save_time)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_last_save_time|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_bgsave_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rdb_last_bgsave_status&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39; | &#x2F;bin&#x2F;grep -c ok&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_current_bgsave_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rdb_current_bgsave_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#rdbinfo</span><br><span class="line">aof_enabled)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_enabled&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_scheduled)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_rewrite_scheduled&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_last_rewrite_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_last_rewrite_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_current_rewrite_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_current_rewrite_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_last_bgrewrite_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_last_bgrewrite_status&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39; | &#x2F;bin&#x2F;grep -c ok&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#aofinfo</span><br><span class="line">aof_current_size)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_current_size&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_base_size)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_base_size&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_rewrite)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_pending_rewrite&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_buffer_length)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_buffer_length&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_buffer_length)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_rewrite_buffer_length&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_bio_fsync)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_pending_bio_fsync&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_delayed_fsync)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_delayed_fsync&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#stats</span><br><span class="line">total_connections_received)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;total_connections_received&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">total_commands_processed)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;total_commands_processed&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">instantaneous_ops_per_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;instantaneous_ops_per_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rejected_connections)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rejected_connections&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expired_keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;expired_keys&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">evicted_keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;evicted_keys&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_hits)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;keyspace_hits&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_misses)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;keyspace_misses&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_channels&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_channels&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_patterns)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_patterns&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">latest_fork_usec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;latest_fork_usec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_slaves)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;connected_slaves&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_link_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_link_status&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;|&#x2F;bin&#x2F;grep -c up&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_last_io_seconds_ago)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_last_io_seconds_ago&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_sync_in_progress)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_sync_in_progress&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">slave_priority)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;slave_priority&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#cpu</span><br><span class="line">used_cpu_sys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_sys&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_user&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_sys_children)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_sys_children&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user_children)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_user_children&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> echo &quot;argu error&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">#db0:key</span><br><span class="line">   elif [[ $# -eq 4 ]];then</span><br><span class="line">case $4 in</span><br><span class="line">keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO| &#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;keys&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expires)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO| &#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;expires&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $4&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">avg_ttl)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;avg_ttl&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $6&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">     echo &quot;argu error&quot; ;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line">cat&gt;$&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh&lt;&lt;&quot;EOF&quot;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#$1是要发现的进程部分词汇</span><br><span class="line">portarray&#x3D;(&#96;sudo ss -tnlp|egrep -i &quot;$1&quot;|awk &#123;&#39;print $4&#39;&#125;|awk -F&#39;:&#39; &#39;&#123;if ($NF~&#x2F;^[0-9]*$&#x2F;) print $NF&#125;&#39;|sort|uniq&#96;)</span><br><span class="line">iparray&#x3D;&#96;curl -s http:&#x2F;&#x2F;169.254.169.254&#x2F;latest&#x2F;meta-data&#x2F;local-ipv4&#96;</span><br><span class="line">length&#x3D;$&#123;#portarray[@]&#125;</span><br><span class="line">printf &quot;&#123;\n&quot;</span><br><span class="line">printf &#39;\t&#39;&quot;\&quot;data\&quot;:[&quot;</span><br><span class="line">for ((i&#x3D;0;i&lt;$length;i++))</span><br><span class="line">  do</span><br><span class="line">     printf &#39;\n\t\t&#123;&#39;</span><br><span class="line">     printf &quot;\&quot;&#123;#IP&#125;\&quot;:\&quot;$&#123;iparray&#125;\&quot;,\&quot;&#123;#TCP_PORT&#125;\&quot;:\&quot;$&#123;portarray[$i]&#125;\&quot;&#125;&quot;</span><br><span class="line">     if [ $i -lt $[$length-1] ];then</span><br><span class="line">                printf &#39;,&#39;</span><br><span class="line">     fi</span><br><span class="line">  done</span><br><span class="line">printf &quot;\n\t]\n&quot;</span><br><span class="line">printf &quot;&#125;\n&quot;</span><br><span class="line">EOF</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;&#x2F;redis_info.sh</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh</span><br><span class="line">sed -i &#39;s#RedisCli&#x3D;#RedisCli&#x3D;\&quot;&#39;&quot;$&#123;RedisCli&#125;&quot;&#39;\&quot;#&#39; $&#123;ZabbixShell&#125;&#x2F;redis_info.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &#39;------------------------------------我是 zabbix 监控信息----------------------------------&#39;</span><br><span class="line">echo &#39;编辑 visudo，添加如下信息&#39;</span><br><span class="line">echo &quot;</span><br><span class="line">#zabbix用户可以以sudo执行ss</span><br><span class="line">zabbix ALL &#x3D; NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;ss</span><br><span class="line">#zabbix用户使用sudo无需tty</span><br><span class="line">Defaults:zabbix    !requiretty</span><br><span class="line">&quot;</span><br><span class="line">echo &#39;若redis运行在docker中，执行如下命令&#39;</span><br><span class="line">echo &#39;usermod -a -G docker zabbix&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ web 监控</title>
      <link href="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-构建-zabbix-agentd-端配置"><a href="#1-构建-zabbix-agentd-端配置" class="headerlink" title="1. 构建 zabbix_agentd 端配置"></a>1. 构建 zabbix_agentd 端配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">[root@ip-10-230-10-105 zabbix]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zabbix</span><br><span class="line">[root@ip-10-230-10-105 zabbix]<span class="comment"># tree &#123;etc,shell&#125;</span></span><br><span class="line">etc</span><br><span class="line">├── zabbix_agentd.conf</span><br><span class="line">├── zabbix_agentd.conf.bak</span><br><span class="line">└── zabbix_agentd.conf.d</span><br><span class="line">    └── http_status.conf <span class="comment"># 我是 zabbix_agentd 数据项配置</span></span><br><span class="line"></span><br><span class="line">shell</span><br><span class="line">└── web</span><br><span class="line">    ├── http_status.py <span class="comment"># 我是自动发现脚本 + 数据采集脚本</span></span><br><span class="line"></span><br><span class="line">    └── WEB.txt  <span class="comment"># 我是自动发现的数据源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 directories, 5 files</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zabbix_agentd 配置 http_status.conf</span></span><br><span class="line">UserParameter=web.site.code[*],/usr/bin/python /usr/<span class="built_in">local</span>/zabbix/shell/web/http_status.py web_site_code <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">UserParameter=web.site.discovery,/usr/bin/python /usr/<span class="built_in">local</span>/zabbix/shell/web/http_status.py web_site_discovery</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动发现规则配置文件 WEB.txt</span></span><br><span class="line"><span class="comment"># 一行一个监控地址</span></span><br><span class="line"><span class="comment"># get 原样写入</span></span><br><span class="line"><span class="comment"># post 模仿get多加一个?</span></span><br><span class="line">https://abc.com??&lt;post_kv&gt;</span><br><span class="line"></span><br><span class="line">https://abc.com?&lt;get_kv&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="comment"># python2.7</span></span><br><span class="line"><span class="comment"># 自动发现脚本 + 数据采集脚本 http_status.py</span></span><br><span class="line"><span class="comment"># 请将我添加 o+x 权限</span></span><br><span class="line"><span class="keyword">import</span> urllib2, sys, json, ConfigParser, os </span><br><span class="line"></span><br><span class="line">a1 = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web_site_code</span><span class="params">(args)</span>:</span></span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line">    WEB_TXT = <span class="string">"%s/WEB.txt"</span> % (os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(WEB_TXT):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"??"</span> <span class="keyword">in</span> line:</span><br><span class="line">                line = line.strip(<span class="string">'\n'</span>).split(<span class="string">"??"</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"?"</span> <span class="keyword">in</span> line:</span><br><span class="line">                line = line.strip(<span class="string">'\n'</span>).split(<span class="string">"?"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    response = urllib2.urlopen(line[<span class="number">0</span>], data=line[<span class="number">1</span>], timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">                <span class="keyword">except</span> IndexError:</span><br><span class="line">                    response = urllib2.urlopen(line[<span class="number">0</span>], timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    response = urllib2.urlopen(line, timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">            <span class="keyword">except</span> urllib2.URLError,e:</span><br><span class="line">                <span class="keyword">if</span> hasattr(e, <span class="string">'code'</span>):</span><br><span class="line">                    <span class="keyword">print</span> e.code</span><br><span class="line">                <span class="keyword">elif</span> hasattr(e, <span class="string">'reason'</span>):</span><br><span class="line">                    <span class="keyword">print</span> <span class="number">53</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    response.close()</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web_site_discovery</span><span class="params">()</span>:</span></span><br><span class="line">    Dict = &#123;<span class="string">"data"</span>:[]&#125;</span><br><span class="line">    WEB_TXT = <span class="string">"%s/WEB.txt"</span> % (os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(WEB_TXT):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"??"</span> <span class="keyword">in</span> line:</span><br><span class="line">            line = line.strip(<span class="string">'\n'</span>).split(<span class="string">"??"</span>)</span><br><span class="line">            line = &#123;<span class="string">"&#123;#SITENAME&#125;"</span>:line[<span class="number">0</span>]&#125;</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">"?"</span> <span class="keyword">in</span> line:</span><br><span class="line">            line = line.strip(<span class="string">'\n'</span>).split(<span class="string">"?"</span>)</span><br><span class="line">            line = &#123;<span class="string">"&#123;#SITENAME&#125;"</span>:line[<span class="number">0</span>]&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">            line = &#123;<span class="string">"&#123;#SITENAME&#125;"</span>:line&#125;</span><br><span class="line">        Dict[<span class="string">"data"</span>].append(line)</span><br><span class="line">    <span class="keyword">print</span> json.dumps(Dict, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a1 == <span class="string">'web_site_code'</span>:</span><br><span class="line">    url = sys.argv[<span class="number">2</span>]</span><br><span class="line">    web_site_code(url)</span><br><span class="line"><span class="keyword">elif</span> a1 == <span class="string">'web_site_discovery'</span>:</span><br><span class="line">    web_site_discovery()</span><br></pre></td></tr></table></figure><blockquote><p>{ #SITENAME} 自动发现脚本输出的重要变量 servername 地址，将会用于 web 控制台配置</p></blockquote><h2 id="2-构建-web-控制台配置"><a href="#2-构建-web-控制台配置" class="headerlink" title="2. 构建 web 控制台配置"></a>2. 构建 web 控制台配置</h2><ul><li><p>构建一个主机项，监控 agentd</p></li><li><p>在主机项，里构建自动发现规则，内容如图：</p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7//image-20200514155725608.png" alt="image-20200514155725608"></p></li><li><p>在自动发现规则里，构建监控项原型，内容如图：</p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7//image-20200514155816600.png" alt="image-20200514155816600"></p></li><li><p>在自动发现规则里，构建触发器原型，内容如图：  <img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7//image-20200514155852128.png" alt="image-20200514155956610"></p><blockquote><p>100秒以内，收集到三次不是200的数据，就报警</p></blockquote></li><li><p>在自动发现规则里，构建图形原型，内容如图：</p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7//image-20200514160334889.png" alt="image-20200514160334889"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ agent和proxy</title>
      <link href="/2020/05/14/zabbix%E2%98%9Eagent%E5%92%8Cproxy/"/>
      <url>/2020/05/14/zabbix%E2%98%9Eagent%E5%92%8Cproxy/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://repo.zabbix.com/zabbix/" target="_blank" rel="noopener">https://repo.zabbix.com/zabbix/</a></p></blockquote><h3 id="agent安装命令"><a href="#agent安装命令" class="headerlink" title="agent安装命令"></a>agent安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ubuntu 16.04</span></span><br><span class="line">wget http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">dpkg -i zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt-get install zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 14.04</span></span><br><span class="line">wget http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">dpkg -i zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt-get install zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos 7</span></span><br><span class="line">rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">yum install zabbix-agent -y</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos 6</span></span><br><span class="line">rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-15.el6.noarch.rpm;</span><br><span class="line">yum install zabbix-agent -y;</span><br><span class="line">chkconfig --level 2345 zabbix-agent on</span><br></pre></td></tr></table></figure><h3 id="agent主动模式配置文件"><a href="#agent主动模式配置文件" class="headerlink" title="agent主动模式配置文件"></a>agent主动模式配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf.bak;</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf &lt;&lt; &#39;EOF&#39;</span><br><span class="line">Hostname&#x3D;</span><br><span class="line">StartAgents&#x3D;0</span><br><span class="line">ServerActive&#x3D;</span><br><span class="line">PidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_agentd.pid</span><br><span class="line">LogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_agentd.log</span><br><span class="line">#DebugLevel&#x3D;4</span><br><span class="line">Include&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;*.conf</span><br><span class="line">#被监控端到服务器获取监控项的周期</span><br><span class="line">RefreshActiveChecks&#x3D;60</span><br><span class="line">#被监控端存储监控信息的空间大小</span><br><span class="line">BufferSize&#x3D;1000</span><br><span class="line">MaxLinesPerSecond&#x3D;200</span><br><span class="line">#超时时间</span><br><span class="line">Timeout&#x3D;10</span><br><span class="line">EOF</span><br><span class="line">vi  &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="proxy-安装命令"><a href="#proxy-安装命令" class="headerlink" title="proxy 安装命令"></a>proxy 安装命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># centos 6</span><br><span class="line">yum install http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;6&#x2F;x86_64&#x2F;zabbix-proxy-mysql-3.4.15-1.el6.x86_64.rpm -y</span><br><span class="line"># 解压数据库文件, 并自行导入</span><br><span class="line">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql-3.4.15&#x2F;schema.sql.gz &gt; schema.sql</span><br><span class="line"></span><br><span class="line"># centos 7</span><br><span class="line">yum install http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-proxy-mysql-3.4.15-1.el7.x86_64.rpm</span><br><span class="line">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql-3.4.15&#x2F;schema.sql.gz &gt; schema.sql</span><br></pre></td></tr></table></figure><h2 id="proxy-配置"><a href="#proxy-配置" class="headerlink" title="proxy 配置"></a>proxy 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/zabbix/zabbix_proxy.conf /etc/zabbix/zabbix_proxy.conf.bak;</span><br><span class="line">cat &gt; /etc/zabbix/zabbix_proxy.conf  &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">Server=</span><br><span class="line">ServerPort=10051</span><br><span class="line">Hostname=</span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_proxy.log</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_proxy.pid</span><br><span class="line">DBHost=</span><br><span class="line">DBPort=</span><br><span class="line">DBName=</span><br><span class="line">DBUser=</span><br><span class="line">DBPassword=</span><br><span class="line">Timeout=4</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line">ConfigFrequency=60</span><br><span class="line">DataSenderFrequency=60</span><br><span class="line">StartDiscoverers=5</span><br><span class="line">CacheSize=128M</span><br><span class="line">StartDBSyncers=20</span><br><span class="line">HistoryCacheSize=256M</span><br><span class="line">HistoryIndexCacheSize=32M</span><br><span class="line">EOF</span><br><span class="line">vi /etc/zabbix/zabbix_proxy.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ nginx</title>
      <link href="/2020/05/14/zabbix%E2%98%9Enginx/"/>
      <url>/2020/05/14/zabbix%E2%98%9Enginx/</url>
      
        <content type="html"><![CDATA[<blockquote><p>确保相关目录地址如下：</p><p>/etc/zabbix/shell</p><p>/etc/zabbix/zabbix_agentd.d</p><p>/usr/local/nginx/conf/server</p></blockquote><ul><li>1，nginx增加配置 server_status.server</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;server&#x2F;server_status.server &lt;&lt; &#39;EOF&#39;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  off;</span><br><span class="line">    location &#x2F;server_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t &amp;&amp; &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><hr><ul><li>2，添加脚本nginx.sh  (确保a+x权限)</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;zabbix&#x2F;shell -p;</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh &lt;&lt; &#39;EOF&#39;</span><br><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line"></span><br><span class="line">function active &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Active&#39; | awk &#39;&#123;print $NF&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reading &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Reading&#39; | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function writing &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt;&#x2F;dev&#x2F;null| grep &#39;Writing&#39; | awk &#39;&#123;print $4&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function waiting &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Waiting&#39; | awk &#39;&#123;print $6&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function accepts &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $1&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handled &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function requests &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $3&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function qps &#123;</span><br><span class="line">        NGINX_STATUS_URL&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot;</span><br><span class="line">        #若是tnginx，则最后应输出d[length(d)-1]</span><br><span class="line">        requestold&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;curl -s $&#123;NGINX_STATUS_URL&#125; | &#x2F;usr&#x2F;bin&#x2F;awk &#39;&#x2F;server accepts handled requests&#x2F;&#123;getline a;split(a,d);print d[length(d)]&#125;&#39;&#96;</span><br><span class="line">        TimeWait&#x3D;1</span><br><span class="line">        sleep $TimeWait</span><br><span class="line">        requestnew&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;curl -s $&#123;NGINX_STATUS_URL&#125; | &#x2F;usr&#x2F;bin&#x2F;awk &#39;&#x2F;server accepts handled requests&#x2F;&#123;getline a;split(a,d);print d[length(d)]&#125;&#39;&#96;</span><br><span class="line">        if [ $requestnew -gt 0 ];then</span><br><span class="line">                QPS&#x3D;&#96;echo &quot;( $requestnew - $requestold ) &#x2F; $TimeWait&quot; | &#x2F;usr&#x2F;bin&#x2F;bc&#96;</span><br><span class="line">        fi</span><br><span class="line">        echo $QPS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Run the requested function  </span><br><span class="line">$1</span><br><span class="line">EOF</span><br><span class="line">chmod a+x &#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh</span><br></pre></td></tr></table></figure><hr><ul><li>3，配置zabbix客户端zabbix_agentd.conf</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;nginx.conf &lt;&lt; &#39;EOF&#39;</span><br><span class="line">#monitor nginx  </span><br><span class="line">UserParameter&#x3D;nginx.accepts,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh accepts</span><br><span class="line">UserParameter&#x3D;nginx.handled,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh handled</span><br><span class="line">UserParameter&#x3D;nginx.requests,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh requests</span><br><span class="line">UserParameter&#x3D;nginx.connections.active,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh active</span><br><span class="line">UserParameter&#x3D;nginx.connections.reading,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh reading</span><br><span class="line">UserParameter&#x3D;nginx.connections.writing,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh writing</span><br><span class="line">UserParameter&#x3D;nginx.connections.waiting,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh waiting</span><br><span class="line">UserParameter&#x3D;nginx.connections.qps,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh qps</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><hr><ul><li>4，在服务的对应主机上添加模板</li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞redis</title>
      <link href="/2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/"/>
      <url>/2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/</url>
      
        <content type="html"><![CDATA[<h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redisName=redis</span><br><span class="line">docker volume create <span class="variable">$&#123;redisName&#125;</span></span><br><span class="line">touch /<span class="built_in">export</span>/docker-data-root/volumes/<span class="variable">$&#123;redisName&#125;</span>/_data/redis.conf</span><br><span class="line">redis.conf 请参考官方默认配置文档，默认配置文档地址： https://redis.io/topics/config</span><br><span class="line">docker run --name  <span class="variable">$&#123;redisName&#125;</span> -v  <span class="variable">$&#123;redisName&#125;</span>:/data -p 6379:6379 --restart always -d redis redis-server /data/redis.conf</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by zyh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2018-06-21</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DownUrl: redis源码包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisBaseDir： redis安装路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisPort: redis端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisMaxMem：redis内存限制</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZabbixBase: zabbix 根路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完毕后，会输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. redis信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. zabbix需要额外手动添加的命令， 并在zabbix_server_web里，给机器关联上 &lt;Template Redis Auto Discovert Active mode&gt; 模板</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. monit需要额外手动添加的配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BaseDir=`cd "$(dirname "$0")"; pwd`</span><br><span class="line">DownUrl=http://download.redis.io/releases/redis-stable.tar.gz</span><br><span class="line">RedisMaxMem=1g</span><br><span class="line">RedisPort=6379</span><br><span class="line">RedisBaseDir=/export/redis_$&#123;RedisPort&#125;</span><br><span class="line">ZabbixBase=/etc/zabbix</span><br><span class="line"></span><br><span class="line">if [[ $&#123;ZabbixBase&#125; == '/usr/local/zabbix' ]];then</span><br><span class="line">    ZabbixShell=$&#123;ZabbixBase&#125;/shell</span><br><span class="line">    ZabbixEtc=$&#123;ZabbixBase&#125;/etc/zabbix_agentd.conf.d/redis.conf</span><br><span class="line">else</span><br><span class="line">    ZabbixShell=/etc/zabbix/shell</span><br><span class="line">    ZabbixEtc=/etc/zabbix/zabbix_agentd.d/redis.conf</span><br><span class="line">fi</span><br><span class="line">RedisBaseName=$&#123;RedisBaseDir##*/&#125;</span><br><span class="line"></span><br><span class="line">export TOP_PID=$$</span><br><span class="line">trap 'exit 1' TERM</span><br><span class="line"></span><br><span class="line">exit_script()&#123;</span><br><span class="line">    kill -s TERM $TOP_PID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yum install gcc-c++ -y</span><br><span class="line"></span><br><span class="line">[[ -d $&#123;RedisBaseDir&#125; ]] &amp;&amp; echo "$&#123;RedisBaseDir&#125;已存在" &amp;&amp; exit_script</span><br><span class="line">ss -tnalp | grep redis | awk '&#123;print $4&#125;' | awk -F':' '&#123;print $2&#125;' | while read line;do</span><br><span class="line">    [[ $line -eq $&#123;RedisPort&#125; ]] &amp;&amp; echo "$&#123;RedisPort&#125;已被占用" &amp;&amp; exit_script</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cd $&#123;BaseDir&#125; &amp;&amp; mkdir redis</span><br><span class="line">wget $&#123;DownUrl&#125; -O redis.tar.gz</span><br><span class="line">tar xf redis.tar.gz --strip-components 1 -C redis</span><br><span class="line">cd redis</span><br><span class="line">make PREFIX=$&#123;RedisBaseDir&#125; install</span><br><span class="line">mkdir $&#123;RedisBaseDir&#125;/&#123;etc,data,logs&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;RedisBaseDir&#125;</span>/etc/redis.conf &lt;&lt;EOF</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode yes</span><br><span class="line">port $&#123;RedisPort&#125;</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile $&#123;RedisBaseDir&#125;/redis.pid</span><br><span class="line">loglevel warning</span><br><span class="line">logfile "$&#123;RedisBaseDir&#125;/logs/redis.log"</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename redis_$&#123;RedisPort&#125;.rdb</span><br><span class="line">dir $&#123;RedisBaseDir&#125;/data/</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">rename-command FLUSHDB GOD_FLUSHDB</span><br><span class="line">rename-command FLUSHALL GOD_FLUSHALL</span><br><span class="line">rename-command CONFIG GOD_CONFIG</span><br><span class="line">rename-command KEYS GOD_KEYS</span><br><span class="line">maxmemory $&#123;RedisMaxMem&#125;</span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">slave-lazy-flush no</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble no</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events ""</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;RedisBaseDir&#125;</span>/redis.sh &lt;&lt; EOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Simple Redis init.d script conceived to work on Linux systems</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> as it does use of the /proc filesystem.</span></span><br><span class="line">BASEDIR=$&#123;RedisBaseDir&#125;</span><br><span class="line">REDISPORT=$&#123;RedisPort&#125;</span><br><span class="line">EXEC=\$BASEDIR/bin/redis-server</span><br><span class="line">CLIEXEC=\$BASEDIR/bin/redis-cli</span><br><span class="line">PIDFILE=\$BASEDIR/redis.pid</span><br><span class="line">CONF="\$BASEDIR/etc/redis.conf"</span><br><span class="line">case "\$1" in</span><br><span class="line">    start)</span><br><span class="line">        [[ -f \$PIDFILE ]] &amp;&amp; kill -0 \`cat \$PIDFILE\` 2&gt;&gt;\$BASEDIR/crash.log &amp;&amp; echo "\$PIDFILE exists, process is already running or crashed" || &#123;</span><br><span class="line">                echo "Starting Redis server..."</span><br><span class="line">                \$EXEC \$CONF</span><br><span class="line">        &#125;</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ ! -f \$PIDFILE ]</span><br><span class="line">        then</span><br><span class="line">                echo "\$PIDFILE does not exist, process is not running"</span><br><span class="line">        else</span><br><span class="line">                PID=\$(cat \$PIDFILE)</span><br><span class="line">                echo "Stopping ..."</span><br><span class="line">                \$CLIEXEC -p \$REDISPORT shutdown</span><br><span class="line">                while [ -x /proc/\$&#123;PID&#125; ]</span><br><span class="line">                do</span><br><span class="line">                    echo "Waiting for Redis to shutdown ..."</span><br><span class="line">                    sleep 1</span><br><span class="line">                done</span><br><span class="line">                echo "Redis stopped"</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo "Please use start or stop as first argument"</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">chmod u+x $&#123;RedisBaseDir&#125;/redis.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改内核参数</span></span><br><span class="line">grep -q net.core.somaxconn /etc/sysctl.conf || echo "net.core.somaxconn = 511" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">grep -q vm.overcommit_memory /etc/sysctl.conf || &#123;</span><br><span class="line">    echo "vm.overcommit_memory = 1" &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line">&#125;</span><br><span class="line">grep -q '/sys/kernel/mm/transparent_hugepage/enabled' /etc/rc.local || &#123;</span><br><span class="line">    echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">    echo 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' &gt;&gt; /etc/rc.local</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改zabbix监控</span></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixEtc&#125;</span>&lt;&lt;EOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#redis monitor</span></span></span><br><span class="line">UserParameter=redis_info[*],$&#123;ZabbixShell&#125;/redis_info.sh \$1 \$2 \$3 \$4</span><br><span class="line">UserParameter=ip_port_discovery[*],$&#123;ZabbixShell&#125;/ip_port_discovery.sh \$1</span><br><span class="line">EOF</span><br><span class="line">mkdir $&#123;ZabbixShell&#125;</span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixShell&#125;</span>/redis_info.sh&lt;&lt;<span class="string">"EOF"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">REDISPATH="/export/redis/bin/redis-cli"</span><br><span class="line">HOST=$1</span><br><span class="line">PORT=$2</span><br><span class="line">REDIS_INFO="$REDISPATH -h $HOST -p $PORT info"</span><br><span class="line">[[ $# -ne 3 ]] &amp;&amp; [[ $# -ne 4 ]] &amp;&amp; &#123;</span><br><span class="line"> exit</span><br><span class="line">&#125;</span><br><span class="line">if [[ $# -eq 3 ]];then</span><br><span class="line">case $3 in</span><br><span class="line">exist)</span><br><span class="line"> result=`$REDISPATH -h $HOST -p $PORT ping 2&gt;/dev/null |grep -c PONG`</span><br><span class="line"> echo $result</span><br><span class="line">;;</span><br><span class="line">cluster)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep cluster|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">uptime_in_seconds)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep uptime_in_seconds|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_clients)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep connected_clients|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_longest_output_list)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep client_longest_output_list|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_biggest_input_buf)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep client_biggest_input_buf|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">blocked_clients)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep blocked_clients|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">内存</span></span><br><span class="line">maxmemory)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep maxmemory|awk -F":" '&#123;print $NF&#125;'|awk 'NR==1'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory|awk -F":" '&#123;print $NF&#125;'|awk 'NR==1'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_rss)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w used_memory_rss|awk -F":" '&#123;print $NF&#125;'|awk -F'k' '&#123;print $1&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_pct)</span><br><span class="line"> A=`$REDIS_INFO|/bin/grep used_memory|awk -F":" '&#123;print $NF&#125;'|awk 'NR==1'`</span><br><span class="line"> B=`$REDIS_INFO|/bin/grep maxmemory|awk -F":" '&#123;print $NF&#125;'|awk 'NR==1'`</span><br><span class="line"> result=`echo $A $B | awk '&#123;printf"%0.2f",$1/$2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_peak)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory_peak|awk -F":" '&#123;print $NF&#125;'|awk 'NR==1'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_lua)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory_lua|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">mem_fragmentation_ratio)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep mem_fragmentation_ratio|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdb</span></span><br><span class="line">rdb_changes_since_last_save)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_changes_since_last_save|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_bgsave_in_progress)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_bgsave_in_progress|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_save_time)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_last_save_time|awk -F":" '&#123;print $NF&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_bgsave_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "rdb_last_bgsave_status" | awk -F':' '&#123;print $2&#125;' | /bin/grep -c ok`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_current_bgsave_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "rdb_current_bgsave_time_sec" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdbinfo</span></span><br><span class="line">aof_enabled)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_enabled" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_scheduled)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_rewrite_scheduled" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_last_rewrite_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_last_rewrite_time_sec" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_current_rewrite_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_current_rewrite_time_sec" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_last_bgrewrite_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_last_bgrewrite_status" | awk -F':' '&#123;print $2&#125;' | /bin/grep -c ok`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">aofinfo</span></span><br><span class="line">aof_current_size)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_current_size" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_base_size)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_base_size" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_rewrite)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_pending_rewrite" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_buffer_length)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_buffer_length" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_buffer_length)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_rewrite_buffer_length" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_bio_fsync)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_pending_bio_fsync" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_delayed_fsync)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "aof_delayed_fsync" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">stats</span></span><br><span class="line">total_connections_received)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "total_connections_received" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">total_commands_processed)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "total_commands_processed" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">instantaneous_ops_per_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "instantaneous_ops_per_sec" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rejected_connections)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "rejected_connections" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expired_keys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "expired_keys" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">evicted_keys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "evicted_keys" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_hits)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "keyspace_hits" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_misses)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "keyspace_misses" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "pubsub_channels" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "pubsub_channels" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_patterns)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "pubsub_patterns" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">latest_fork_usec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "latest_fork_usec" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_slaves)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "connected_slaves" | awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_link_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "master_link_status"|awk -F':' '&#123;print $2&#125;'|/bin/grep -c up`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_last_io_seconds_ago)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "master_last_io_seconds_ago"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_sync_in_progress)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "master_sync_in_progress"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">slave_priority)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "slave_priority"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">cpu</span></span><br><span class="line">used_cpu_sys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "used_cpu_sys"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "used_cpu_user"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_sys_children)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "used_cpu_sys_children"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user_children)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "used_cpu_user_children"|awk -F':' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> echo "argu error"</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta">#</span><span class="bash">db0:key</span></span><br><span class="line">   elif [[ $# -eq 4 ]];then</span><br><span class="line">case $4 in</span><br><span class="line">keys)</span><br><span class="line">        result=`$REDIS_INFO| /bin/grep -w "db0"| /bin/grep -w "$1" | /bin/grep -w "keys" | awk -F'=|,' '&#123;print $2&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expires)</span><br><span class="line">        result=`$REDIS_INFO| /bin/grep -w "db0"| /bin/grep -w "$1" | /bin/grep -w "expires" | awk -F'=|,' '&#123;print $4&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">avg_ttl)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w "db0"| /bin/grep -w "$1" | /bin/grep -w "avg_ttl" | awk -F'=|,' '&#123;print $6&#125;'`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">     echo "argu error" ;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixShell&#125;</span>/ip_port_discovery.sh&lt;&lt;<span class="string">"EOF"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$1</span>是要发现的进程部分词汇</span></span><br><span class="line">portarray=(`sudo ss -tnlp|egrep -i "$1"|awk &#123;'print $4'&#125;|awk -F':' '&#123;if ($NF~/^[0-9]*$/) print $NF&#125;'|sort|uniq`)</span><br><span class="line">iparray=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`</span><br><span class="line">length=$&#123;#portarray[@]&#125;</span><br><span class="line">printf "&#123;\n"</span><br><span class="line">printf '\t'"\"data\":["</span><br><span class="line">for ((i=0;i&lt;$length;i++))</span><br><span class="line">  do</span><br><span class="line">     printf '\n\t\t&#123;'</span><br><span class="line">     printf "\"&#123;#IP&#125;\":\"$&#123;iparray&#125;\",\"&#123;#TCP_PORT&#125;\":\"$&#123;portarray[$i]&#125;\"&#125;"</span><br><span class="line">     if [ $i -lt $[$length-1] ];then</span><br><span class="line">                printf ','</span><br><span class="line">     fi</span><br><span class="line">  done</span><br><span class="line">printf "\n\t]\n"</span><br><span class="line">printf "&#125;\n"</span><br><span class="line">EOF</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;/redis_info.sh</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;/ip_port_discovery.sh</span><br><span class="line">sed -i '2s#/export/redis#'"$&#123;RedisBaseDir&#125;"'#' $&#123;ZabbixShell&#125;/redis_info.sh</span><br><span class="line"></span><br><span class="line">echo '--------------------------------------------------我是 redis 信息-----------------------------------------------------------'</span><br><span class="line">echo 'redis相关信息如下：'</span><br><span class="line">echo "</span><br><span class="line">根路径：$&#123;RedisBaseDir&#125;</span><br><span class="line">启动脚本：$&#123;RedisBaseDir&#125;/redis.sh</span><br><span class="line">"</span><br><span class="line">echo '--------------------------------------------------我是 zabbix 监控信息----------------------------------------------------------'</span><br><span class="line">echo '请先安装 zabbix.'</span><br><span class="line">echo 'zabbix监控因使用了ss命令，故而需要开启sudo相关信息'</span><br><span class="line">echo "</span><br><span class="line"><span class="meta">#</span><span class="bash">zabbix用户可以以sudo执行ss</span></span><br><span class="line">zabbix ALL = NOPASSWD: /usr/sbin/ss</span><br><span class="line"><span class="meta">#</span><span class="bash">zabbix用户使用sudo无需tty</span></span><br><span class="line">Defaults:zabbix    !requiretty</span><br><span class="line">"</span><br><span class="line"></span><br><span class="line">echo '---------------------------------------------------我是 monit 监控信息----------------------------------------------------------'</span><br><span class="line">echo '请先安装 monit.'</span><br><span class="line">echo 'monit配置文件如下:'</span><br><span class="line">echo "</span><br><span class="line">check process $&#123;RedisBaseName&#125; with pidfile $&#123;RedisBaseDir&#125;/redis.pid</span><br><span class="line">  start program = \"$&#123;RedisBaseDir&#125;/redis.sh start\"</span><br><span class="line">  stop program = \"$&#123;RedisBaseDir&#125;/redis.sh stop\"</span><br><span class="line">if changed pid then alert</span><br><span class="line">"</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 微信预警</title>
      <link href="/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E5%BE%AE%E4%BF%A1%E9%A2%84%E8%AD%A6/"/>
      <url>/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E5%BE%AE%E4%BF%A1%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf.ini</span></span><br><span class="line">[wechat]</span><br><span class="line">corpid = </span><br><span class="line"></span><br><span class="line">[app]</span><br><span class="line">it = &lt;app_agent_id&gt;:&lt;app_secret&gt;</span><br><span class="line"></span><br><span class="line">[group]</span><br><span class="line">it = usera|userb</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: zyh</span></span><br><span class="line"><span class="string">@contact: zhangyanghua@altamob.com</span></span><br><span class="line"><span class="string">@software: vscode</span></span><br><span class="line"><span class="string">@file: sendchat.py</span></span><br><span class="line"><span class="string">@time: 2020/02/05</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, requests, pathlib, json, configparser</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PySendchat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, corpid, agentid, secret, touser, content)</span>:</span></span><br><span class="line">        self.corpid=corpid</span><br><span class="line">        self.agentid=agentid</span><br><span class="line">        self.secret=secret</span><br><span class="line">        self.touser=touser</span><br><span class="line">        self.content=content</span><br><span class="line"></span><br><span class="line">        LOG_PATHDIR=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        LOG_FILENAME = <span class="string">'&#123;0&#125;/sendchat.log'</span>.format(LOG_PATHDIR)</span><br><span class="line">        self.my_logger = logging.getLogger(<span class="string">'SendChat'</span>)</span><br><span class="line">        self.my_logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add the log message handler to the logger</span></span><br><span class="line">        handler = logging.handlers.RotatingFileHandler(LOG_FILENAME, maxBytes=<span class="number">102400000</span>, backupCount=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create formatter and add it to the handlers</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        self.my_logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gettoken</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.my_logger.info(<span class="string">'-----------------------------------------------------------------------------------------'</span>)</span><br><span class="line">        pwd=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        tokenfile=<span class="string">'&#123;0&#125;/wechat.&#123;1&#125;'</span>.format(pwd,self.agentid)</span><br><span class="line">        <span class="keyword">if</span> pathlib.Path(tokenfile).exists():</span><br><span class="line">            tokenfilectime=os.path.getctime(tokenfile)</span><br><span class="line">            currenttime=datetime.now().timestamp()</span><br><span class="line">            dtime=currenttime-tokenfilectime</span><br><span class="line">            self.my_logger.info(<span class="string">'&#123;0&#125; lived &#123;1&#125;s.'</span>.format(tokenfile, dtime))</span><br><span class="line">            <span class="keyword">if</span> dtime&gt;=<span class="number">7200</span>:</span><br><span class="line">                os.remove(tokenfile)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check token file</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tokensize = os.path.getsize(tokenfile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.info(<span class="string">'Token file is not exist.Reason:&#123;0&#125;'</span>.format(e))</span><br><span class="line">            tokensize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get token from token file</span></span><br><span class="line">        <span class="keyword">if</span> tokensize != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">with</span> open(tokenfile, <span class="string">'rb'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                token = fd.read() <span class="comment"># get token success</span></span><br><span class="line">                self.my_logger.info(<span class="string">'Get token from token file.'</span>)</span><br><span class="line">        <span class="comment"># get token from weixin api</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">'New Token Create.'</span>)</span><br><span class="line">                f = requests.get(<span class="string">'https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;0&#125;&amp;corpsecret=&#123;1&#125;'</span>.format(self.corpid, self.secret))</span><br><span class="line">                token = f.content</span><br><span class="line">                self.my_logger.info(<span class="string">'Get token from weixin api.'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">'Get token error!Reason:&#123;0&#125;'</span>.format(e))</span><br><span class="line">                exit()</span><br><span class="line">        jsonObject = json.loads(token.decode(encoding=<span class="string">'utf8'</span>))</span><br><span class="line">        errcode=int(jsonObject.get(<span class="string">"errcode"</span>))</span><br><span class="line">        <span class="keyword">if</span> errcode != <span class="number">0</span>:</span><br><span class="line">            errmsg=jsonObject.get(<span class="string">"errmsg"</span>)</span><br><span class="line">            self.my_logger.error(<span class="string">'Get token error!Reason:&#123;0&#125;'</span>.format(errmsg))</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">'Write token to &#123;0&#125;.'</span>.format(tokenfile))</span><br><span class="line">                <span class="keyword">with</span> open(tokenfile, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                    fd.write(token)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">'Write &#123;0&#125; error!Reason:&#123;1&#125;'</span>.format(tokenfile,e))</span><br><span class="line">                exit()</span><br><span class="line">        access_token = jsonObject.get(<span class="string">"access_token"</span>)</span><br><span class="line">        <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendmsg</span><span class="params">(self)</span>:</span></span><br><span class="line">        accessToken = self.gettoken()</span><br><span class="line">        self.my_logger.info(<span class="string">'Token:&#123;0&#125;'</span>.format(accessToken))</span><br><span class="line">        sendMapDirectroy = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">"agentid"</span>] = self.agentid</span><br><span class="line">        sendMapDirectroy[<span class="string">"touser"</span>] = self.touser</span><br><span class="line">        sendMapDirectroy[<span class="string">"msgtype"</span>] = <span class="string">"text"</span></span><br><span class="line">        sendMapDirectroy[<span class="string">"safe"</span>] = <span class="string">"0"</span></span><br><span class="line">        contentDirectory = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">"text"</span>] = contentDirectory</span><br><span class="line">        contentDirectory[<span class="string">"content"</span>] = self.content</span><br><span class="line">        bodyStr = json.dumps(sendMapDirectroy, ensure_ascii=<span class="literal">False</span>).encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = requests.post(url=<span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s"</span> % accessToken,</span><br><span class="line">                          data=bodyStr, timeout=<span class="number">5</span>)</span><br><span class="line">            self.my_logger.info(f.content)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.error(<span class="string">'Send chat network error!Reason:&#123;0&#125;'</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    appname = sys.argv[<span class="number">1</span>]</span><br><span class="line">    content = sys.argv[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># read conf.ini</span></span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    conf_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    conf_ini = <span class="string">"&#123;0&#125;/conf.ini"</span>.format(conf_path)</span><br><span class="line">    <span class="keyword">if</span> pathlib.Path(conf_ini).exists():</span><br><span class="line">        conf.read(conf_ini)</span><br><span class="line">        corpid = conf.get(<span class="string">"wechat"</span>, <span class="string">"corpid"</span>)</span><br><span class="line">        appinfo = conf.get(<span class="string">"app"</span>, appname)</span><br><span class="line">        agentid = appinfo.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        secret = appinfo.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        groupname = conf.get(<span class="string">"group"</span>, appname)</span><br><span class="line">        touser = groupname.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">        chatobj = PySendchat(corpid, agentid, secret, touser, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'conf.ini error'</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chatobj.sendmsg()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        chatobj.my_logger.error(<span class="string">"Send chat failure!"</span>)</span><br></pre></td></tr></table></figure><p>eg:</p><p>python sendchat.py it ‘’ &lt;预警内容&gt;</p><blockquote><p>创建好app，并关联用户到app</p><p>执行上述命令，会将预警内容通过<app_agent_id> 应用发送给用户usera和userb</app_agent_id></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志 ☞ logrotate 轮转</title>
      <link href="/2020/05/14/%E6%97%A5%E5%BF%97%E2%98%9Elogrotate/"/>
      <url>/2020/05/14/%E6%97%A5%E5%BF%97%E2%98%9Elogrotate/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>logrotate 可以帮助我们进行日志切割，搭配 cron 服务，就可以自动的进行轮转</p><h4 id="logrotate-版本更新"><a href="#logrotate-版本更新" class="headerlink" title="logrotate 版本更新"></a>logrotate 版本更新</h4><blockquote><p>确保 logrotate 支持小时级别的管理，替换/usr/sbin/logrotate,并附加x权限，我这里有一个二进制版本 <a href="logrotate">logrotate</a> </p><p>或者也可以直接去 github 上拉取<a href="https://github.com/logrotate/logrotate" target="_blank" rel="noopener">https://github.com/logrotate/logrotate</a></p></blockquote><h4 id="添加-logrotate-配置"><a href="#添加-logrotate-配置" class="headerlink" title="添加 logrotate 配置"></a>添加 logrotate 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加所需切割的日志配置</span></span><br><span class="line">cat &gt; /etc/logrotate.d/nginx &lt;&lt; <span class="string">'EOF'</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/logs/access.log &#123;  <span class="comment"># 定义日志位置</span></span><br><span class="line"> hourly    <span class="comment"># 按照小时切割</span></span><br><span class="line"> rotate 2  <span class="comment"># 最多保留两份切割日志</span></span><br><span class="line"> missingok</span><br><span class="line"> nocompress</span><br><span class="line"> sharedscripts</span><br><span class="line"> postrotate</span><br><span class="line">  /bin/<span class="built_in">kill</span> -USR1 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line"> endscript</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="添加-crontab-配置"><a href="#添加-crontab-配置" class="headerlink" title="添加 crontab 配置"></a>添加 crontab 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加logrotate执行脚本</span></span><br><span class="line">cp /etc/cron.daily/logrotate /etc/cron.hourly/</span><br></pre></td></tr></table></figure><h4 id="重载-crond-服务"><a href="#重载-crond-服务" class="headerlink" title="重载 crond 服务"></a>重载 crond 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reload crond</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logrotate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 邮件预警</title>
      <link href="/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/"/>
      <url>/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $1 收件人</span></span><br><span class="line"><span class="comment"># $2 主题</span></span><br><span class="line"><span class="comment"># $3 内容</span></span><br><span class="line">smtpServer=  <span class="comment"># smtp 服务器地址，例如 smtp.gmail.com:xxx</span></span><br><span class="line">sendUserEmail=<span class="string">'it@abc.com'</span></span><br><span class="line">sendUserPassword=  <span class="comment"># 一般发件人邮箱密码都是专用密码，并非web密码</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/sendEmail -f <span class="variable">$&#123;sendUserEmail&#125;</span> -t <span class="variable">$1</span> -u <span class="string">"<span class="variable">$2</span>"</span> -m <span class="string">"<span class="variable">$3</span>"</span> -s <span class="variable">$&#123;smtpServer&#125;</span> -xu <span class="variable">$&#123;sendUserEmail&#125;</span> -xp <span class="variable">$&#123;sendUserPassword&#125;</span> -o message-charset=utf-8</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib </span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"> </span><br><span class="line">mail_host = <span class="string">''</span> <span class="comment"># smtp 服务器地址，例如 smtp.gmail.com:xxx</span></span><br><span class="line">mail_user = <span class="string">'it@abc.com'</span></span><br><span class="line">mail_pass = <span class="string">''</span> <span class="comment"># 一般发件人邮箱密码都是专用密码，并非web密码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to_list,subject,content)</span>:</span> </span><br><span class="line">    me = mail_user+<span class="string">"&lt;"</span>+mail_user+<span class="string">"&gt;"</span> </span><br><span class="line">    msg = MIMEText(content) </span><br><span class="line">    msg[<span class="string">'Subject'</span>] = subject </span><br><span class="line">    msg[<span class="string">'From'</span>] = me </span><br><span class="line">    msg[<span class="string">'to'</span>] = to_list </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"start sendmail"</span></span><br><span class="line">        s = smtplib.SMTP(mail_host)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"connect mail server suesscc"</span> </span><br><span class="line">s.starttls()</span><br><span class="line">        s.login(mail_user,mail_pass) </span><br><span class="line"><span class="keyword">print</span> <span class="string">"login mail server suesscc"</span></span><br><span class="line">        s.sendmail(me,to_list,msg.as_string()) </span><br><span class="line">        s.close() </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">except</span> Exception,e: </span><br><span class="line">        <span class="keyword">print</span> str(e) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line">    send_mail(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控☞企业微信机器人</title>
      <link href="/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wechatUrl=</span><br><span class="line">wechatData=</span><br><span class="line">curl <span class="variable">$&#123;wechatUrl&#125;</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"msgtype": "markdown","markdown": &#123;"content": "`'</span><span class="string">"<span class="variable">$wechatData</span>"</span><span class="string">'`"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line">wechatData=&#123;<span class="string">"msgtype"</span>: <span class="string">"text"</span>,<span class="string">"text"</span>: &#123;<span class="string">"content"</span>: <span class="string">""</span>&#125;&#125;</span><br><span class="line">wechatData[<span class="string">'text'</span>][<span class="string">'content'</span>]=<span class="string">'广州今日天气：29度，大部分多云，降雨概率：60%'</span></span><br><span class="line">wechatData[<span class="string">'text'</span>][<span class="string">'mentioned_list'</span>]=[<span class="string">"zyh"</span>]  <span class="comment"># all 代表群组所有人</span></span><br><span class="line">wechatData=json.dumps(wechatData)</span><br><span class="line">wechatUrl=</span><br><span class="line">requests.post(url=wechatUrl, headers=&#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;, data=wechat</span><br><span class="line">Data, timeout=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 远程磁盘检测</title>
      <link href="/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E8%BF%9C%E7%A8%8B%E7%A3%81%E7%9B%98%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E8%BF%9C%E7%A8%8B%E7%A3%81%E7%9B%98%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 文件名：disklog.sh </span></span><br><span class="line"><span class="comment"># 用途：监视远程系统的磁盘使用情况 </span></span><br><span class="line">BaseDir=`<span class="built_in">cd</span> <span class="string">"<span class="variable">$(dirname "$0")</span>"</span>; <span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BaseDir</span></span><br><span class="line">logfile=<span class="string">"disk.log"</span> </span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$1</span> ]];<span class="keyword">then</span> </span><br><span class="line">    logfile=<span class="variable">$1</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">shellexecuser=`whoami`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$shellexecuser</span> == root ]];<span class="keyword">then</span></span><br><span class="line">    rm -rf /root/.ssh/known_hosts</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    rm -rf /home/<span class="variable">$shellexecuser</span>/.ssh/known_hosts</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-8s %-14s %-9s %-8s %-6s %-6s %-6s %s\r\n"</span> <span class="string">"Date"</span> <span class="string">"IP ADDRESS"</span> <span class="string">"Device"</span> <span class="string">"Capacity"</span> <span class="string">"Used"</span> <span class="string">"Free"</span> <span class="string">"Percent"</span> <span class="string">"Status"</span> &gt; <span class="variable">$logfile</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">##################### 手动填写区</span></span><br><span class="line"><span class="comment"># 提供远程主机IP地址列表 1.1.1.1 2.2.2.2 3.3.3.3</span></span><br><span class="line">IP_LIST=</span><br><span class="line"><span class="comment"># 监控阈值(百分比) 只填写数字 1 到 100</span></span><br><span class="line">DiskPct=</span><br><span class="line"><span class="comment"># 执行用户</span></span><br><span class="line">UserName=<span class="string">''</span></span><br><span class="line"><span class="comment"># 执行用户所需私钥, 此文件需要与脚本同级目录</span></span><br><span class="line">PemName=<span class="string">''</span></span><br><span class="line"><span class="comment"># 企业微信bot机器人地址</span></span><br><span class="line">wx_api=<span class="string">''</span></span><br><span class="line"><span class="comment">##################### 手动填写区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$IP_LIST</span>;<span class="keyword">do</span> </span><br><span class="line">    ssh -i <span class="variable">$PemName</span> -o StrictHostKeyChecking=no <span class="variable">$&#123;UserName&#125;</span>@<span class="variable">$ip</span> <span class="string">'df -H'</span> | grep ^/dev/ &gt; /tmp/$$.df </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> </span><br><span class="line">        cur_date=`date  <span class="string">"+%F_%R"</span>`</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">"%-8s %-14s "</span> <span class="variable">$cur_date</span> <span class="variable">$ip</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">'&#123; printf("%-9s %-8s %-6s %-6s %-8s", $1,$2,$3,$4,$5); &#125;'</span> </span><br><span class="line"></span><br><span class="line">        pusg=$(<span class="built_in">echo</span> <span class="variable">$line</span> | egrep -o <span class="string">"[0-9]+%"</span>) </span><br><span class="line">        pusg=<span class="variable">$&#123;pusg/\%/&#125;</span>; </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$pusg</span> -lt <span class="variable">$DiskPct</span> ];<span class="keyword">then</span> </span><br><span class="line">            <span class="built_in">echo</span> OK</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">echo</span> ALERT </span><br><span class="line">        <span class="keyword">fi</span> </span><br><span class="line">    <span class="keyword">done</span> &lt; /tmp/$$.df </span><br><span class="line">    rm -rf /tmp/$$.df</span><br><span class="line"><span class="keyword">done</span> &gt;&gt; <span class="variable">$&#123;logfile&#125;</span></span><br><span class="line">sed -n <span class="string">'1p'</span> <span class="variable">$&#123;logfile&#125;</span> &gt; alert.log</span><br><span class="line">awk <span class="string">'$NF == "ALERT"&#123;print $0&#125;'</span> <span class="variable">$&#123;logfile&#125;</span> &gt;&gt; alert.log</span><br><span class="line"><span class="comment">#sed -i '1i "磁盘阈值：'"$DiskPct"'"' alert.log</span></span><br><span class="line">content=`cat alert.log`</span><br><span class="line">grep -q <span class="string">'ALERT'</span> alert.log &amp;&amp; &#123;</span><br><span class="line">curl <span class="string">"<span class="variable">$wx_api</span>"</span>  -H <span class="string">'Content-Type: application/json'</span>  \</span><br><span class="line">-d <span class="string">'</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string">        "msgtype": "text",</span></span><br><span class="line"><span class="string">        "text": &#123;</span></span><br><span class="line"><span class="string">            "content": "'</span><span class="string">"<span class="variable">$content</span>"</span><span class="string">'"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">   &#125;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-过滤器</title>
      <link href="/2020/05/11/ansible%E2%98%9Eplaybook-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/05/11/ansible%E2%98%9Eplaybook-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不管是过滤器，lookup，query，with_xxx，很多都是获取我们想要的信息。</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><blockquote><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html</a></p></blockquote><blockquote><p>处理变量值，从而获取想要的信息.</p><p>过滤器本身是 jinja2 或者 ansible 官方定义的</p></blockquote><h4 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">vara:</span> <span class="string">abcde</span></span><br><span class="line">    <span class="attr">varb:</span> <span class="string">[1,2,3,A,b,C,d]</span></span><br><span class="line">    <span class="attr">varc:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">vard:</span> <span class="string">[</span> <span class="number">1</span><span class="string">,2,3,[4,5,6],4,5</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">upper</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vara | upper&#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>简例中的 upper 即是过滤器，它可以将 vara 中的所有字母元素大写，最终输出 ABCDE</p></blockquote><h4 id="常用的过滤器"><a href="#常用的过滤器" class="headerlink" title="常用的过滤器"></a>常用的过滤器</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将字符串开头和结尾的空格去除</span></span><br><span class="line"><span class="string">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vara | trim &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment">#返回字符串或列表长度,length与count等效,可以写为count</span></span><br><span class="line"><span class="string">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | length &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 绝对值</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varc | abs &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 排序(降序排序)</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | sort(reverse=true) &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 将列表中第一层嵌套列表元素展开并入列表中,并取出新列表中的最大元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vard | flatten(levels=1) | max &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 随机返回一个元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | random &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vard | unique &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | union(vard) &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | intersect(vard) &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 补集，取出存在于 varb，但不存在于 vard 中的元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | difference(vard) &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 去除两个列表交集后的元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb | symmetric_difference(vard) &#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 变量未定义，返回默认值 new</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vare | default('new')&#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 变量未定义或者定义但为空，返回默认值 new</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; vare | default('new', boolean=true)&#125;&#125;</span>"</span></span><br><span class="line"><span class="comment"># 变量未定义时，忽略某个参数</span></span><br><span class="line"><span class="attr">file:</span> <span class="string">xxxx</span>  <span class="string">mode=&#123;&#123;</span> <span class="string">vare</span> <span class="string">|</span> <span class="string">default(omit)&#125;&#125;"</span>  <span class="comment"># 若 vare 不存在，则忽略mode参数</span></span><br></pre></td></tr></table></figure><h4 id="json-query"><a href="#json-query" class="headerlink" title="json_query"></a>json_query</h4><blockquote><p>获取特定数据</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查询字符串可用变量代替，增加可读性</span><br><span class="line"> loop: &quot;&#123;&#123; domain_definition | json_query(server_name_cluster1_query) &#125;&#125;&quot;</span><br><span class="line"> vars:</span><br><span class="line">    server_name_cluster1_query: &quot;domain.server[?cluster&#x3D;&#x3D;&#39;cluster1&#39;].port&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询条件</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; users | json_query('[?name==`zhangsan`].gender') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: [</span><br><span class="line">        <span class="string">"male"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p>映射</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; users|map(attribute='name') | list &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; users | json_query('[*].name') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test 2 是采用 json_query 方式，test1和test2结果一样</span></span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: [</span><br><span class="line">        <span class="string">"zhangsan"</span>, </span><br><span class="line">        <span class="string">"lisi"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-文本文件操作</title>
      <link href="/2020/05/10/ansible%E2%98%9Eplaybook-%E5%8F%98%E9%87%8F/"/>
      <url>/2020/05/10/ansible%E2%98%9Eplaybook-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="var-定义"><a href="#var-定义" class="headerlink" title="var 定义"></a>var 定义</h4><blockquote><p>通过变量，修改playbook</p><p>可直接写入 playbook， 也可以写入文件，然后 playbook 通过 vars_files 引用</p><p>关键词:</p><ul><li>vars</li><li>vars_files # 一次性加载文件内部数据，不支持文件动态修改或添加新变量</li></ul></blockquote><h4 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">~/vars.yml</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">father:</span> <span class="string">Zhang</span> <span class="string">San</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"<span class="template-variable">&#123;&#123; father &#125;&#125;</span> - <span class="template-variable">&#123;&#123; children.son_name &#125;&#125;</span> success"</span> <span class="string">&gt;&gt;</span> <span class="string">~/son.log</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">children:</span></span><br><span class="line">  <span class="attr">son_name:</span> <span class="string">Zhang</span> <span class="string">Xiaosan</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># son.log 内容</span></span><br><span class="line">Zhang San - Zhang Xiaosan success</span><br></pre></td></tr></table></figure><h4 id="var-注册"><a href="#var-注册" class="headerlink" title="var 注册"></a>var 注册</h4><blockquote><p>当我们想将某个任务的结果写入一个变量的时候，我们可以用register来进行注册</p><p>关键词: </p><ul><li>register</li><li>debug  <ul><li>var 输出变量值</li><li>msg 输出字符串</li></ul></li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">register</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"register success"</span> <span class="string">&gt;</span> <span class="string">~/register.log</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">resultInfo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">register</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"Oh my god"</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">resultInfo</span></span><br></pre></td></tr></table></figure><h4 id="var-交互"><a href="#var-交互" class="headerlink" title="var 交互"></a>var 交互</h4><blockquote><p>提供一个用户输入信息的机会，和 shell 里面的 read -p 一致。</p><p>关键词：</p><ul><li>vars_prompt</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: localhost</span><br><span class="line">  remote_user: zyh</span><br><span class="line">  vars_prompt:</span><br><span class="line">    - name: <span class="string">"fatherName"</span></span><br><span class="line">      prompt: <span class="string">"What's your father name"</span></span><br><span class="line">      default: ZhangSan</span><br><span class="line">      private: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: show father name</span><br><span class="line">      shell: <span class="built_in">echo</span> <span class="string">"&#123;&#123; fatherName &#125;&#125;"</span> &gt; ~/prompt.log</span><br></pre></td></tr></table></figure><blockquote><p>private yes=隐藏输入内容 no=显示输入内容</p><p>default 默认值</p><p>encrypt “sha512_crypt” 将变量值加密，一般用于传递密码，比如传递给 user 模块的 password 参数</p></blockquote><h4 id="var-命令行传入"><a href="#var-命令行传入" class="headerlink" title="var 命令行传入"></a>var 命令行传入</h4><blockquote><p>一般用于临时强制覆盖playbook中定义好的变量</p><p>关键词：</p><ul><li>-e 或者 –extra-vars<ul><li>参数后面，可以跟随多个变量kv对，每一个kv对用空格隔开</li><li>参数后面，@filePath 可以传入变量文件，文件中的变量均可以被引用</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-play test.play -e <span class="string">"fatherName=Laowang"</span></span><br></pre></td></tr></table></figure><h4 id="var-作用域"><a href="#var-作用域" class="headerlink" title="var 作用域"></a>var 作用域</h4><table><thead><tr><th>创建方式</th><th>调用位置</th><th>作用域</th></tr></thead><tbody><tr><td>vars</td><td>play和tasks</td><td>当前play或者当前tasks，无法跨主机</td></tr><tr><td>set_fact</td><td>tasks</td><td>跨play，默认无法跨主机</td></tr><tr><td>register</td><td>tasks</td><td>跨play，默认无法跨主机</td></tr></tbody></table><p>若要使得 set_fact 和 register 跨主机使用，则需要引入内置变量 <code>hostvars</code> 例如 hostvars.&lt;主机名&gt;.&lt;变量名&gt;</p><blockquote><p>其它内置变量：</p><ul><li><p>ansible_version # 版本 </p></li><li><p>hostvars # 存储play中的所有主机变量</p></li><li><p>play_hosts # 存储play中的所有主机名</p></li><li><p>inventory_hostname  # 存储当前主机名</p></li><li><p>inventory_hostname_short  # 存储当前主机名简称（其实就是获取主机名第一级，例如001.localhost，那么获取的就是001）</p></li><li><p>groups # 存储所有分组信息，包括all和ungrouped</p></li><li><p>group_names # 存储当前play中主机的所属组名</p></li><li><p>inventory_dir # 存储主机清单文件所在路径</p></li></ul></blockquote><h4 id="var-动态获取新变量"><a href="#var-动态获取新变量" class="headerlink" title="var 动态获取新变量"></a>var 动态获取新变量</h4><blockquote><p>关键词：include_vars</p><p>用于任务重载变量文件，从而获取任务期间变量文件修改的数据</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">~/test.yaml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">varb</span> <span class="bullet">-</span> <span class="string">max</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb |  max &#125;&#125;</span>"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lineinfile</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">^varb</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">"varb: [1,2,3,4]"</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/test.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_vars:</span> <span class="string">~/test.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">varb</span> <span class="bullet">-</span> <span class="string">max</span> <span class="string">again</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; varb |  max &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### test.yaml 变量文件初始内容:</span></span><br><span class="line"></span><br><span class="line">vara: 123                                                                 </span><br><span class="line">varb: [1,2,3]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 最终结果：</span></span><br><span class="line"></span><br><span class="line">第一次 get varb 任务输出 3, 第二次 get varb 任务输出 4</span><br></pre></td></tr></table></figure><blockquote><p>include_vars 模块常用参数：</p><ul><li><p>file 读取某个变量文件</p></li><li><p>dir 读取某个目录的所有变量文件</p></li><li><p>depth 递归层深，仅在 dir 启用的时候有意义</p></li><li><p>files_matching 正则匹配文件名，仅在 dir 启用的时候有意义</p></li><li><p>ignore_files 忽略某个列表，列表中的元素可以为正则表达式</p></li><li><p>name: 变量 x  将读取的文件内容集中复制给变量 x，例如上例中变量 x 为 {vara: 123, varb: [1,2,3,4]}</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux☞输出个性化开机状态</title>
      <link href="/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/"/>
      <url>/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h4><p>觉得默认的登陆不够给力，无法忽悠机器，用wower的话来说，就是先祖忽悠着你</p><h4 id="效果图在此"><a href="#效果图在此" class="headerlink" title="效果图在此"></a>效果图在此</h4><p><img src="/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81//image-20200515110044304.png" alt="image-20200515110044304"></p><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><blockquote><p>将脚本放置到 /etc/profile.d/status.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: zyh</span></span><br><span class="line"><span class="comment"># 需先安装 toilet 和 cowsay 命令</span></span><br><span class="line"><span class="comment"># yum install epel-release -y</span></span><br><span class="line"><span class="comment"># yum install https://rpmfind.net/linux/openmandriva/4.1/repository/x86_64/unsupported/release/toilet-0.2-3-omv4000.x86_64.rpm cowsay -y</span></span><br><span class="line"></span><br><span class="line">user=<span class="variable">$USER</span></span><br><span class="line">home=<span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## blue to echo</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">blue</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[34m[Info] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## green to echo</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">green</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[Success] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Error</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">red</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m\033[01m[Error] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># warning</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">yellow</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m\033[01m[Warn] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Error to warning with blink</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bred</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m\033[01m\033[05m[Error] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Error to warning with blink</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">byellow</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m\033[01m\033[05m[Warn] <span class="variable">$1</span>\033[0m"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicip=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`</span><br><span class="line">localip=`curl -s http://169.254.169.254/latest/meta-data/<span class="built_in">local</span>-ipv4`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$publicip</span> <span class="variable">$localip</span>"</span> | cowsay -f tux | toilet -f term  --gay</span><br><span class="line"></span><br><span class="line"><span class="comment"># * Check if we're somewhere in /home</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;home&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * Calculate last login</span></span><br><span class="line">lastlog=`lastlog -u <span class="variable">$&#123;user&#125;</span> | grep <span class="variable">$&#123;user&#125;</span> | awk <span class="string">'&#123;for(i=3;i&lt;=NF;++i) printf("%s ",$i)&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># * Print Output</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" ::::::::::::::::::::::::::::::::::-STATUS-::::::::::::::::::::::::::::::::::"</span></span><br><span class="line"><span class="comment">#  * Check RAM Usages</span></span><br><span class="line">free_mem_usages=$(awk <span class="string">'/MemTotal/&#123;total=$2&#125;/MemAvailable/&#123;free=$2&#125;END&#123;print free/1024"/"total/1024" MB"&#125;'</span> /proc/meminfo)</span><br><span class="line">app_mem_usages=$(awk <span class="string">'/MemTotal/&#123;total=$2&#125;/MemFree/&#123;free=$2&#125;/Buffers/&#123;buffers=$2&#125;/^Cached/&#123;cached=$2&#125;END&#123;print (total-free-buffers-cached)/1024"/"total/1024" MB"&#125;'</span>  /proc/meminfo)</span><br><span class="line">all_mem_usages=$(awk <span class="string">'/MemTotal/&#123;total=$2&#125;/MemFree/&#123;free=$2&#125;END&#123;print (total-free)/1024"/"total/1024" MB"&#125;'</span>  /proc/meminfo)</span><br><span class="line">blue <span class="string">" Free Memory : <span class="variable">$&#123;free_mem_usages&#125;</span>"</span></span><br><span class="line">blue <span class="string">" Application Memory Usages : <span class="variable">$&#123;app_mem_usages&#125;</span>"</span></span><br><span class="line">blue <span class="string">" System Memory Usages : <span class="variable">$&#123;all_mem_usages&#125;</span>"</span></span><br><span class="line"><span class="comment"># * Check Disk Usages</span></span><br><span class="line">diskusages=$(df -PH | awk <span class="string">'&#123;printf "%-40s%-15s%-15s%-15s%-15s%-15s\n", $1,$2,$3,$4,$5,$6&#125;'</span>)</span><br><span class="line">blue <span class="string">" Disk Usages :"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;diskusages&#125;</span>"</span> | toilet -f term --metal -w 200</span><br><span class="line"><span class="comment"># * Check Load Average</span></span><br><span class="line">loadaverage=$(top -n 1 -b | grep <span class="string">"load average:"</span> | awk <span class="string">'&#123;print $(NF-2) $(NF-1) $NF&#125;'</span>)</span><br><span class="line">blue <span class="string">" Load Average: <span class="variable">$loadaverage</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题记录</title>
      <link href="/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h4><p>包管理器安装软件出现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insserv:  loop involving service xxx at depth 2</span><br></pre></td></tr></table></figure><h4 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h4><p>删除 xxx 服务，如果 xxx 服务已删除，清理 xxx 服务的启动脚本 /etc/init.d/xxx</p><h4 id="Q-1"><a href="#Q-1" class="headerlink" title="Q:"></a>Q:</h4><p>crontab 如何修改时区</p><h4 id="A-1"><a href="#A-1" class="headerlink" title="A:"></a>A:</h4><p>在crontab文件最上方添加命令，例如芝加哥时区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TZ=<span class="string">'America/Chicago'</span>                                          </span><br><span class="line">CRON_TZ=<span class="string">'America/Chicago'</span>  `</span><br></pre></td></tr></table></figure><h4 id="Q-2"><a href="#Q-2" class="headerlink" title="Q:"></a>Q:</h4><p>su - user -c “command” 命令出错</p><h4 id="A-2"><a href="#A-2" class="headerlink" title="A:"></a>A:</h4><p>需要用户开启登陆权限，即 /etc/passwd 中不能使 /sbin/nologin</p><h4 id="Q-3"><a href="#Q-3" class="headerlink" title="Q:"></a>Q:</h4><p>zabbix 自动发现异常，表面看不出问题</p><h4 id="A-3"><a href="#A-3" class="headerlink" title="A:"></a>A:</h4><p>zabbix-agent 端开启 debug 模式，配置加入参数 DebugLevel=4</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-tags</title>
      <link href="/2020/05/04/ansible%E2%98%9Eplaybook-tags/"/>
      <url>/2020/05/04/ansible%E2%98%9Eplaybook-tags/</url>
      
        <content type="html"><![CDATA[<h4 id="tags的定义"><a href="#tags的定义" class="headerlink" title="tags的定义"></a>tags的定义</h4><blockquote><p>tags 可以让你在执行playbook的时候，有选择地执行某些任务，因此 tags 是 tasks 下的关键词</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play &lt;--tags-args&gt;</span><br></pre></td></tr></table></figure><h4 id="tags的参数"><a href="#tags的参数" class="headerlink" title="tags的参数"></a>tags的参数</h4><blockquote><ul><li>–tags=tag_name  执行具有 tag_name 任务</li><li>–skip-tags=tag_name 忽略具有 tag_name 任务</li><li>–list-tags 输出所有</li></ul></blockquote><blockquote><p>tag_name 内置值 ：</p><ul><li>tagged 有tag的task，表示执行具有标记的任务</li><li>untagged 没有tag的task，表示执行不具有标记的任务</li><li>all 所有task，表示执行所有任务</li></ul></blockquote><h4 id="tags的内置标记"><a href="#tags的内置标记" class="headerlink" title="tags的内置标记"></a>tags的内置标记</h4><blockquote><ul><li>always 总是执行某个 task</li><li>never 永远不执行某个 task</li></ul></blockquote><h4 id="tags-的位置"><a href="#tags-的位置" class="headerlink" title="tags 的位置"></a>tags 的位置</h4><blockquote><p>位于play或者tasks都可以，本身具有继承属性，也就是tasks里的tags会继承play的tags</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">father</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">tag</span> <span class="string">son</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">son,children</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"son is here!"</span> <span class="string">&gt;</span> <span class="string">~/son.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">tag</span> <span class="string">daughter</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">daughter,children</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"daughter is here!"</span> <span class="string">&gt;</span> <span class="string">~/daughter.log</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play --tags=son <span class="comment"># 只会生成 son.log</span></span><br><span class="line">ansible-playbook test.play --tags=father  <span class="comment"># 因继承机制，会生成 son.log 和 daughter.log</span></span><br><span class="line">ansible-playbook test.play --tags=children <span class="comment"># 因都含有，同样会生成 son.log 和 daughter.log</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-错误捕获</title>
      <link href="/2020/05/04/ansible%E2%98%9Eplaybook-%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/"/>
      <url>/2020/05/04/ansible%E2%98%9Eplaybook-%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>类似于 python 中的 try…except…finally，ansible 可以用 block…rescue…always</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">mkdir</span> <span class="string">/file</span></span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">"No operation permission"</span></span><br><span class="line">      <span class="attr">always:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">"Task End!"</span></span><br></pre></td></tr></table></figure><blockquote><p>创建 file 目录失败，则输出”No operation permission”, 最终总是输出“Task End!”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-条件判断</title>
      <link href="/2020/05/04/ansible%E2%98%9Eplaybook-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
      <url>/2020/05/04/ansible%E2%98%9Eplaybook-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><ul><li>when</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>==  !=  &gt;  &lt;  &gt;=  &lt;=</li><li>and or not</li><li>( ) 组合，例如 ( a and b ) or c</li></ul><blockquote><p>ansible 某个 task 报错，会导致任务终止，而ignore_errors: true 可以忽略某个任务的条件不满足</p></blockquote><h4 id="is-语句-或者-is-not-语句"><a href="#is-语句-或者-is-not-语句" class="headerlink" title="is 语句 或者 is not 语句"></a>is 语句 或者 is not 语句</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">is</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">"xxx is ok"</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">var</span> <span class="string">is</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><blockquote><p>判断文件</p><ul><li>xxx 是 exists ，表示若 var 存在，条件为真</li><li>xxx 是 file, 表示若 var 是文件，条件为真</li><li>xxx 是 directory， 表示若 var 是目录，条件为真</li><li>xxx 是 link，表示若 var 是软连接，条件为真</li><li>xxx 是 mount，表示若 var 是挂载点，条件为真</li></ul></blockquote><blockquote><p>判断变量</p><ul><li>若 xxx 是 defined, 表示若 var 已定义，条件为真</li><li>若 xxx 是 undefined， 表示若 var 未定义，条件为真</li><li>若 xxx 是 none， 表示若 var 是空，条件为真</li></ul></blockquote><blockquote><p>判断任务状态</p><ul><li>若 xxx 是 success， 若 var 为某任务返回结果，则任务状态成功，条件为真</li><li>若 xxx 是 failure， 若 var 为某任务返回结果，则任务状态失败，条件为真</li><li>若 xxx 是 change，若 var 为某任务返回结果，则任务状态改变，条件为真</li><li>若 xxx 是 skip， 若 var 为某任务返回结果，则任务被忽略，条件为真</li></ul></blockquote><blockquote><p>判断字符串</p><ul><li><p>若 xxx 是 string，若 var 是字符串，条件为真</p></li><li><p>若 xxx 是 lower，若 var 是纯小写，条件为真</p></li><li><p>若 xxx 是 upper，若 var 是纯大写，条件为真</p></li></ul></blockquote><blockquote><p>判断数字</p><ul><li><p>若 xxx 是 number， 若 var 是数字，条件为真。 var: “123” ,这里 var 是字符串，不是数字</p></li><li><p>若 xxx 是 even，若 var 是偶数，条件为真</p></li><li><p>若 xxx 是 odd， 若 var 是奇数，条件为真</p></li><li><p>若 xxx 是 divisibleby(num), 若 var 可以被 num 整除，条件为真</p></li></ul></blockquote><blockquote><p>判断集合</p><ul><li>若 xxx 是 subset(list)，若 var 是 list 的子集，条件为真</li><li>若 xxx 是 superset(list), 若 var 是 list 的父集，条件为真</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-循环</title>
      <link href="/2020/05/04/ansible%E2%98%9Eplaybook-%E5%BE%AA%E7%8E%AF/"/>
      <url>/2020/05/04/ansible%E2%98%9Eplaybook-%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="常见的循环"><a href="#常见的循环" class="headerlink" title="常见的循环"></a>常见的循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">debug</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[</span> <span class="string">a,b</span> <span class="string">]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[</span> <span class="string">A,B,</span> <span class="string">[</span> <span class="string">D,E,F</span> <span class="string">]]</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>with_list 输出最表层元素，在简例中，会输出 [ a,b ] 和 [ A,B, [ D,E,F ] ]</p></li><li><p>with_item 递归输出所有层元素</p></li><li><p>with_together 合并两个列表，元素按照对应下标结合，如果某一方列表元素缺失，则用null代替</p></li><li><p>with_indexed_items 最表层所有列表合并为一个新列表并循环。item由{ list.index: list.value } 构成。在简例中，新列表是[ a,b,A,B, [ D,E,F ]]</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">msg:</span> <span class="string">"Index:<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>, Value:<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[0, u<span class="string">'a'</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">"msg"</span>: <span class="string">"Index:0, Vaule:a"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[1, u<span class="string">'b'</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">"msg"</span>: <span class="string">"Index:1, Vaule:b"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[2, u<span class="string">'A'</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">"msg"</span>: <span class="string">"Index:2, Vaule:A"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[3, u<span class="string">'B'</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">"msg"</span>: <span class="string">"Index:3, Vaule:B"</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[4, [u<span class="string">'D'</span>, u<span class="string">'E'</span>, u<span class="string">'F'</span>]]) =&gt; &#123;</span><br><span class="line">     <span class="string">"msg"</span>: <span class="string">"Index:4, Vaule:[u'D', u'E', u'F']"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>with_random_choice 随机输出一个最表层列表元素，简例中输出 [a,b] 或者 [ A,B, [ D,E,F ]]</p></li></ul></blockquote><h4 id="dict-字典循环"><a href="#dict-字典循环" class="headerlink" title="dict 字典循环"></a>dict 字典循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">debug</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"Name:<span class="template-variable">&#123;&#123; item.key &#125;&#125;</span>, gender:<span class="template-variable">&#123;&#123; item.value &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_dict:</span></span><br><span class="line">        <span class="attr">Zhangsan:</span> <span class="string">male</span></span><br><span class="line">        <span class="attr">Lisi:</span> <span class="string">female</span></span><br></pre></td></tr></table></figure><blockquote><p>输出所有字典</p></blockquote><h4 id="sequence-序列循环"><a href="#sequence-序列循环" class="headerlink" title="sequence 序列循环"></a>sequence 序列循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">sequence</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_sequence:</span></span><br><span class="line">        <span class="string">start=1</span></span><br><span class="line">        <span class="string">end=5</span></span><br><span class="line">        <span class="string">stride=2</span></span><br><span class="line">        <span class="string">format="I'm</span> <span class="string">%0.4f"</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>with_sequence 获取奇偶数，start和end是起止点，stride 是步长（步长可以为负值），format是格式化</li></ul></blockquote><h4 id="nested-嵌套循环"><a href="#nested-嵌套循环" class="headerlink" title="nested 嵌套循环"></a>nested 嵌套循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">nested</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"mkdir /mnt/<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>/<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_nested:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[</span> <span class="string">a,b</span> <span class="string">]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[</span> <span class="string">A,B,C</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><blockquote><p>两个列表做笛卡尔积, 例如构建环境目录</p></blockquote><h4 id="subelements-子元素循环"><a href="#subelements-子元素循环" class="headerlink" title="subelements 子元素循环"></a>subelements 子元素循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">debug:</span></span><br><span class="line">                    <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item.0.name &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.0.gender &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>"</span></span><br><span class="line">            <span class="attr">with_subelements:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; users &#125;&#125;</span>"</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">content</span></span><br></pre></td></tr></table></figure><blockquote><p>分解 , 选中列表内某一个列表元素 content, 与作为一个临时整体的剩余元素构建笛卡尔积，形成 item</p></blockquote><h4 id="file-文件循环"><a href="#file-文件循环" class="headerlink" title="file 文件循环"></a>file 文件循环</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">with_file:</span></span><br><span class="line">  <span class="string">/mnt/a.ini</span></span><br><span class="line">  <span class="string">/mnt/b.ini</span></span><br></pre></td></tr></table></figure><blockquote><p>始终循环获取ansible主机里文件的内容。（与目标主机无关）</p></blockquote><h4 id="fileglob-寻找通配符匹配的文件"><a href="#fileglob-寻找通配符匹配的文件" class="headerlink" title="fileglob 寻找通配符匹配的文件"></a>fileglob 寻找通配符匹配的文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">with_fileglob:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/home/zyh/test/dirA/*</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/home/zyh/test/dirB/[0-9].ini</span></span><br></pre></td></tr></table></figure><blockquote><p>始终循环获取ansible主机指定目录中匹配的文件名和路径。（与目标主机无关）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-系统相关</title>
      <link href="/2020/04/29/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/04/29/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><blockquote><p>crontab 计划任务</p><p>参数介绍：</p><p>name 计划任务注释，多次操作同名任务，只会修改，而不会新加</p><p>时间参数：</p><ul><li><p>minute hour day month weekday </p></li><li><p>special_time : @reboot @yearly @monthly @weekly @daily @hourly (每xxx执行)</p></li></ul><p>user 添加到指定用户计划任务中</p><p>job 计划任务执行命令</p><p>state 当值为absent时，指删除任务. 只需指定 name.</p><p>disabled 注释任务，若任务信息和之前不一致，会同时修改任务</p><p>backup 先备份再操作, 备份文件位于 /tmp/crontabxxxx</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m cron -a <span class="string">"name='test cron module' user=zyh special_time=hourly job='ls /home/zyh &gt; /home/zyh/cron.log 2&gt;&amp;1'"</span></span><br><span class="line">ansible localhost -m cron -a <span class="string">"name='test cron module' state=absent"</span></span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><blockquote><p>调用远程系统自身的服务管理模块，例如 centos6 的 service ，或者 centos7 的 systemctl</p><p>参数介绍:</p><p>name 服务名</p><p>state 执行动作 started, stopped, restarted, reloaded</p><p>enabled 开机自启动</p></blockquote><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><blockquote><p>用户管理</p><p>常用参数介绍：</p><p>name 用户名</p><p>group 用户组 groups 用户附加组</p><ul><li>append 额外附加用户附加组</li></ul><p>shell 指定默认shell，比如/usr/sbin/nologin</p><p>state 值为 absent 表示删除用户，值为 present 表示用户必须存在</p><ul><li>remove 删除用户时，同时删除用户家目录</li></ul><p>password 用户密码。（需要传递加密密码，不能是明文密码）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> crypt:</span><br><span class="line">passwd=</span><br><span class="line">print(crypt.crypt(passwd))</span><br></pre></td></tr></table></figure><p>generate_ssh_key 相当于远程执行 ssh-keygen 命令（不加任何参数，一路回车）。若已经存在~/.ssh/{id_rsa, id_rsa.pub}, 则不执行</p><ul><li>ssh_key_file 自定义私钥名和私钥存放路径, 公钥也会在自定义路径下生成</li></ul></blockquote><h4 id="group"><a href="#group" class="headerlink" title="group"></a>group</h4><blockquote><p>管理用户组</p><p>参数介绍：</p><p>name 组名</p><p>state 组状态, 值为 absent 指删除(组本身并非用户主要组)</p></blockquote><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><blockquote><p>获取机器信息</p><p>参数介绍：</p><p>gather_subset 获取某个子集（all, min, hardware, network, virtual, ohai, facter）</p><p>filter 获取某个集合的某个key</p><p>fact_path 自定义信息存放目录</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup 默认会搜索目标主机/etc/ansible/facts.d 下的自定义信息,例如 family.ini</span></span><br><span class="line"><span class="section">[family]</span></span><br><span class="line"><span class="attr">father</span>=Zhangsan</span><br><span class="line"><span class="attr">son</span>=Zhangxiaosan</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-handle</title>
      <link href="/2020/04/28/ansible%E2%98%9Eplaybook-handle/"/>
      <url>/2020/04/28/ansible%E2%98%9Eplaybook-handle/</url>
      
        <content type="html"><![CDATA[<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>用一个短路判断来说，就是两者是串联关系，handlers 用来处理任务后续</p><p>tasks &amp;&amp; handlers</p><p>tasks &amp;&amp; handlers - listen （handlers 组）</p><h4 id="handlers-的-playbook-样本"><a href="#handlers-的-playbook-样本" class="headerlink" title="handlers 的 playbook 样本"></a>handlers 的 playbook 样本</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/sbin/nginx</span> <span class="string">-t</span></span><br><span class="line">    <span class="attr">notify:</span></span><br><span class="line">      <span class="string">log</span></span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">meta:</span> <span class="string">flush_handlers</span> </span><br><span class="line">  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"nginx check success"</span> <span class="string">&gt;</span> <span class="string">~/playbook.log</span></span><br></pre></td></tr></table></figure><blockquote><p>多个tasks的时候，tasks后面的 <code>meta: flush_handlers</code> 可以让tasks执行完，立马执行关联的handlers。否则handlers会在所有tasks执行完后，才开始执行</p></blockquote><h4 id="handlers-listen-的-playbook-样本"><a href="#handlers-listen-的-playbook-样本" class="headerlink" title="handlers-listen 的 playbook 样本"></a>handlers-listen 的 playbook 样本</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/sbin/nginx</span> <span class="string">-t</span></span><br><span class="line">    <span class="attr">notify:</span></span><br><span class="line">      <span class="string">log</span> <span class="string">group</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log1</span></span><br><span class="line">    <span class="attr">listen:</span> <span class="string">log</span> <span class="string">group</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"nginx check success 1"</span> <span class="string">&gt;</span> <span class="string">~/playbook.log</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log2</span></span><br><span class="line">    <span class="attr">listen:</span> <span class="string">log</span> <span class="string">group</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"nginx check success 2"</span> <span class="string">&gt;&gt;</span> <span class="string">~/playbook.log</span></span><br></pre></td></tr></table></figure><blockquote><p>handlers 通过 listen 绑定在一起， tasks 关联 liasten 绑定 handlers 组，最终 playbook.log 将会写入两行信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> handle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis☞备份</title>
      <link href="/2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/"/>
      <url>/2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文主要记录 redis 的两种数据磁盘固化方式。<br>涉及到相关参数，简单的命令操作等。</p><h4 id="rdb"><a href="#rdb" class="headerlink" title="rdb"></a>rdb</h4><blockquote><p>通过fork一个子进程来存储某一时刻redis数据(bgsave方式)。rdb持久化是默认方式。</p><p>特点：</p><ul><li><p>小幅度丢失数据(取决于save或者bgsave命令的执行周期)，这里我们不说save，应该不会用到这个</p></li><li><p>恢复速度快</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩rdb文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># rdb 文件名称</span></span><br><span class="line">dbfilename redis-6379.rdb</span><br><span class="line"><span class="comment"># rdb文件保存目录</span></span><br><span class="line">dir /redis/data/</span><br></pre></td></tr></table></figure><ul><li>数据自动写入策略 (满足下列规则，就执行bgsave)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 900s内至少达到一条写命令</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300s内至少达至10条写命令</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60s内至少达到10000条写命令</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><ul><li>数据人工写入策略 (每10分钟计划任务调用一次bgsave)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * root /<span class="built_in">export</span>/redis/bin/redis-cli -h 127.0.0.1 bgsave &gt;&gt; /<span class="built_in">export</span>/redis/bgsave.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><blockquote><p>bgsave 因需要fork子进程，所以需要额外预留空闲的物理内存，在overcommit_memory=1开启的情况下，预留内存大小 &gt; 周期变化数据大小</p></blockquote><h4 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h4><blockquote><p>记录的是redis每一次的写入操作记录</p><p>特点：</p><ul><li>恢复速度慢</li><li>丢失数据小</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启aof机制</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># aof文件名</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment"># 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或no。 everysec 每秒一次</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 默认不重写aof文件,意思就是每次 appendfsync 就压缩整合aof文件，避免aof过大，不推荐开启，影响性能</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="comment"># 保存目录</span></span><br><span class="line">dir /redis/data/</span><br></pre></td></tr></table></figure><ul><li>人工计划任务重写</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * root /<span class="built_in">export</span>/redis/bin/redis-cli -h 127.0.0.1 bgrewriteaof &gt;&gt; /<span class="built_in">export</span>/redis/bgrewriteaof.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><ul><li>aof 因服务器挂掉损坏可以修复</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof -fix file.aof</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>rdb 或者 aof 根据业务二选一即可，没必要都开启，但是不管是哪一种，都可以在人工计划任务之后，复刻一份备份文件到云端对象存储中。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-软件包管理</title>
      <link href="/2020/04/26/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>/2020/04/26/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="apt-repository"><a href="#apt-repository" class="headerlink" title="apt_repository"></a>apt_repository</h4><blockquote><p>ubuntu 下：</p><p>repo 指定库地址，例如 nginx 地址 ppa:nginx/stable</p><p>state 值为 absent 时为删除</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m apt_repository -a <span class="string">"repo=ppa:nginx/stable"</span> -b --ask-become-pass</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"repo"</span>: <span class="string">"ppa:nginx/stable"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"present"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#( 04/24/20@ 3:10PM )( zyh@zyh ):~</span></span><br><span class="line">   cat  /etc/apt/sources.list.d/ppa_nginx_stable_bionic.list</span><br><span class="line">deb http://ppa.launchpad.net/nginx/stable/ubuntu bionic main</span><br></pre></td></tr></table></figure><h4 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h4><blockquote><p>常用参数：</p><p>name 包名</p><p>state 包状态 （absent-删除，latest-最新包,  present-默认安装） latest 相当于升级包</p><p>upgrade 升级 （yes，dist，full，no-默认）</p><p><a href="https://docs.ansible.com/ansible/latest/modules/apt_module.html#apt-module" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/apt_module.html#apt-module</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m apt -a <span class="string">"name=nginx state=present"</span> -b --ask-become-pass</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"cache_update_time"</span>: 1587713114, </span><br><span class="line">    <span class="string">"cache_updated"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">""</span>, </span><br><span class="line">    <span class="string">"stderr_lines"</span>: [], </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">"Reading package lists...\nBuilding dependency tree.......</span></span><br></pre></td></tr></table></figure><h4 id="yum-repository"><a href="#yum-repository" class="headerlink" title="yum_repository"></a>yum_repository</h4><blockquote><p>name 仓库名</p><p>baseurl 仓库地址</p><p>enabled （yes-默认，no)</p><p>gpgcheck (yes, no)</p><p>gpgcakey 指定 gpg ca 公钥</p><p>state (present-默认，absent-删除)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m yum_repository -a <span class="string">"name=epel baseurl=https://download.fedoraproject.org/pub/epel/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><blockquote><p>name 包名</p><p>state (absent-删除，present-安装-默认值，latest-更新)</p><p>disable_gpg_check 关闭gpg检查（用于源gpg检查没有的情况）</p><p>enablerepo 安装包的时候，先临时启用某个源</p><p>disablerepo 安装包的时候，先临时禁用某个源</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-命令调用</title>
      <link href="/2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E5%91%BD%E4%BB%A4%E8%B0%83%E7%94%A8/"/>
      <url>/2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E5%91%BD%E4%BB%A4%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><blockquote><p>远程执行一个命令</p><p>部分参数解析：</p><p>chdir 远程工作目录</p><p>executable 远程执行shell，需要绝对路径</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m shell -a <span class="string">"chdir=/ ls"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><blockquote><p>远程执行一个ansible主机环境的脚本</p><p>部分参数解析：</p><p>chdir 远程工作目录</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls /<span class="built_in">export</span>`;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#-------------</span></span><br><span class="line">ansible -i hosts <span class="built_in">test</span> -m script -a <span class="string">"/home/zyh/test.sh"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.200.10.212 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"rc"</span>: 0, </span><br><span class="line">    <span class="string">"stderr"</span>: <span class="string">"Shared connection to 10.200.10.212 closed.\r\n"</span>, </span><br><span class="line">    <span class="string">"stderr_lines"</span>: [</span><br><span class="line">        <span class="string">"Shared connection to 10.200.10.212 closed."</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">"stdout"</span>: <span class="string">"jdk1.8.0_191\r\njdk8\r\nsen\r\n"</span>, </span><br><span class="line">    <span class="string">"stdout_lines"</span>: [</span><br><span class="line">        <span class="string">"jdk1.8.0_191"</span>, </span><br><span class="line">        <span class="string">"jdk8"</span>, </span><br><span class="line">        <span class="string">"sen"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-文本文件操作</title>
      <link href="/2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><blockquote><p>path 文件对象地址<br>state 文件类型或者动作状态 （touch: 针对文件, directory：针对目录, link：针对软连接, hard：针对硬链接)</p><p>src 软硬链接的源文件</p><p>owner 属主</p><p>group 属组</p><p>mode 数字权限</p><p>recurse 递归操作</p></blockquote><h4 id="blockinfile"><a href="#blockinfile" class="headerlink" title="blockinfile"></a>blockinfile</h4><blockquote><p>在指定位置，插入文本块，并在文本块开头和结尾添加标记. 标记用来确认文本块的位置，一些参数会通过标记位置来修改文本块。</p><p>注释格式:</p><p># BEGIN xxx</p><p># END xxx</p><p>参数简介：</p><p>path 文件对象地址</p><p>block 需要添加的文本块</p><p>marker 自定义标记 xxx 部分，如果存在相同标记，则优先处理相同标记的文本块。</p><p>state 状态为absent时，删除标记包括的文本块</p><p>insertafter 正则或者EOF，插入匹配的指定行之后</p><p>insertbefore 正则或者BOF，插入匹配的指定行之前 </p><p>backup 先备份，再操作，备份文件后缀是时间戳</p><p>create 文件不存在，则创建</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这条命令中，如果marker标记已经存在，则insertafter将无效</span></span><br><span class="line">-m blockinfile -a <span class="string">'path= block=" " marker="#&#123;mark&#125; xxx" insertafter="正则"'</span></span><br></pre></td></tr></table></figure><h4 id="lineinfile"><a href="#lineinfile" class="headerlink" title="lineinfile"></a>lineinfile</h4><blockquote><p>根据指定的内容，进行替换或删除</p><p>参数简介：</p><p>path 文件对象地址。</p><p>line 指定行内容（在没有正则的情况下，需要全匹配）。</p><p>regexp 通过正则匹配行，并将此行替换成 line 指定的内容，regexp有额外扩展参数，例如 backref。</p><ul><li><p>line  若line匹配到某行，则不修改，若无匹配，则添加line至末尾。</p></li><li><p>regexp + line  若有regexp匹配到某行，替换匹配行为line；如果没有匹配，则将line追加到行尾。此时，regexp不支持分组。</p></li><li><p>regexp + backrefs （true）+ line  若有regexp匹配到某行，替换匹配行为line；如果没有匹配，则保持源文件不变；此时，regexp支持分组。</p></li></ul><p>state 状态为absent时，删除匹配行</p><p>insertafter 正则或者EOF，插入匹配的指定行之后</p><p>insertbefore 正则或者BOF，插入匹配的指定行之前 </p><p>backup 先备份，再操作</p><p>create 文件不存在，则创建</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-m lineinfile -a <span class="string">'path= line=" " insertafter="正则"'</span></span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><blockquote><p>替换文件对象中符合匹配的字符串</p><p>path 文件对象地址</p><p>regexp 正则匹配</p><p>replace 替换后的字符串</p><p>backup 先备份，再操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-aws</title>
      <link href="/2020/04/14/ansible%E2%98%9Eplaybook-aws/"/>
      <url>/2020/04/14/ansible%E2%98%9Eplaybook-aws/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/ansible/ansible/blob/stable-2.9/contrib/inventory/" target="_blank" rel="noopener">https://github.com/ansible/ansible/blob/stable-2.9/contrib/inventory/</a></p><p><a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html</a></p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html#inventory-script-example-aws-ec2" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html#inventory-script-example-aws-ec2</a> （深坑，脚本404，找到了脚本，各种错误，请扔一边）</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通过 ansible 获取大区下 ec2 资源信息</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export AWS_ACCESS_KEY_ID='AK123'</span><br><span class="line">export AWS_SECRET_ACCESS_KEY='abc123'</span><br><span class="line">export EC2_INI_PATH=ec2.ini</span><br></pre></td></tr></table></figure><h3 id="库存-inventory"><a href="#库存-inventory" class="headerlink" title="库存(inventory)"></a>库存(inventory)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line">localhost</span><br></pre></td></tr></table></figure><h3 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">ec2</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">gather_facts:</span> <span class="literal">no</span>   <span class="comment"># 我们要这信息干什么？我们是有目标的</span></span><br><span class="line">    <span class="attr">connection:</span> <span class="string">local</span> <span class="comment"># 木有定义资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tasks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">ec2</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">ec2_instance_info:</span></span><br><span class="line">          <span class="attr">region:</span> <span class="string">cn-north-1</span></span><br><span class="line">        <span class="attr">register:</span> <span class="string">data_output</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">ec2</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">debug:</span></span><br><span class="line">          <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; data_output|json_query('instances[*].network_interfaces[*].private_ip_address') &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i hosts ec2.yml</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TASK [show ec2 info] ******************************************************************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    "msg": [</span><br><span class="line">        [</span><br><span class="line">            "10.100.10.250"</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            "10.100.10.252"</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            "10.100.10.210"</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            "10.100.10.251"</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 包管理工具 scoop</title>
      <link href="/2020/04/13/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop/"/>
      <url>/2020/04/13/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop/</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line">iwr <span class="literal">-useb</span> get.scoop.sh | iex</span><br><span class="line">scoop install aria2</span><br><span class="line">scoop config aria2<span class="literal">-max</span><span class="literal">-connection</span><span class="literal">-per</span><span class="literal">-server</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="operator">-split</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="literal">-min</span><span class="operator">-split</span><span class="literal">-size</span> <span class="number">1</span>M</span><br><span class="line">scoop bucket add extras</span><br><span class="line">scoop install Terminus</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windws </tag>
            
            <tag> scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins☞安装和基本配置</title>
      <link href="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>jenkins </p><blockquote><p><a href="https://github.com/jenkinsci/docker/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jenkinsci/docker/blob/master/README.md</a></p></blockquote></li></ul>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create jenkins_home</span><br><span class="line">docker run --name jenkins --hostname jenkins.itrmp.com --add-host jenkins.itrmp.com:10.200.10.4 --restart always -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 --dns 10.200.133.88 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><ul><li><p>用户和角色管理</p><ol><li><p>安装插件 Role-based Authorization Strategy</p></li><li><p>启用插件 Configure Global Security 中启用 Role-Based Strategy 策略</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE//image-20200515180703925.png" alt="image-20200515180703925"></p></li><li><p>配置全局角色和项目角色 Manage and Assign Roles - Manage Roles</p><p>全局角色<strong>Global roles</strong> 设置两个： admin 和 read</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE//image-20200515181449965.png" alt="image-20200515181449965"></p><p>项目角色<strong>Project roles</strong>：每一个项目设置一个</p><p>Pattern: <code>.*\.&lt;项目名&gt;</code></p><p>权限: 看图</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE//image-20200515181359533.png" alt="image-20200515181359533"></p></li><li><p>创建项目用户</p></li><li><p>分配角色 Manage and Assign Roles - Assign Roles </p><p>给管理员分配 admin，给项目用户分配 read 和 cp (cp是我设置的项目角色)</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE//image-20200515181740598.png" alt="image-20200515181740598"></p></li></ol></li><li><p>安装配置文件插件 Config File Provider</p></li><li><p>自动安装 git ，jdk，maven （这种方式只有在进行了一次构建后，才会安装）</p></li><li><p>maven 私服配置文件</p><ol><li><p>通过 Config File Provider 添加一个项目maven配置</p></li><li><pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span>  <span class="tag">&lt;<span class="name">servers</span>&gt;</span>    <span class="tag">&lt;<span class="name">server</span>&gt;</span>     <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">Repository</span> <span class="attr">Policy</span>名&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span>     <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span>     <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span>    <span class="tag">&lt;/<span class="name">server</span>&gt;</span>    <span class="tag">&lt;<span class="name">server</span>&gt;</span>     <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">Repository</span> <span class="attr">Policy</span>名&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span>      <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span>      <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span>    <span class="tag">&lt;/<span class="name">server</span>&gt;</span>  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span>  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span>      <span class="tag">&lt;<span class="name">profile</span>&gt;</span>        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt; 仓库名 &gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span>        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>          <span class="tag">&lt;<span class="name">repository</span>&gt;</span>            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;<span class="name">maven</span> 仓库组或仓库<span class="attr">ID</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span>            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">maven</span> 私服具体仓库组或仓库地址&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span>            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span>            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>              <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>          <span class="tag">&lt;/<span class="name">repository</span>&gt;</span>        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span>  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span>  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span>     <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>项目名<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span>  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></code></pre></li><li><p>然后构建项目的时候，构建环境-Provide Configuration files-Files，并且Build-高级-Settings file-Provided settings.xml</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞php包管理方式</title>
      <link href="/2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>介绍如何通过yum或者apt-get安装php和php-fpm<br>适合php7.2</p><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><blockquote><p>安装源 <a href="https://webtatic.com/" target="_blank" rel="noopener">https://webtatic.com/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">yum install gcc-c++ geoip-devel -y</span><br><span class="line">yum install php72w-cli php72w-devel mod_php72w php72w-fpm php72w-opcache php72w-gd php72w-bcmath php72w-xml php72w-lzo -y</span><br><span class="line"></span><br><span class="line">mkdir /<span class="built_in">export</span>/logs/php -p</span><br><span class="line"><span class="built_in">cd</span> /etc/php-fpm.d/ &amp;&amp; mv www.conf www.conf.bak</span><br><span class="line">webName=www</span><br><span class="line">cat &gt; www.conf &lt;&lt; EOF</span><br><span class="line">[<span class="variable">$&#123;webName&#125;</span>]</span><br><span class="line">user = webapps</span><br><span class="line">group = webapps</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm = static</span><br><span class="line">pm.max_children = 20</span><br><span class="line">pm.max_requests = 1024</span><br><span class="line">pm.status_path = /php-fpm_status</span><br><span class="line">request_slowlog_timeout = 2s</span><br><span class="line">slowlog = /<span class="built_in">export</span>/logs/php/php-slow.log</span><br><span class="line">php_admin_value[error_log] = /<span class="built_in">export</span>/logs/php/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br><span class="line">php_value[session.save_handler] = files</span><br><span class="line">php_value[session.save_path]    = /var/lib/php/session</span><br><span class="line">php_value[soap.wsdl_cache_dir]  = /var/lib/php/wsdlcache</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 安装源中没有的模块</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">phpModule=&lt;模块名&gt;</span><br><span class="line">wget https://pecl.php.net/get/<span class="variable">$&#123;phpModule&#125;</span> &amp;&amp; mkdir redis-src &amp;&amp; tar xf redis --strip-components 1 -C <span class="variable">$&#123;phpModule&#125;</span>-src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;phpModule&#125;</span>-src &amp;&amp; phpize &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cat &gt; /etc/php.d/<span class="variable">$&#123;phpModule&#125;</span>.ini &lt;&lt; EOF</span><br><span class="line">; Enable zip extension module</span><br><span class="line">extension=<span class="variable">$&#123;phpModule&#125;</span>.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line">apt-get install php7.2 php7.2-dev php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml  php7.2-intl php7.2-yac php7.2-yaf php7.2-redis php7.2-lzo php7.2-geoip php7.2-pecl php7.2-pear php7.2-dev php7.2-gd php7.2-zip php7.2-xml php7.2-bcmath</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞基础信息</title>
      <link href="/2020/03/15/ansible%E2%98%9E%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/03/15/ansible%E2%98%9E%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br><span class="line">pip3 install ansible --user -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p>pip 安装方式，不会生成默认配置<br><a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg" target="_blank" rel="noopener">https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg</a></p></blockquote><h3 id="关闭-known-hosts-检查"><a href="#关闭-known-hosts-检查" class="headerlink" title="关闭 known_hosts 检查"></a>关闭 known_hosts 检查</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/ansible/ansible.cfg or ~/.ansible.cfg</span></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="库存和变量"><a href="#库存和变量" class="headerlink" title="库存和变量"></a>库存和变量</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/ansible/hosts 默认位置，但可自定义，并通过 -i 来调用</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># 单主机</span></span><br><span class="line">mail.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># http_port 主机变量</span></span><br><span class="line"><span class="section">[webservers]</span></span><br><span class="line">www[01:50].example.comhttp_port=80</span><br><span class="line"></span><br><span class="line"><span class="section">[dbservers]</span></span><br><span class="line">db-[a:f].example.comansible_connection=ssh        ansible_ssh_user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组变量 ==&gt; 组名:vers</span></span><br><span class="line"><span class="section">[dbservers:vars]</span></span><br><span class="line"><span class="attr">mysql_port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套组 ==&gt; 父组:children</span></span><br><span class="line"><span class="section">[webproject:children]</span></span><br><span class="line">webservers</span><br><span class="line">dbservers</span><br></pre></td></tr></table></figure><blockquote><p>中括号表示分组，可以用组名代替组资源 ;</p></blockquote><h3 id="结构化变量"><a href="#结构化变量" class="headerlink" title="结构化变量"></a>结构化变量</h3><blockquote><p>采用 yaml 配置，格式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="string">变量:值</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/ansible/group_vars/&lt;组名&gt; # &lt;组名&gt;文件或路径下的文件，均会被认为是&lt;组名&gt;变量</span><br><span class="line">/etc/ansible/host_vars/&lt;主机名&gt; # &lt;主机名&gt;文件或路径下的文件，均会被认为是&lt;组名&gt;变量</span><br></pre></td></tr></table></figure><h4 id="常用的变量"><a href="#常用的变量" class="headerlink" title="常用的变量"></a>常用的变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible_ssh_host</span><br><span class="line">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_port</span><br><span class="line">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_user</span><br><span class="line">      默认的 ssh 用户名</span><br><span class="line"></span><br><span class="line">ansible_ssh_pass</span><br><span class="line">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class="line"></span><br><span class="line">ansible_sudo_pass</span><br><span class="line">      sudo 密码(这种方式并不安全,我们强烈建议使用 -b --ask-become-pass)</span><br><span class="line"></span><br><span class="line">ansible_sudo_exe (new in version 1.8)</span><br><span class="line">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class="line"></span><br><span class="line">ansible_connection</span><br><span class="line">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 'smart','smart' 方式会根据是否支持 ControlPersist, 来判断'ssh' 方式是否可行.</span><br><span class="line"></span><br><span class="line">ansible_ssh_private_key_file</span><br><span class="line">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class="line"></span><br><span class="line">ansible_shell_type</span><br><span class="line">      目标系统的shell类型.默认情况下,命令的执行使用 'sh' 语法,可设置为 'csh' 或 'fish'.</span><br><span class="line"></span><br><span class="line">ansible_python_interpreter</span><br><span class="line">      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是"/usr/bin/python",比如  \*BSD, 或者 /usr/bin/python</span><br><span class="line">      不是 2.X 版本的 Python.我们不使用 "/usr/bin/env" 机制,因为这要求远程用户的路径设置正确,且要求 "python" 可执行程序名不可为 python以外的名字(实际有可能名为python26).</span><br><span class="line"></span><br><span class="line">      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux☞时间</title>
      <link href="/2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/"/>
      <url>/2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文中描述的并不能涵盖所有时间设置命令，只是记录了经常用到的一些。</p><h4 id="修改会话时区"><a href="#修改会话时区" class="headerlink" title="修改会话时区"></a>修改会话时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"TZ='UTC+0'; export TZ"</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>需要注意以下几点：</p><ol><li>UTC8 表示西8区</li><li>tzselect 可以帮你查看时区有哪些</li><li>UTC 方式，无法识别冬令时和夏令时，所以建议用地区名称，例如 asia/shanghai</li></ol></blockquote><h4 id="修改crontab时区"><a href="#修改crontab时区" class="headerlink" title="修改crontab时区"></a>修改crontab时区</h4><p>在 crontab 用户配置最上面加入，例如添加芝加哥时区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TZ=<span class="string">'America/Chicago'</span></span><br><span class="line">CRON_TZ=<span class="string">'America/Chicago'</span></span><br></pre></td></tr></table></figure><blockquote><p>关于时区设置方面，不建议修改配置，因为不够灵活</p></blockquote><h4 id="修正时间-写入硬件时钟"><a href="#修正时间-写入硬件时钟" class="headerlink" title="修正时间, 写入硬件时钟"></a>修正时间, 写入硬件时钟</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">ntpdate cn.ntp.org.cn</span><br><span class="line">hwclock -w</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'0 12 * * * /usr/sbin/ntpdate cn.ntp.org.cn &gt; /dev/null 2&gt;&amp;1'</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 时区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志☞ELK简单部署-容器方式</title>
      <link href="/2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>各组件总下载页: <a href="https://www.elastic.co/cn/downloads/" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/</a></li><li>容器下载页: <a href="https://www.docker.elastic.co" target="_blank" rel="noopener">https://www.docker.elastic.co</a></li></ul><ol><li>Elasticsearch 搜索分析 <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></li><li>Logstash 转换输出 <a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a></li><li>Filebeat 收集 <a href="https://www.elastic.co/cn/downloads/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/beats/filebeat</a></li><li>Kibana 展示 <a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></li></ol><h4 id="数据过程"><a href="#数据过程" class="headerlink" title="数据过程:"></a>数据过程:</h4><p>Filebeat ☞ Logstash ☞ Elasticsearch (master node) + data node ☞ Kibana </p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker</span></span><br><span class="line">yum install docker -y 或者 yum install docker-ce -y</span><br><span class="line">yum install python3-pip -y</span><br><span class="line">pip3 install docker-compose 或者 pip install docker-compose</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 docker 默认数据目录</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"data-root"</span>: <span class="string">"/export/docker-data-root"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch 具体安装命令和版本请以下载页中对应的docker安装方式页里命令为基准</span></span><br><span class="line"><span class="string">sysctl</span> <span class="string">-a</span> <span class="string">|</span> <span class="string">grep</span>  <span class="string">vm.max_map_count</span>  <span class="comment"># 查看是否过小, 如果过小执行下一条</span></span><br><span class="line"><span class="string">echo</span> <span class="string">'vm.max_map_count=262144'</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/sysctl.conf</span> <span class="string">&amp;&amp;</span> <span class="string">sysctl</span> <span class="string">-p</span></span><br><span class="line"></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/es;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/docker-compose.yml;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/es/es01.yml;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/es/es02.yml;</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/kibana;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/kibana/kibana.yml;</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/logstash</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/logstash/logstash.yml;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># es01 master 和 data</span></span><br><span class="line"><span class="comment"># es02 data</span></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/es/es01.yml &lt;&lt; EOF</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">http.port: 9200</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span> </span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/es/es02.yml &lt;&lt; EOF</span><br><span class="line">node.master: <span class="literal">false</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">http.port: 9200</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span> </span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/kibana/kibana.yml &lt;&lt; EOF</span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br><span class="line">i18n.locale: zh-CN</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/logstash/logstash.yml &lt;&lt; EOF</span><br><span class="line">node.name: logstash</span><br><span class="line">http.host: 0.0.0.0</span><br><span class="line">http.port: 9600</span><br><span class="line">log.level: info</span><br><span class="line">config.reload.automatic: <span class="literal">true</span></span><br><span class="line">config.reload.interval: 10s</span><br><span class="line">config.support_escapes: <span class="literal">false</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="编写-logstash-管道文件"><a href="#编写-logstash-管道文件" class="headerlink" title="编写 logstash 管道文件"></a>编写 logstash 管道文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例 /export/docker-compose-data/logstash/pipeline/es-curator.conf</span></span><br><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">file</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">path</span> <span class="string">=&gt;</span> <span class="string">"/mnt/info.log"</span></span><br><span class="line"><span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"es-curator"</span></span><br><span class="line"><span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">"beginning"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">if</span> <span class="string">[type]</span> <span class="string">==</span> <span class="string">"es-curator"</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">hosts=&gt;</span> <span class="string">["es01:9200"]</span></span><br><span class="line"><span class="string">index=&gt;</span> <span class="string">"es-curator-<span class="template-variable">%&#123;+YYYY-MM-dd&#125;</span>"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="启动服务docker-compose配置文件"><a href="#启动服务docker-compose配置文件" class="headerlink" title="启动服务docker-compose配置文件"></a>启动服务docker-compose配置文件</h4><blockquote><p> <a href="https://docs.docker.com/compose/compose-file/compose-file-v2/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/compose-file-v2/</a></p><p>本配置文件参考 2.3 版本, 请勿使用 3.x 版本, 因为它的资源层 deploy, docker-compose命令不支持</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/export/docker-compose-data/docker-compose.yml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-sen</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms1536m -Xmx1536m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata01:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/es/es01.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:9200"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">es02:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es02</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-sen</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms1536m-Xmx1536m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata02:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/es/es02.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:9200"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVER_NAME:</span> <span class="string">kibana.sen-sdk.com</span></span><br><span class="line">      <span class="attr">SERVER_HOST:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://es01:9200</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:5601"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/logstash/pipeline/:/usr/share/logstash/pipeline/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logstash:/usr/share/logstash/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5044:5044"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"9600:9600"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost:9600"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">esdata02:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">esnet:</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="启动-docker-compose"><a href="#启动-docker-compose" class="headerlink" title="启动 docker-compose"></a>启动 docker-compose</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="built_in">export</span>/docker-compose-data/</span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># docker-compose up -d --no-recreate</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx ☞ 基本认证</title>
      <link href="/2019/09/04/nginx%E2%98%9E%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/"/>
      <url>/2019/09/04/nginx%E2%98%9E%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 htpasswd 工具</span></span><br><span class="line">yum install httpd-tools -y</span><br><span class="line"><span class="comment"># 生成密码文件</span></span><br><span class="line">htpasswd -c /usr/<span class="built_in">local</span>/nginx/conf/.passwd <span class="comment">#创建文件</span></span><br><span class="line">htpasswd -b /usr/<span class="built_in">local</span>/nginx/conf/.passwd usera passworda <span class="comment"># 追加用户</span></span><br><span class="line">htpasswd -D /usr/<span class="built_in">local</span>/nginx/conf/.passwd usera <span class="comment"># 删除用户</span></span><br><span class="line"><span class="comment"># nginx配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    index index.html;</span><br><span class="line">    location /auth &#123;</span><br><span class="line">        auth_basic <span class="string">"nginx auth"</span>;</span><br><span class="line">        auth_basic_user_file /usr/<span class="built_in">local</span>/nginx/conf/.passwd;</span><br><span class="line">        <span class="built_in">alias</span> /<span class="built_in">export</span>/webapps/xxx.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux ☞ 软 raid 创建</title>
      <link href="/2019/07/01/linux%E2%98%9E%E8%BD%AFraid%E5%88%9B%E5%BB%BA/"/>
      <url>/2019/07/01/linux%E2%98%9E%E8%BD%AFraid%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-☞-软-raid-创建"><a href="#linux-☞-软-raid-创建" class="headerlink" title="linux ☞ 软 raid 创建"></a>linux ☞ 软 raid 创建</h2><ul><li>创建</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘分区</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line">fdisk /dev/sdb</span><br><span class="line"><span class="comment"># 构建raid0</span></span><br><span class="line"><span class="comment"># --level raid级别</span></span><br><span class="line"><span class="comment"># --raid-devices 盘数</span></span><br><span class="line"><span class="comment"># --chunk 条带深度，决定了数据分割的标准单位大小，数值越小，则数据越分散，性能越低(如若没有特殊优化需求，建议选默认值即可)</span></span><br><span class="line">mdadm -Cv /dev/md0 --level=0 --raid-devices=2 /dev/sda1 /dev/sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已上配置中, 也可以不分区, 直接进行 raid 构建</span></span><br><span class="line">mdadm --create --verbose /dev/md0 --level=0 --name=MY_RAID --raid-devices=number_of_volumes device_name1 device_name2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察和等待阵列初始化</span></span><br><span class="line">cat /proc/mdstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察初始化后的阵列信息</span></span><br><span class="line">mdadm --detail /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化 （加卷标）</span></span><br><span class="line">mke2fs -t ext4 -L raid0 /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入配置</span></span><br><span class="line"><span class="comment"># 不同的操作系统 mdadm.conf 位置不同, 具体以 man mdadm.conf 为准</span></span><br><span class="line">mdadm --detail --scan | tee -a /etc/mdadm.conf</span><br><span class="line"><span class="comment"># echo "DEVICE /dev/sda1 /dev/sdb1 " &gt;&gt; /etc/mdadm/mdadm.conf</span></span><br><span class="line"><span class="comment"># mdadm -Ds &gt;&gt; /etc/mdadm/mdadm.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的 Ramdisk Image 以为新的 RAID 配置正确地预加载块储存设备模块</span></span><br><span class="line">sudo dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入挂载 （用卷标挂载，有些系统重启后，设备名会从md0变成md127）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"LABEL=raid0 /data ext4 defaults,nofail 0 2"</span> &gt;&gt; /etc/fstab</span><br><span class="line">mkdir /data</span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 确认挂载成功</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除/etc/fstab的挂载信息</span></span><br><span class="line">$ mdadm -S /dev/md0</span><br><span class="line">$ mdadm --misc --zero-superblock /dev/sda</span><br><span class="line">$ mdadm --misc --zero-superblock /dev/sdb</span><br><span class="line"><span class="comment"># 删除/etc/mdadm/mdadm.conf文件中添加的DEVICE行和ARRAY行</span></span><br></pre></td></tr></table></figure><ul><li>额外信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2T以上大小分区</span></span><br><span class="line">parted /dev/sda</span><br><span class="line"> mklabel gpt</span><br><span class="line"> mkpart primary1 0% 100%</span><br><span class="line">partprobe</span><br></pre></td></tr></table></figure><ul><li>关于云</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当使用云端磁盘构建raid的时候,且又想进行 raid 备份,则务必先停止io操作,停止io操作的方法最好是 umount 或者停机. 否则会导致 raid 数据完整性出现问题.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> raid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx ☞ 泛域名_变量截取</title>
      <link href="/2018/09/06/nginx%E2%98%9E%E6%B3%9B%E5%9F%9F%E5%90%8D_%E5%8F%98%E9%87%8F%E6%88%AA%E5%8F%96/"/>
      <url>/2018/09/06/nginx%E2%98%9E%E6%B3%9B%E5%9F%9F%E5%90%8D_%E5%8F%98%E9%87%8F%E6%88%AA%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       [::]:80;</span><br><span class="line">    server_name ~^(?&lt;userName&gt;.*)\.apple\.com\.cn$;</span><br><span class="line">    root /<span class="built_in">export</span>/webapps/apple.com/<span class="variable">$userName</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启浏览器静态文件缓存</span></span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ &#123;</span><br><span class="line">        expires      3h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># https://&lt;username&gt;.apple.com/api -&gt; /export/webapps/apple.com/api.php #####</span></span><br><span class="line">    location ~* ^/(api|event_api)$ &#123;</span><br><span class="line">        root /<span class="built_in">export</span>/webapps/apple.com;</span><br><span class="line">        rewrite ^/(.*)$ /<span class="variable">$1</span>.php <span class="built_in">break</span>;</span><br><span class="line">        fastcgi_pass     127.0.0.1:9001;</span><br><span class="line">        fastcgi_index    index.php;</span><br><span class="line">        include      fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout    600s;</span><br><span class="line">        fastcgi_send_timeout       600s;</span><br><span class="line">        fastcgi_read_timeout       600s;</span><br><span class="line">        fastcgi_buffers 8 256k;</span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># https://&lt;username&gt;.apple.com/&lt;uri&gt; -&gt; /export/webapps/apple.com/&lt;username&gt;/&lt;uri&gt;.php</span></span><br><span class="line">    location ~* ^/[0-9a-zA-Z]+$ &#123;</span><br><span class="line">        rewrite ^/(.*)$ /<span class="variable">$1</span>.php <span class="built_in">break</span>;</span><br><span class="line">        fastcgi_pass     127.0.0.1:9001;</span><br><span class="line">        fastcgi_index    index.php;</span><br><span class="line">        include      fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout    600s;</span><br><span class="line">        fastcgi_send_timeout       600s;</span><br><span class="line">        fastcgi_read_timeout       600s;</span><br><span class="line">        fastcgi_buffers 8 256k;</span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>location 优先级从上往下依次递减：<br>location =      仅匹配字符串自身<br>location ^~    匹配某个字符串开头的uri<br>location ~      正则匹配，区分大小写<br>location ~*    正则匹配，不区分大小写<br>location /      表示匹配“域名/之后的uri”，再比如localtion /images，表示匹配“域名/images之后的uri</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞php编译方式</title>
      <link href="/2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>用于编译安装php7.1</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>根目录：/usr/local/php<br>日志目录：/usr/local/php/var/log -&gt; /export/logs/php</p><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 脚本, 适用于 php 7.1</span></span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$basedir</span></span><br><span class="line">runuser=`whoami`</span><br><span class="line">[[ <span class="variable">$runuser</span> == <span class="string">'root'</span> ]] || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ERROR:执行用户不是<span class="variable">$runuser</span>"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#初始化服务器环境</span></span><br><span class="line">[[ -d /<span class="built_in">export</span>/logs/php ]] || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"/export/logs/php目录不存在"</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line">yum install libmcrypt-devel ncurses-devel recode-devel aspell-devel curl-devel readline-devel openldap-devel enchant-devel pcre-devel net-snmp-devel libicu-devel libtool-ltdl-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel freetype-devel gcc-c++ mysql-devel</span><br><span class="line">cp -p /usr/lib64/libldap* /usr/lib</span><br><span class="line">ln -s /usr/lib64/mysql /usr/lib/mysql</span><br><span class="line">wget http://sg2.php.net/distributions/php-7.1.25.tar.gz -O php.tar.gz</span><br><span class="line">rm -rf php &amp;&amp; mkdir php</span><br><span class="line">tar xf php.tar.gz --strip-components 1 -C php</span><br><span class="line"><span class="built_in">cd</span> php &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --with-config-file-scan-dir=/usr/<span class="built_in">local</span>/php/etc/php.d --with-curl --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-openssl --<span class="built_in">enable</span>-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-gd --with-libxml-dir --with-zlib --with-mcrypt --with-bz2 --<span class="built_in">enable</span>-sysvshm --<span class="built_in">enable</span>-sysvsem --<span class="built_in">enable</span>-soap --with-recode --with-snmp --with-readline --<span class="built_in">enable</span>-intl --<span class="built_in">enable</span>-dba --<span class="built_in">enable</span>-bcmath --with-enchant --with-pspell --<span class="built_in">enable</span>-xml --<span class="built_in">enable</span>-sockets --<span class="built_in">enable</span>-exif --<span class="built_in">enable</span>-inline-optimization --<span class="built_in">enable</span>-fpm || <span class="built_in">exit</span></span><br><span class="line">make &amp;&amp; make install || <span class="built_in">exit</span></span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm</span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line">chkconfig php-fpm off</span><br><span class="line">chmod u+x /etc/rc.d/init.d/php-fpm</span><br><span class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/var &amp;&amp; rm -rf <span class="built_in">log</span></span><br><span class="line">ln -s /<span class="built_in">export</span>/logs/php <span class="built_in">log</span></span><br><span class="line">cat&gt;&gt;/usr/<span class="built_in">local</span>/php/etc/php.ini&lt;&lt;EOF</span><br><span class="line">; 关闭php无用日志信息</span><br><span class="line">error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR</span><br><span class="line">; 开启php opcache 缓存功能</span><br><span class="line">[opcache]</span><br><span class="line">zend_extension=opcache.so</span><br><span class="line">; 启动操作码缓存</span><br><span class="line">opcache.enable=1</span><br><span class="line">; 针对支持CLI版本PHP启动操作码缓存 一般被用来测试和调试</span><br><span class="line">opcache.enable_cli=0</span><br><span class="line">; 共享内存大小，单位为MB</span><br><span class="line">opcache.memory_consumption=128</span><br><span class="line">; 存储临时字符串缓存大小，单位为MB，PHP5.3.0以前会忽略此项配置</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line">; 缓存文件数最大限制，命中率不到100%，可以试着提高这个值</span><br><span class="line">opcache.max_accelerated_files=4000</span><br><span class="line">; 一定时间内检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 单位为秒</span><br><span class="line">opcache.revalidate_freq=60</span><br><span class="line">; 开启快速停止续发事件，依赖于Zend引擎的内存管理模块，一次释放全部请求变量的内存，而不是依次释放内存块</span><br><span class="line">opcache.fast_shutdown=1</span><br><span class="line">;启用检查 PHP 脚本存在性和可读性的功能，无论文件是否已经被缓存，都会检查操作码缓存,可以提升性能。 但是如果禁用了 opcache.validate_timestamps选项， 可能存在返回过时数据的风险。</span><br><span class="line">opcache.enable_file_override=1</span><br><span class="line">EOF</span><br><span class="line">cat&gt;&gt;/usr/<span class="built_in">local</span>/php/etc/php-fpm.conf&lt;&lt;EOF</span><br><span class="line">[global]</span><br><span class="line">log_level =error</span><br><span class="line">daemonize = yes</span><br><span class="line">events.mechanism = epoll</span><br><span class="line">rlimit_files = 10240</span><br><span class="line">emergency_restart_threshold = 60</span><br><span class="line">emergency_restart_interval = 60s</span><br><span class="line"></span><br><span class="line">[fcgi]</span><br><span class="line">user = webapps</span><br><span class="line">group = webapps</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm = static</span><br><span class="line">pm.max_children = 100</span><br><span class="line">pm.max_requests = 1024</span><br><span class="line">request_slowlog_timeout = 1s</span><br><span class="line">slowlog = /usr/<span class="built_in">local</span>/php/var/<span class="built_in">log</span>/php-slow.log</span><br><span class="line">pm.status_path = /php-fpm_status</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-fpm ☞ 静态配置</title>
      <link href="/2018/05/11/php-fpm%E2%98%9E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/11/php-fpm%E2%98%9E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>QPS 800-1000</p><p>2*4 机器</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[www01]</span></span><br><span class="line"><span class="attr">user</span> = webapps</span><br><span class="line"><span class="attr">group</span> = webapps</span><br><span class="line"><span class="attr">listen</span> = /usr/local/php/var/log/php-fpm-www01.sock</span><br><span class="line"><span class="attr">listen.owner</span> = webapps</span><br><span class="line"><span class="attr">listen.group</span> = webapps</span><br><span class="line"><span class="attr">listen.backlog</span> = <span class="number">10240</span></span><br><span class="line"><span class="attr">listen.mode</span> = <span class="number">0666</span></span><br><span class="line"><span class="attr">listen.allowed_clients</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">pm</span> = static</span><br><span class="line"><span class="attr">pm.max_children</span> = <span class="number">300</span></span><br><span class="line"><span class="attr">pm.max_requests</span> = <span class="number">1024</span></span><br><span class="line"><span class="attr">request_slowlog_timeout</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">request_terminate_timeout</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slowlog</span> = /usr/local/php/var/log/php-slow.log</span><br><span class="line"><span class="attr">pm.status_path</span> = /php-fpm_status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞openvpn-docker方式</title>
      <link href="/2018/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eopenvpn-docker%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eopenvpn-docker%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>openvpn 一般用于小公司远程连接公司办公网络环境，此脚本需要一个linux系统的主机。<br>至于土豪公司，可以无视。<br>文档包含安装脚本，创建用户脚本，删除用户脚本。使用的时候，安装脚本和创建用户脚本，需要自行修改一些变量。</p><blockquote><p>需要注意的是，发现移动网络连接其它运营商网络的时候，不稳定。<br>比如我这边，移动网络连接电信网络（openvpn所在网络），就容易丢包。</p></blockquote><h4 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br><span class="line">docker pull kylemanna&#x2F;openvpn</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">IP&#x3D;&quot;机器外网ip或者nat后的内网ip&quot;  # 自行修改</span><br><span class="line">mkdir $&#123;OVPN_DATA&#125;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_genconfig -u tcp:&#x2F;&#x2F;$&#123;IP&#125;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn ovpn_initpki</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn easyrsa build-client-full CLIENTNAME nopass</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_getclient CLIENTNAME &gt; $&#123;OVPN_DATA&#125;&#x2F;CLIENTNAME.ovpn</span><br><span class="line">docker run --name openvpn -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn -d -p 1194:1194 --privileged kylemanna&#x2F;openvpn</span><br></pre></td></tr></table></figure><h4 id="创建用户脚本"><a href="#创建用户脚本" class="headerlink" title="创建用户脚本"></a>创建用户脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 如果是nat后的内网ip，则需要修改配置文件里的ip为外网ip</span><br><span class="line"># bash xxx.sh &lt;用户名&gt;</span><br><span class="line">[[ -z $1 ]] &amp;&amp; exit</span><br><span class="line">CLIENTNAME&#x3D;$1</span><br><span class="line">#read -p &#39;输入用户名（字母组成）:&#39; CLIENTNAME</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn easyrsa build-client-full $&#123;CLIENTNAME&#125; nopass</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_getclient $CLIENTNAME &gt; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;1a comp-lzo&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;2a tun-mtu 1500&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;3a auth-nocache&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &quot;s&#x2F;$&#123;本机ip&#125;&#x2F;$&#123;外网ip&#125;&#x2F;&quot; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn  # 若为nat环境，自行修改，若不是nat环境，注释掉本行</span><br><span class="line">mkdir -pv $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;private&#x2F;$&#123;CLIENTNAME&#125;.key $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;issued&#x2F;$&#123;CLIENTNAME&#125;.crt $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">cd $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;</span><br><span class="line">tar zcf $&#123;CLIENTNAME&#125;.tar.gz $&#123;CLIENTNAME&#125;</span><br><span class="line">sz $&#123;CLIENTNAME&#125;.tar.gz</span><br></pre></td></tr></table></figure><h4 id="删除用户脚本"><a href="#删除用户脚本" class="headerlink" title="删除用户脚本"></a>删除用户脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># bash xxx.sh &lt;用户名&gt;</span><br><span class="line">[[ -z $1 ]] &amp;&amp; exit</span><br><span class="line">CLIENTNAME&#x3D;$1</span><br><span class="line">#read -p &#39;输入用户名（字母组成）:&#39; CLIENTNAME</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;private&#x2F;$&#123;CLIENTNAME&#125;.key*</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;reqs&#x2F;$&#123;CLIENTNAME&#125;.req</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;issued&#x2F;$&#123;CLIENTNAME&#125;.crt</span><br><span class="line">sed -i &quot;&#x2F;$&#123;CLIENTNAME&#125;&#x2F;d&quot; &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;index.txt</span><br><span class="line">cd &#x2F;root&#x2F;ovpn-data&#x2F;users</span><br><span class="line">rm -rf $&#123;CLIENTNAME&#125;</span><br><span class="line">rm -f $&#123;CLIENTNAME&#125;.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> openvpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis☞调整内核参数</title>
      <link href="/2018/02/02/redis%E2%98%9E%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/"/>
      <url>/2018/02/02/redis%E2%98%9E%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前安装完redis，启动redis，总会告诉你让你默认修改一些参数，不知其原因，但每次都招办。<br>后来遇到一些redis内存使用紧张的时候，从而导致 redis-bgsave 失败，再一次想到了这个问题。<br>经过查阅资料，发现官方文档里告诉了原因，在此记录一下。如有不对之处，还请指出。</p><h4 id="我是问题"><a href="#我是问题" class="headerlink" title="我是问题"></a>我是问题</h4><p>redis-bgsave与overcommit_memory的关系。<br>当剩余物理内存低于当前redis所用内存的时候，overcommit_memory=1的意义</p><h4 id="官方解释在此"><a href="#官方解释在此" class="headerlink" title="官方解释在此"></a>官方解释在此</h4><blockquote><p><a href="https://redis.io/topics/faq" target="_blank" rel="noopener">https://redis.io/topics/faq</a></p></blockquote><h2 id="Background-saving-fails-with-a-fork-error-under-Linux-even-if-I-have-a-lot-of-free-RAM"><a href="#Background-saving-fails-with-a-fork-error-under-Linux-even-if-I-have-a-lot-of-free-RAM" class="headerlink" title="Background saving fails with a fork() error under Linux even if I have a lot of free RAM!"></a>Background saving fails with a fork() error under Linux even if I have a lot of free RAM!</h2><p>Short answer: : <code>echo 1 &gt; /proc/sys/vm/overcommit_memory</code></p><p>And now the long one:</p><p>Redis background saving schema relies on the copy-on-write semantic of fork in modern operating systems: Redis forks (creates a child process) that is an exact copy of the parent. The child process dumps the DB on disk and finally exits. In theory the child should use as much memory as the parent being a copy, but actually thanks to the copy-on-write semantic implemented by most modern operating systems the parent and child process will <em>share</em> the common memory pages. A page will be duplicated only when it changes in the child or in the parent. Since in theory all the pages may change while the child process is saving, Linux can’t tell in advance how much memory the child will take, so if the setting is set to zero fork will fail unless there is as much free RAM as required to really duplicate all the parent memory pages, with the result that if you have a Redis dataset of 3 GB and just 2 GB of free memory it will fail.<code>overcommit_memory</code></p><p>Setting to 1 tells Linux to relax and perform the fork in a more optimistic allocation fashion, and this is indeed what you want for Redis.<code>overcommit_memory</code></p><p>A good source to understand how Linux Virtual Memory works and other alternatives for and is this classic from Red Hat Magazine, <a href="https://people.redhat.com/nhorman/papers/rhel3_vm.pdf" target="_blank" rel="noopener">“Understanding Virtual Memory”</a>. You can also refer to the <a href="http://man7.org/linux/man-pages/man5/proc.5.html" target="_blank" rel="noopener">proc(5)</a> man page for explanations of the available values.<code>overcommit_memory``overcommit_ratio</code></p><h4 id="翻译后的大致意思"><a href="#翻译后的大致意思" class="headerlink" title="翻译后的大致意思"></a>翻译后的大致意思</h4><p>官方的FAQ，给人一种这么个意思。 如果你不设置overcommit_memory=1，那么COW机制将无法使用，所以当空余内存小于当前redis占用内存时，redis-bgsave 因为无法申请到足够的内存，将导致分配内存失败。<br>而COW机制的意思就是：父子进程公用内存页，因此只会copy变化的数据。因此，在COW机制下，redis-bgsave只需要申请到支撑变化数据的内存即可。<br>至于是否是因为启用 overcommit_memory=1 从而使得COW机制起作用，限于这是内核层面的东西</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web ☞ 系统基本优化</title>
      <link href="/2017/01/20/web%E2%98%9E%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/"/>
      <url>/2017/01/20/web%E2%98%9E%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内核参数</span></span><br><span class="line"><span class="comment"># 系统级别上限， 即整个系统所有进程单位时间可打开的文件描述符数量</span></span><br><span class="line">fs.file-max = 6553500</span><br><span class="line"><span class="comment"># 三次握手请求频次</span></span><br><span class="line">net.ipv4.tcp_syn_retries = 5</span><br><span class="line"><span class="comment"># 放弃回应一个TCP请求之前，需要尝试多少次</span></span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line"><span class="comment"># 三次握手应答频次</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"><span class="comment"># 三次握手完毕， 没有数据沟通的情况下， 空连接存活时间</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 60</span><br><span class="line"><span class="comment"># 探测消息发送次数</span></span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line"><span class="comment"># 探测消息发送间隔时间</span></span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 15</span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line">net.ipv4.tcp_fin_timeout = 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统处理不属于任何进程的TCP链接</span></span><br><span class="line">net.ipv4.tcp_orphan_retries = 3</span><br><span class="line">net.ipv4.tcp_max_orphans = 35000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span><br><span class="line">net.core.netdev_max_backlog = 10240</span><br><span class="line"><span class="comment"># 对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 10240</span><br><span class="line"><span class="comment"># 定义了系统中每一个端口最大的监听队列的长度 </span></span><br><span class="line">net.core.somaxconn=10240</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大timewait数</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.ip_local_port_range=1024 65500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启时间戳</span></span><br><span class="line">net.ipv4.tcp_timestamps=1</span><br><span class="line"><span class="comment"># 针对客户端有效，必须在开启时间戳的前提下</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 iptables 后， 链路追踪上限和超时时间, 若没有使用 iptables，则无效</span></span><br><span class="line">net.netfilter.nf_conntrack_max = 6553500</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established = 150</span><br><span class="line"></span><br><span class="line"><span class="comment">## tcp栈内存使用， 单位是内存页， 一页=4KB</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_mem = 524288 786432 1310720</span></span><br><span class="line"><span class="comment">## socket读写缓冲区大小，单位是字节</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_rmem = 4096 4096 16777216</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_wmem = 4096 4096 16777216</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最低内存和缓冲区回收倾向（此参数有一定风险）</span></span><br><span class="line"><span class="comment">#vm.min_free_kbytes=409600</span></span><br><span class="line"><span class="comment">#vm.vfs_cache_pressure=200</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改/etc/security/limits.conf</span></span><br><span class="line"><span class="comment"># 单会话级别，可打开的所有文件描述符上限</span></span><br><span class="line">* soft nofile 655350</span><br><span class="line">* hard nofile 655350</span><br><span class="line"><span class="comment"># 单会话级别， 可打开的所有进程上限</span></span><br><span class="line">* soft nproc 10240</span><br><span class="line">* hard nproc 10240</span><br></pre></td></tr></table></figure><blockquote><h5 id="开启iptables后-查看当前链路表数量命令"><a href="#开启iptables后-查看当前链路表数量命令" class="headerlink" title="开启iptables后, 查看当前链路表数量命令"></a>开启iptables后, 查看当前链路表数量命令</h5><p>$ sysctl net.netfilter.nf_conntrack_count</p><p>net.netfilter.nf_conntrack_count = 601032</p><h5 id="查看连接数最高的10个IP：可以查封某个ip-或者判断是谁导致的"><a href="#查看连接数最高的10个IP：可以查封某个ip-或者判断是谁导致的" class="headerlink" title="查看连接数最高的10个IP：可以查封某个ip, 或者判断是谁导致的"></a>查看连接数最高的10个IP：可以查封某个ip, 或者判断是谁导致的</h5><p>$ awk -F’=’ ‘{c[$2]++}END{for ( i in c) print i,c[i]}’ /proc/net/nf_conntrack | head -10 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell☞if判定</title>
      <link href="/2016/10/02/shell%E2%98%9Eif%E5%88%A4%E5%AE%9A/"/>
      <url>/2016/10/02/shell%E2%98%9Eif%E5%88%A4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a FILE：存在则为真；否则则为假；</span><br><span class="line">-e FILE: 存在则为真；否则则为假；</span><br><span class="line">-f FILE: 存在并且为普通文件，则为真；否则为假；</span><br><span class="line">-d DIR: 存在并且为目录，则为真；否则为假；</span><br><span class="line">-L&#x2F;-h FILE: 存在并且为符号链接文件，则为真；否则为假；</span><br><span class="line">-b: 存在并且为块设备，则为真；否则为假；</span><br><span class="line">-c: 存在并且为字符设备，则为真；否则为假</span><br><span class="line">-S: 存在并且为套接字文件，则为真；否则为假</span><br><span class="line">-p: 存在并且为命名管道，则为真；否则为假</span><br><span class="line">-s FILE: 存在并且为非空文件则为值，否则为假；</span><br><span class="line">-r FILE：文件可读为真，否则为假</span><br><span class="line">-w FILE：文件可写为真，否则为假</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux ☞ df与du数据不一致的原因</title>
      <link href="/2015/11/15/linux%E2%98%9Edf%E4%B8%8Edu%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2015/11/15/linux%E2%98%9Edf%E4%B8%8Edu%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-☞-df与du数据不一致的原因"><a href="#linux-☞-df与du数据不一致的原因" class="headerlink" title="linux ☞ df与du数据不一致的原因"></a>linux ☞ df与du数据不一致的原因</h2><ul><li><h3 id="问题表现："><a href="#问题表现：" class="headerlink" title="问题表现："></a>问题表现：</h3></li></ul><p>df 数据比 du 数据小，而且是发生在删除文件之后。</p><hr><p>这个问题牵扯到 linux 系统是将如何确认和回收数据的.</p><ul><li><h3 id="空间是如何被判定占用的"><a href="#空间是如何被判定占用的" class="headerlink" title="空间是如何被判定占用的"></a>空间是如何被判定占用的</h3></li></ul><p>linux文件系统判定空间是否被占用，是查看空间的 imap 是否为1，而 imap 是否为1，则取决于占用空间的文件的 inode 节点的 Links 是否为0。而每当程序调用文件且没有关闭，那么此文件的 inode 的 Links 就会加 1。</p><p>如果 Links 不为0，则 imap 就不会是 0 ，则这份空间就无法被再次调用.<br>另外，每一个文件，默认 inode  Links 是1</p><ul><li><h3 id="系统是如何删除一个文件的"><a href="#系统是如何删除一个文件的" class="headerlink" title="系统是如何删除一个文件的"></a>系统是如何删除一个文件的</h3></li></ul><p>文件系统首先在父目录文件里找到所要删除的文件名，将此文件信息从父目录里清除掉，如若清除后，Links 为0 ，则删除 inode 节点，将 imap 就置为0，空间可以再次被利用。但是，如果父目录文件信息清除后，有程序在调用文件，则 Links 不为0，那么 inode 无法被删除， imap 也无法置为0，结果就是文件看着没了，但是空间还是没有释放。</p><hr><p>df 和 du 的最大区别就是：</p><p>df 是根据 inode 的 Links 来确认空间是否被占用，并进而统计</p><p>du 是根据目录的文件信息来确认空间是否被占用，并进而统计</p><ul><li><h3 id="如何释放被占用的空间"><a href="#如何释放被占用的空间" class="headerlink" title="如何释放被占用的空间"></a>如何释放被占用的空间</h3></li></ul><p>从上面可知，我们只需要将被删除文件的 inode Links 降成 0 即可，也就是关闭此文件的调用程序.</p><p>如何查找调用程序？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -n | grep rm_file_name <span class="comment"># 获取到程序 pid，并将其杀死即可</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

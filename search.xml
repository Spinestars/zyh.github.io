<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s☞10一个wordpress例子</title>
      <link href="2020/09/17/k8s%E2%98%9E10%E4%B8%80%E4%B8%AAwordpress%E4%BE%8B%E5%AD%90/"/>
      <url>2020/09/17/k8s%E2%98%9E10%E4%B8%80%E4%B8%AAwordpress%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="参考例子"><a href="#参考例子" class="headerlink" title="参考例子"></a>参考例子</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">dbport</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">rootPassW0rd</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_DATABASE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_USER</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysqlport</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">dbport</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-db</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup mysql; do echo waiting for mysql service; sleep 2; done;&#x27;</span>]</span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">wdport</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">WORDPRESS_DB_HOST</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">mysql:3306</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">WORDPRESS_DB_USER</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">WORDPRESS_DB_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">wordpress</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">256Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">wordpress</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wordpressport</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32255</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">wdport</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ConfigMap </tag>
            
            <tag> Secret </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞11-1pod资源约束</title>
      <link href="2020/09/17/k8s%E2%98%9E11-1pod%E8%B5%84%E6%BA%90%E7%BA%A6%E6%9D%9F/"/>
      <url>2020/09/17/k8s%E2%98%9E11-1pod%E8%B5%84%E6%BA%90%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</a></p><p>资源约束在我们平时使用的时候主要是cpu和内存层面, 以及本地临时存储(emptyDir)</p><p>k8s资源约束分为两种: request(软约束) 和 limits(硬约束)</p><p>request(软约束)确保了pod中的容器至少可以使用这么多资源. 不过当节点如果没有其它容器,则此容器可以突破request限制.</p><p>limits(硬约束) 则使硬性的限制了容器资源上限. 如果容器请求的内存大于了limits,则会收到oom错误. 如果容器请求的cpu大于了limits, 则不会产出错误, 因为cpu对于程序来说,它不是一个硬性指标.如果cpu资源不够,只会导致程序卡顿到死…</p><p>最后,k8s会严格按照pod定义的资源限制进行调度,即时某个节点上有大量空闲资源,但只要空闲资源不能满足pod的资源定义,就不能调度到这个节点上.</p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><ul><li><code>spec.containers[].resources.limits.cpu </code>cpu限制</li><li><code>spec.containers[].resources.limits.memory</code> 内存限制</li><li><code>spec.containers[].resources.limits.hugepages-&lt;size&gt;</code>   不常用, 可以忽略</li><li><code>spec.containers[].resources.limits.ephemeral-storage</code> empty临时存储限制</li><li><code>spec.containers[].resources.requests.cpu</code> </li><li><code>spec.containers[].resources.requests.memory</code></li><li><code>spec.containers[].resources.requests.hugepages-&lt;size&gt; </code> 不常用, 可以忽略</li><li><code>spec.containers[].resources.requests.ephemeral-storage</code></li></ul><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>k8s将一个超线程称为一个vcpu. 1vcpu=1000m. 我们在定义资源限制时, 应该始终用 m 作为单位.假设你限制0.5个vcpu,则填写500m.</p><p>k8s的内存和临时存储单位和平时我们所用的没什么区别. 你只需要记住 K/M/G/T/P/E 这些即可. 例如, 100M就是100兆</p><p>一个例子: </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">images.my-company.example/app:v4</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;64M&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;128M&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;4Gi&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-aggregator</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">images.my-company.example/log-aggregator:v6</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">requests:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;64M&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">&quot;128M&quot;</span></span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ephemeral-storage:</span> <span class="string">&quot;4Gi&quot;</span></span><br></pre></td></tr></table></figure><h2 id="资源限制如何运作"><a href="#资源限制如何运作" class="headerlink" title="资源限制如何运作"></a>资源限制如何运作</h2><p>k8s会通过kubelet将pod定义的资源限制传递给容器.</p><p>如果你容器使用的是docker. </p><p>cpu软限制将对标docker的–cpu-shares. 而cpu硬限制会告诉容器每100ms可以使用的CPU时间总量是  limits.cpu * 100.</p><blockquote><p>关于docker的–cpu-shares, 可以参考<a href="https://docs.docker.com/engine/reference/run/#cpu-share-constraint">https://docs.docker.com/engine/reference/run/#cpu-share-constraint</a></p><p>总的来说, –cpu-shares 会让容器按照所设定的分值比例去使用cpu.不过, 在多核心节点上, 这个规则又不是很适用. 按照官方的说法, 当多核心cpu的时候,它的规则是:</p><p>On a multi-core system, the shares of CPU time are distributed over all CPU cores. Even if a container is limited to less than 100% of CPU time, it can use 100% of each individual CPU core.</p><p>For example, consider a system with more than three cores. If you start one container <code>&#123;C0&#125;</code> with <code>-c=512</code> running one process, and another container <code>&#123;C1&#125;</code> with <code>-c=1024</code> running two processes, this can result in the following division of CPU shares:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PID    containerCPUCPU share</span><br><span class="line">100    &#123;C0&#125;0100% of CPU0</span><br><span class="line">101    &#123;C1&#125;1100% of CPU1</span><br><span class="line">102    &#123;C1&#125;2100% of CPU2</span><br></pre></td></tr></table></figure><p>这里三个容器,都是单核心程序</p></blockquote><p>内存的限制没有什么特别需要注意的.</p><h2 id="容器中的可见资源"><a href="#容器中的可见资源" class="headerlink" title="容器中的可见资源"></a>容器中的可见资源</h2><p>默认情况下,不管你如何设置资源限制,容器里的可见资源都等于节点资源.也就是说你在容器里查看/proc/meminfo显示的资源并不是你设置的.这个问题会带来很多麻烦. </p><p>因为很多程序的参数都是根据可见资源来设定的.例如nginx的auto, 或者jvm里的内存参数.</p><blockquote><p>从 Java 8u191开始, jvm 已经默认实现了容器感知( -XX:+UseContainerSupport). 因此无需安装下面的 lxcfs 方案.</p><p>并且, 在容器中建议只设置如下内存参数:</p><p>-XX:MaxRAMPercentage  最大堆内存=物理内存百分比, 建议为容器限制的50%-75% . 毕竟还需要预留其它内存.</p></blockquote><p>而社区常见的作法是用<code>lxcfs</code> 来提升资源的可见性.<code>lxcfs</code> 是一个开源的FUSE（用户态文件系统）实现来支持LXC容器, 它也可以支持Docker容器.</p><p>LXCFS通过用户态文件系统, 在容器中提供下列 <code>procfs</code> 的文件.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/proc/cpuinfo</span><br><span class="line">/proc/diskstats</span><br><span class="line">/proc/meminfo</span><br><span class="line">/proc/<span class="built_in">stat</span></span><br><span class="line">/proc/swaps</span><br><span class="line">/proc/uptime</span><br></pre></td></tr></table></figure><p>与我们资源限制有关的, 主要是 cpuinfo 和 meminfo.</p><p>目前社区的做法如下:</p><ol><li><p>所有节点安装 fuse-libs 包. </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y fuse-libs</span><br></pre></td></tr></table></figure></li><li><p>安装部署lxcfs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gti <span class="built_in">clone</span> https://github.com/denverdino/lxcfs-admission-webhook.git</span><br><span class="line"><span class="built_in">cd</span> lxcfs-admission-webhook</span><br><span class="line">vim deployment/lxcfs-daemonset.yaml</span><br><span class="line">=== 修正版本为 apps/v1  (当前git里的代码是陈旧的...代码里的版本在 1.18 已经被废弃). 具体归属于什么版本, 请参考k8s官方api文档 https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/<span class="comment">#daemonset-v1-apps</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f deployment/lxcfs-daemonset.yaml</span><br><span class="line">kubectl get pod</span><br><span class="line">=== 等待 lxcfs pod 状态成 running</span><br><span class="line"></span><br><span class="line">deployment/install.sh</span><br><span class="line">kubectl get secrets,pods,svc,mutatingwebhookconfigurations</span><br><span class="line">=== 查看各个对象状态</span><br></pre></td></tr></table></figure></li><li><p>给相关namespace注入lxcfs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl label namespace default lxcfs-admission-webhook=enabled</span><br></pre></td></tr></table></figure></li><li><p>重启添加了资源限制的pod, 此时 /proc/cpuinfo 和 /proc/meminfo 将会正确显示. (free之类的还是会输出节点的)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
            <tag> 资源约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞11-2namespace资源约束</title>
      <link href="2020/09/17/k8s%E2%98%9E11-2namespace%E8%B5%84%E6%BA%90%E7%BA%A6%E6%9D%9F/"/>
      <url>2020/09/17/k8s%E2%98%9E11-2namespace%E8%B5%84%E6%BA%90%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://kubernetes.io/docs/concepts/policy/limit-range/">https://kubernetes.io/docs/concepts/policy/limit-range/</a></p><p>namespace 资源约束(LimitRange)防止pod的配置超出预期.从而让我们可以更方便的管理资源.</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>提供 pod 的默认资源约束.</li><li>限制pod的资源约束.</li><li>LimitRange配置策略的构建和变更仅影响之后的pod</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="构建LimitRange"><a href="#构建LimitRange" class="headerlink" title="构建LimitRange"></a>构建LimitRange</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">LimitRange</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cpu-mem-storage-min-max-default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Container</span></span><br><span class="line">    <span class="attr">max:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;800m&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;1G&quot;</span></span><br><span class="line">    <span class="attr">min:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;200m&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;128M&quot;</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;800m&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;256M&quot;</span></span><br><span class="line">    <span class="attr">defaultRequest:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">&quot;200m&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">&quot;128M&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line">    <span class="attr">max:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">30G</span></span><br><span class="line">    <span class="attr">min:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">8G</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f limitrange-default.yaml --namespace=default</span><br></pre></td></tr></table></figure><p>上述例子为 default 命名空间加了一个资源策略.效果如下:</p><ul><li><p>当pod没有任何限制的时候, pod规则如下</p><ul><li><p>limit: cpu=800m mem=256M</p></li><li><p>request: cpu=200m mem=128M</p></li><li><p>8G &lt; pvc &lt; 30G</p><p>会全部走limitrange的默认值</p></li></ul></li><li><p>当pod设置了limit: cpu=1000m mem=1024M的时候, pod规则如下</p><ul><li><p>limit: cpu=1000m mem=1024M</p></li><li><p>request: cpu=1000m mem=1024M</p></li><li><p>8G &lt; pvc &lt; 30G</p><p>这里比较奇葩, 官方就是这么设定的. 虽然你没设置request, 但是request 不会走默认值, 会继承 limit 的自定义值</p></li></ul></li><li><p>当pod只设置了request: cpu=300m mem=150M的时候, pod规则如下</p><ul><li><p>limit: cpu=800m mem=256M</p></li><li><p>request: cpu=300m mem=150M</p></li><li><p>8G &lt; pvc &lt; 30G</p><p>这里符合大家的逻辑…没设置就是走默认.</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 资源约束 </tag>
            
            <tag> namespace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞09应用配置与密码与信息提供</title>
      <link href="2020/09/17/k8s%E2%98%9E09%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AF%86%E7%A0%81%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E4%BE%9B/"/>
      <url>2020/09/17/k8s%E2%98%9E09%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AF%86%E7%A0%81%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E4%BE%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>k8s提供了一个专门用于存储配置和密码的对象.</p><p>分别叫做 ConfigMap 和 Secret</p><h2 id="配置ConfigMap"><a href="#配置ConfigMap" class="headerlink" title="配置ConfigMap"></a>配置ConfigMap</h2><p><a href="https://kubernetes.io/docs/concepts/configuration/configmap/">https://kubernetes.io/docs/concepts/configuration/configmap/</a></p><p>ConfigMap 常用在两种情况中. 第一种是提供环境变量.第二种是提供配置文件</p><p>一个简单配置例子如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-demo</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">data.1:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">data.2:</span> <span class="string">world</span></span><br><span class="line">  <span class="attr">nginx.conf:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">property.1=value-1</span></span><br><span class="line">    <span class="string">property.2=value-2</span></span><br><span class="line">    <span class="string">property.3=value-3</span></span><br></pre></td></tr></table></figure><p>上述例子中, 包含的内容有</p><p>环境变量方式:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">data.1:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">data.2:</span> <span class="string">world</span></span><br></pre></td></tr></table></figure><p>配置文件方式: </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nginx.conf:</span> <span class="string">|</span></span><br><span class="line">  <span class="string">property.1=value-1</span></span><br><span class="line">  <span class="string">property.2=value-2</span></span><br><span class="line">  <span class="string">property.3=value-3</span></span><br></pre></td></tr></table></figure><p>nginx.config 是文件名, 管道符 | 下面是文件内容.</p><p>需要注意的是, 内容太依然要遵循 yaml 的缩进规则</p><p>使用方式如下:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo $&#123;DATA.1&#125; $&#123;DATA.2&#125;&quot;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DATA1</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-demo-vc</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">data.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DATA2</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">configMapKeyRef:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-demo-vc</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">data.2</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-demo-vc</span></span><br><span class="line">      <span class="attr">subPath:</span> <span class="string">nginx.conf</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/nginx/nginx.conf</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-demo-vc</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cm-demo</span></span><br></pre></td></tr></table></figure><p>配置文件数据卷方式:</p><ul><li>通过在 spec.volumes 中定义一个关联声明(cm.demo-vc). 它一端被 spec.containers.volumeMounts 调用, 另一端关联 configMap. 然后通过 spec.containers.volumeMounts 绑定 configMap 后, 就可以使用 subPath 调用配置文件, 并使用 mountPath 挂载到容器里的具体路径上.</li><li>这种方式下,configMap更新后,pod内挂载的也会同时更新.</li></ul><p>环境变量方式:</p><ul><li>通过在 spec.containers.env 中定义. 例子中, DATA1 是环境变量的键, DATA1的值通过valueFrom定义.最终,你可以在容器中使用环境变量DATA1和DATA2</li></ul><h2 id="密码Secret"><a href="#密码Secret" class="headerlink" title="密码Secret"></a>密码Secret</h2><p><a href="https://kubernetes.io/docs/concepts/configuration/secret/">https://kubernetes.io/docs/concepts/configuration/secret/</a></p><p>secret对象里的值需要写入加密后的.</p><p>secret对象也可以被当作文件挂载或环境变量注入</p><p>一个简单例子:</p><p>我们定义一个用户密码对,分别时username和password</p><p>secret对象要求值必须进行base64编码加密(当type为Opaque的时候).</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 test-yaml]<span class="comment"># echo -n &quot;admin&quot; | base64</span></span><br><span class="line">YWRtaW4=</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># echo -n &quot;admin321&quot; | base64</span></span><br><span class="line">YWRtaW4zMjE=</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3600&quot;</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_USERNAME</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SECRET_PASSWORD</span></span><br><span class="line">        <span class="attr">valueFrom:</span></span><br><span class="line">          <span class="attr">secretKeyRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/etc/foo&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure><p>在通过上述配置创建好资源后,我们进入pod,进行测试.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl exec -it mypod -- /bin/sh</span></span><br><span class="line">===可以看到两个加密信息生成了两个软连接,并指向了隐藏文件</span><br><span class="line">/ <span class="comment"># ls -l /etc/foo</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Sep 17 07:18 password -&gt; ..data/password</span><br><span class="line">lrwxrwxrwx    1 root     root            15 Sep 17 07:18 username -&gt; ..data/username</span><br><span class="line">===环境变量</span><br><span class="line">/ <span class="comment"># echo $&#123;SECRET_USERNAME&#125;</span></span><br><span class="line">admin</span><br><span class="line">===文件方式</span><br><span class="line">/ <span class="comment"># cat /etc/foo/username</span></span><br><span class="line">admin/ <span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>机密资源限制在同一命名空间</li><li>数据大小不能超过1MB</li><li>当pod引用不存在的机密时,pod无法启动</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li><p>不可变的机密(k8s v1.19以上)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">secret.immutable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这种方式用来构建永久不可变的密码,且构建后无法更改,且构建后使用它的pod也无法卸载掉它.</p><p>因此,一旦构建后想更改,则它和它关联的pod都要删除重建.</p><p>优点:</p><ul><li>避免错误的更新</li><li>显著提高集群性能</li></ul></li><li><p>命令方式创建</p><p>kubectl create configmap/secret <name> xxx</name></p><p>这里xxx可以用两种方式:</p><ul><li>–from-literal=<key>=<value> 指定kv</value></key></li><li>–from-file=&lt;文件/目录&gt; 当为目录的时候,会递归将目录里的文件都写入对象中</li></ul></li><li><p>隐藏的密码信息文件</p><p>你可以将 secret.data.<key> 写成 secret.data.&lt;.key&gt; 来隐藏它.</key></p></li></ol><h2 id="信息提供Downward-API"><a href="#信息提供Downward-API" class="headerlink" title="信息提供Downward API"></a>信息提供Downward API</h2><p><a href="https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/">https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/</a></p><p>一个比较合适的解决方案是采用Downward API传递信息到容器. 然后程序根据信息来设置.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  </p><p>一个简单的例子: 将资源限制数据挂载到容器/etc/podinfo</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-downwardapi-volume-example-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">client-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/busybox:1.24</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">-en</span> <span class="string">&#x27;\n&#x27;</span><span class="string">;</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">-e</span> <span class="string">/etc/podinfo/cpu_limit</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">-en</span> <span class="string">&#x27;\n&#x27;</span><span class="string">;</span> <span class="string">cat</span> <span class="string">/etc/podinfo/cpu_limit;</span> <span class="string">fi;</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">-e</span> <span class="string">/etc/podinfo/cpu_request</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">-en</span> <span class="string">&#x27;\n&#x27;</span><span class="string">;</span> <span class="string">cat</span> <span class="string">/etc/podinfo/cpu_request;</span> <span class="string">fi;</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">-e</span> <span class="string">/etc/podinfo/mem_limit</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">-en</span> <span class="string">&#x27;\n&#x27;</span><span class="string">;</span> <span class="string">cat</span> <span class="string">/etc/podinfo/mem_limit;</span> <span class="string">fi;</span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">-e</span> <span class="string">/etc/podinfo/mem_request</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">-en</span> <span class="string">&#x27;\n&#x27;</span><span class="string">;</span> <span class="string">cat</span> <span class="string">/etc/podinfo/mem_request;</span> <span class="string">fi;</span></span><br><span class="line">          <span class="string">sleep</span> <span class="number">5</span><span class="string">;</span></span><br><span class="line">        <span class="string">done;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;32Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;125m&quot;</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">&quot;64Mi&quot;</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;250m&quot;</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">podinfo</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/podinfo</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">podinfo</span></span><br><span class="line">      <span class="attr">downwardAPI:</span></span><br><span class="line">        <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;cpu_limit&quot;</span></span><br><span class="line">            <span class="attr">resourceFieldRef:</span></span><br><span class="line">              <span class="attr">containerName:</span> <span class="string">client-container</span></span><br><span class="line">              <span class="attr">resource:</span> <span class="string">limits.cpu</span></span><br><span class="line">              <span class="attr">divisor:</span> <span class="string">1m</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;cpu_request&quot;</span></span><br><span class="line">            <span class="attr">resourceFieldRef:</span></span><br><span class="line">              <span class="attr">containerName:</span> <span class="string">client-container</span></span><br><span class="line">              <span class="attr">resource:</span> <span class="string">requests.cpu</span></span><br><span class="line">              <span class="attr">divisor:</span> <span class="string">1m</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;mem_limit&quot;</span></span><br><span class="line">            <span class="attr">resourceFieldRef:</span></span><br><span class="line">              <span class="attr">containerName:</span> <span class="string">client-container</span></span><br><span class="line">              <span class="attr">resource:</span> <span class="string">limits.memory</span></span><br><span class="line">              <span class="attr">divisor:</span> <span class="string">1Mi</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;mem_request&quot;</span></span><br><span class="line">            <span class="attr">resourceFieldRef:</span></span><br><span class="line">              <span class="attr">containerName:</span> <span class="string">client-container</span></span><br><span class="line">              <span class="attr">resource:</span> <span class="string">requests.memory</span></span><br><span class="line">              <span class="attr">divisor:</span> <span class="string">1Mi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ConfigMap </tag>
            
            <tag> Secret </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞08负载均衡service</title>
      <link href="2020/09/16/k8s%E2%98%9E08%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1service/"/>
      <url>2020/09/16/k8s%E2%98%9E08%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1service/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际业务中,因业务压力问题,经常会有多个后端服务副本,它们共同承担请求.我们使用云服务的时候,可以购买阿里云的slb或者aws的elb/alb等负载均衡器向这些后端副本分发流量. 并通过这些负载均衡向公网暴漏内网这些后端程序.</p><p>k8s设计了一个service对象来实现这一目的.</p><h2 id="k8sIP"><a href="#k8sIP" class="headerlink" title="k8sIP"></a>k8sIP</h2><p>在提Service对象之前,需要先知道k8s中存在的三种IP.即 NodeIP, ClusterIP, PodIP</p><p>NodeIP 就是物理节点ip, 这个没得说, 玩家自己定义</p><p>ClusterIP 是k8s的一个虚拟ip, 本身没有任何实体, 也就是VIP</p><p>PodIP 是容器共享的一个网络命名空间对应的ip, 一个pod里的容器共用.</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p><a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/">https://kubernetes.io/zh/docs/concepts/services-networking/service/</a></p><p>Service对象通过servicespec.type来设定类型, 共计4个类型: ClusterIP, NodePort, LoadBalancer, ExternalName. 这四个类型可以分为两类</p><ul><li>创建Service对象供集群内部访问</li></ul><p>ClusterIP(默认类型): 反向代理集群内的pod. 供集群内其它服务访问. 流量过程是: 集群内部其它服务=&gt;ClusterIP:端口=&gt;Pod</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myservice</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myapp-http</span></span><br></pre></td></tr></table></figure><blockquote><p>上述例子中, 集群内部访问myservice.default的时候,此时会访问到app=myapp的pod</p><p>这里port是Service暴露端口, targetPort是pod暴露端口. 默认情况下, targetPort将等于port</p><p>spec.type没有定义是因为ClusterIP是Service对象的默认类型</p></blockquote><p>ExternalName: 构建一个CNAME解析(service对象-CNAME-其它域名).  我能想到的主要是让集群内部服务可以访问到集群外部服务.</p><p>例如:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ExternalName</span></span><br><span class="line">  <span class="attr">externalName:</span> <span class="string">my.database.example.com</span></span><br></pre></td></tr></table></figure><blockquote><p>集群内部访问my-service.prod的时候, 将通过k8s的dns服务返回my.database.example.com</p></blockquote><ul><li>供集群外部访问</li></ul><p>NodePort: 反向代理集群内的pod(使用NAT在每一个集群node上的相同端口上公开Service, 是ClusterIP类型的超集). 供集群外服务访问. 流量过程是: 集群外=&gt;任意节点ip:端口=&gt;ClusterIP:端口=&gt;Pod</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myservice</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31000</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myapp-http</span></span><br></pre></td></tr></table></figure><blockquote><p>集群外部此时可以访问任意物理节点ip:31000, 此时可以访问到集群内部app=myapp的pod.</p><p>这里nodePort是物理节点暴露端口, port是Service暴露端口, targetPort是pod暴露端口.</p><p>nodePort可以不定义, 则此时会自动从30000-32767随机分配.</p></blockquote><p>LoadBalancer: 对接云商的负载均衡服务, 给Service分配一个固定IP. 方便云服务商的LB服务绑定. (是NodePort类型的超集). 流量过程是: 集群外=&gt;云服务LB=&gt;任意物理节点ip:端口=&gt;ClusterIP:端口=&gt;Pod</p><p>这种类型建议直接参考官方文档: <a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer">https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer</a></p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>有些时候,我们需要会话黏性,你可以通过service.spec.sessionAffinity=ClientIP来设置.并同时可以通过service.spec.sessionAffinityConfig.clientIP.timeoutSeconds来设置会话保持时间,它默认是3小时.</p><h2 id="多端口"><a href="#多端口" class="headerlink" title="多端口"></a>多端口</h2><p>有些时候,某个服务可能同时存在多个端口,例如web服务,会同时有80和443.这种情况下你需要针对两个端口分别设定一个端口名称.即 service.spec.ports.name</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/#environment-variables">https://kubernetes.io/docs/concepts/services-networking/service/#environment-variables</a></p><p>当service创建的时候,kubelet会生成一批环境变量.你可以在其它pod中使用这些环境变量访问service.不过前提是service对象必须提前创建.</p><p>不过,我觉得一般来说,有dns方式,都会通过dns去访问.而且dns也没有先创建service这一个限制.</p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞07无状态服务pod扩缩</title>
      <link href="2020/09/14/k8s%E2%98%9E07%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1pod%E6%89%A9%E7%BC%A9/"/>
      <url>2020/09/14/k8s%E2%98%9E07%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1pod%E6%89%A9%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>k8s的pod缩放功能,和aws的auto scaling功能是一回事.虽然可能没有aws的auto scaling功能强大.</p><p>k8s的pod缩放功能称之为HPA(Horizontal Pod Autoscaler),它可以基于设定的cpu阈值,来自动调整deployment中的pod数量.</p><h2 id="metrics-server"><a href="#metrics-server" class="headerlink" title="metrics-server"></a>metrics-server</h2><p><a href="https://github.com/kubernetes-sigs/metrics-server">https://github.com/kubernetes-sigs/metrics-server</a></p><p>metrics 服务器可以通过资源度量值 API 对外提供度量数据，Horizontal Pod Autoscaler 正是根据此 API 来获取度量数据.如果没有此服务,HPA将无法工作.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.7/components.yaml</span><br></pre></td></tr></table></figure><p>默认 metrics-server 的 deployment 无法直接使用, 我们需要添加几个参数,  来禁止 ca 认证和开通 dns </p><p>在 deployment.spec.template.spec.containers 中新加入下列配置:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/metrics-server</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalDNS,InternalIP,ExternalDNS,ExternalIP,Hostname</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f components.yaml</span><br></pre></td></tr></table></figure><h2 id="hpa"><a href="#hpa" class="headerlink" title="hpa"></a>hpa</h2><p><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/</a></p><p>创建一个用于测试的web服务, hpa-test.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">php-apache</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/hpa-example</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">php-apache</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">php-apache</span></span><br></pre></td></tr></table></figure><p>给web服务开启hpa</p><p>命令方式:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=5</span><br></pre></td></tr></table></figure><p>声明方式:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的意思是, cpu 阈值50%, 最小pod数1, 最大pod数5. hpa会将所有pod的平均cpu利用率维持在50%, 并且pod数量在1~5的范围内波动</p></blockquote><p>查看当前cpu使用率</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get hpa</span><br><span class="line">===</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         5         1          57m</span><br></pre></td></tr></table></figure><p>添加测试用的客户端, 访问web服务, 增加web服务的cpu使用率</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run -it --rm load-generator --image=busybox /bin/sh</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> wget -q -O- http://php-apache; <span class="keyword">done</span></span><br><span class="line">=== 会输出大量OK!</span><br><span class="line">OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!</span><br></pre></td></tr></table></figure><p>在经过一段时间等待后(不会超过1分钟, 默认监控抓取数据间隔时间是1分钟),我们可以看到 pod 数量发生变化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get hpa</span></span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         5         1          60m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get hpa</span></span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         5         1          60m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get hpa</span></span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   250%/50%   1         5         1          61m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get hpa</span></span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   250%/50%   1         5         1          61m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get deployment/php-apache</span></span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   5/5     5            5           68m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>现在,关闭客户端请求,等待1分钟以上.再次看hpa, 这时候cpu利用率已经下降</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get hpa</span></span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   11%/50%   1         5         5          64m</span><br></pre></td></tr></table></figure><p>这时候,再看pod数量,它应该已经开始缩减,但是这个缩减并不是在cpu使用率下降之后就立即执行,而是内部有一个算法.它避免因立即执行从而导致资源出现反复波动.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl get deployment php-apache</span></span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   5/5     5            5           70m</span><br><span class="line">[root@k8s00 test-yaml]<span class="comment"># kubectl describe deployment/php-apache</span></span><br><span class="line">Name:                   php-apache</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 16 Sep 2020 10:22:32 +0800</span><br><span class="line">Labels:                 &lt;none&gt;</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 1</span><br><span class="line">Selector:               run=php-apache</span><br><span class="line">Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  run=php-apache</span><br><span class="line">  Containers:</span><br><span class="line">   php-apache:</span><br><span class="line">    Image:      k8s.gcr.io/hpa-example</span><br><span class="line">    Port:       80/TCP</span><br><span class="line">    Host Port:  0/TCP</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:  500m</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:        200m</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   php-apache-5c4f475bf5 (1/1 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age    From                   Message</span><br><span class="line">  ----    ------             ----   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  14m    deployment-controller  Scaled up replica <span class="built_in">set</span> php-apache-5c4f475bf5 to 4</span><br><span class="line">  Normal  ScalingReplicaSet  14m    deployment-controller  Scaled up replica <span class="built_in">set</span> php-apache-5c4f475bf5 to 5</span><br><span class="line">  Normal  ScalingReplicaSet  6m50s  deployment-controller  Scaled down replica <span class="built_in">set</span> php-apache-5c4f475bf5 to 4</span><br><span class="line">  Normal  ScalingReplicaSet  4m49s  deployment-controller  Scaled down replica <span class="built_in">set</span> php-apache-5c4f475bf5 to 1</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>当前hpa的api版本是autoscaling/v1,它只能抓取cpu指标.如果你想抓取内存指标(当前也只支持内存)或自定义指标,那么需要将版本变更为autoscaling/v2beta2</p><p>autoscaling/v2beta2版本的配置有了一些变化,且可能随时会有新的变化.你可以在</p><p><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics">https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics</a></p><p>找到它的例子.</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v2beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">php-apache</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">      <span class="attr">target:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Utilization</span></span><br><span class="line">        <span class="attr">averageUtilization:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">observedGeneration:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">lastScaleTime:</span> <span class="string">&lt;some-time&gt;</span></span><br><span class="line">  <span class="attr">currentReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">desiredReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">currentMetrics:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">Resource</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cpu</span></span><br><span class="line">      <span class="attr">current:</span></span><br><span class="line">        <span class="attr">averageUtilization:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">averageValue:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞06无状态服务更新策略</title>
      <link href="2020/09/14/k8s%E2%98%9E06%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/"/>
      <url>2020/09/14/k8s%E2%98%9E06%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在操作一个无状态的app的时候,常常涉及到更新/回滚.</p><p>对于更新,我们一般会采用滚动更新,即: </p><ul><li>先扩展一部分新版本</li><li>删除一部分老版本</li><li>重复上述行为,直至所有老版本被替换.</li></ul><p>对于回滚,我们想回滚到任何一个之前的版本.</p><p>而deployment对象可以帮我们实现这些.</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>一个更新nginx版本的例子. 首先,我们创建一个nginx的deployment</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nginx-dep.yaml</span><br></pre></td></tr></table></figure><blockquote><p>这里dep的配置中spec.template.spec.container.image=nginx, 我没有设置具体版本</p><p>  Containers:<br>   nginx:<br>    Image:        nginx</p></blockquote><p>此时,查看版本历史, 这里涉及到 rollout 指令, 回滚的时候也会用到.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">deployment.apps/nginx-dep </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br></pre></td></tr></table></figure><p>此时我们发现没有关于这个版本1的相关描述, 我们手动进行添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl annotate deployment/nginx-dep kubernetes.io/change-cause=<span class="string">&quot;first&quot;</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">deployment.apps/nginx-dep </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         first</span><br></pre></td></tr></table></figure><blockquote><p>你也可以在执行写入命令的时候, 追加 –record 来将执行的命令写入到当前change-cause</p></blockquote><p>现在, 将所有deployment中所有nginx的image版本从默认变更为了1.19.2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/nginx-dep nginx=nginx:1.19.2 &amp;&amp; kubectl annotate deployment/nginx-dep kubernetes.io/change-cause=<span class="string">&quot;nginx image to 1.19.2&quot;</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">deployment.apps/nginx-dep </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         first</span><br><span class="line">2         nginx image to 1.19.2</span><br></pre></td></tr></table></figure><p>我们再生成一个版本1.18</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/nginx-dep nginx=nginx:1.18 &amp;&amp; kubectl annotate deployment/nginx-dep kubernetes.io/change-cause=<span class="string">&quot;nginx image to 1.18&quot;</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">deployment.apps/nginx-dep </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         first</span><br><span class="line">2         nginx image to 1.19.2</span><br><span class="line">3         nginx image to 1.18</span><br></pre></td></tr></table></figure><p>这样,我们总共有三个版本, 你可以通过追加版本号来看具体的版本内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep --revision=&lt;num&gt;</span><br></pre></td></tr></table></figure><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>我们选择将nginx版本回滚到first第一个版本.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout undo deployment/nginx-dep --to-revision=1</span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/nginx-dep</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">deployment.apps/nginx-dep </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">2         nginx image to 1.19.2</span><br><span class="line">3         nginx image to 1.18</span><br><span class="line">4         first</span><br></pre></td></tr></table></figure><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>deployment 的 .spec 中可以添加一些策略.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:  </span><br><span class="line">  minReadySeconds: 3  <span class="comment"># pod 就绪时间, 在此时间之前, deploy 认为 pod 还没有准备好. 默认0</span></span><br><span class="line">  revisionHistoryLimit: 10 <span class="comment"># 最大版本保留次数. 默认10 </span></span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: rollingUpdate <span class="comment"># 定义变更策略. 除了 rollingUpdate, 还可以是Recreate.Recreate指的是先删除所有pod,再创建.</span></span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxUnavailable: 30% <span class="comment"># 变更期间最多存在多少个不可用的pod</span></span><br><span class="line">      maxSurge: 30% <span class="comment"># 变更期间最多存在多少个超出已定义副本的pod数量</span></span><br></pre></td></tr></table></figure><blockquote><p>maxUnavailable 和 maxSurge 设置相等即可. 即开多少个新的, 就关多少个老的</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> <span class="comment"># 查看对象历史</span></span><br><span class="line">kubectl rollout undo <span class="comment"># 对象版本回退</span></span><br><span class="line">kubectl rollout status <span class="comment"># 展示执行状态</span></span><br><span class="line">kubectl rollout pause <span class="comment"># 暂停此次版本操作行为</span></span><br><span class="line">kubectl rollout resume <span class="comment"># 恢复此次版本操作行为</span></span><br><span class="line">kubectl <span class="built_in">set</span> image <span class="comment"># 修改镜像配置</span></span><br><span class="line">kubectl annotate <span class="comment"># 添加一个注释</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql☞常用命令</title>
      <link href="2020/09/11/mysql%E2%98%9E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2020/09/11/mysql%E2%98%9E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查询库表占用空间"><a href="#查询库表占用空间" class="headerlink" title="查询库表占用空间"></a>查询库表占用空间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    table_schema AS &#39;数据库&#39;,</span><br><span class="line">    table_name AS &#39;表名&#39;,</span><br><span class="line">    table_rows AS &#39;记录数&#39;,</span><br><span class="line">    TRUNCATE (data_length &#x2F; 1024 &#x2F; 1024 &#x2F; 1024, 3) AS &#39;数据容量(GB)&#39;,</span><br><span class="line">    TRUNCATE (index_length &#x2F; 1024 &#x2F; 1024 &#x2F; 1024 , 3) AS &#39;索引容量(GB)&#39;,</span><br><span class="line">TRUNCATE (DATA_FREE &#x2F; 1024 &#x2F; 1024 &#x2F; 1024, 3) AS &#39;已占用空间但未使用(GB)&#39;</span><br><span class="line">FROM</span><br><span class="line">    information_schema. TABLES</span><br><span class="line">WHERE</span><br><span class="line">    table_schema in (&#39;new_data&#39;,&#39;megable_main&#39;,&#39;megable_active&#39;)</span><br><span class="line">ORDER BY</span><br><span class="line">    data_length DESC;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞05pod探测器</title>
      <link href="2020/09/04/k8s%E2%98%9E05pod%E6%8E%A2%E6%B5%8B%E5%99%A8/"/>
      <url>2020/09/04/k8s%E2%98%9E05pod%E6%8E%A2%E6%B5%8B%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="探测器"><a href="#探测器" class="headerlink" title="探测器"></a>探测器</h2><blockquote><p><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes">https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes</a></p></blockquote><p>探测器有三种：存活探测器，就绪探测器，启动探测器</p><p>kubelet 使用存活探测器来知道什么时候要重启容器。 例如，存活探测器可以捕捉到死锁程序（进程在，但程序已无法进一步执行）。 这样的情况下重启容器有助于让应用程序在有问题的情况下更可用。</p><p>kubelet 使用就绪探测器可以知道容器什么时候准备好了并可以开始接受请求流量， 当一个 Pod 内的所有容器都准备好了，才能把这个 Pod 看作就绪了。 这种信号的一个用途就是控制哪个 Pod 作为 Service 的后端。 在 Pod 还没有准备好的时候，会从 Service 的负载均衡器中被剔除的。</p><p>kubelet 使用启动探测器可以知道应用程序容器什么时候启动了。 如果配置了这类探测器，就可以控制容器在启动成功后再进行存活性和就绪检查， 确保这些存活、就绪探测器不会影响应用程序的启动。 这可以用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉。</p><h2 id="存活探测器-livenessProbe"><a href="#存活探测器-livenessProbe" class="headerlink" title="存活探测器 livenessProbe"></a>存活探测器 livenessProbe</h2><p>目的在于确认容器是否健康，并在不健康的时候重启容器。它将在容器整个生命周期中运行。</p><p>探测器有三种探测方式，命令方式，http方式，tcp方式。具体可以上述官方文档</p><p>存活探测器包含两个时间段，一个是初始宽容期阶段 initialDelaySeconds，一个是初始阶段之后的探测间隔时间 periodSeconds</p><p>http方式例子如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">test:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-http</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/liveness</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/server</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">httpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Custom-Header</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">Awesome</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>探测器会认为 200&lt;=x&lt;400 的状态码为正常。</p></blockquote><h2 id="就绪探测器-readinessProbe"><a href="#就绪探测器-readinessProbe" class="headerlink" title="就绪探测器 readinessProbe"></a>就绪探测器 readinessProbe</h2><p>目的在于仅确认容器是否健康，但是并不删除容器。它将在容器整个生命周期中运行。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: goproxy</span><br><span class="line">  labels:</span><br><span class="line">    app: goproxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: goproxy</span><br><span class="line">    image: k8s.gcr.io&#x2F;goproxy:0.1</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      periodSeconds: 20</span><br></pre></td></tr></table></figure><p>这里可以看到就绪探针的时间定义是要比存活探针提前的。即容器启动5秒后就进行就绪探测，容器启动15秒后进行存活探测。</p><h2 id="启动探测器-startupProbe"><a href="#启动探测器-startupProbe" class="headerlink" title="启动探测器 startupProbe"></a>启动探测器 startupProbe</h2><p>目的在于设置一个容器启动宽容期。当启动探测器确认容器没问题后，后续的健康状态将交给存活探测器。</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-port</span></span><br><span class="line">  <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">hostPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">liveness-port</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">startupProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">liveness-port</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li>存活和就绪探针的健康状态接口应该是两个互相独立的接口</li><li>存活探针的健康状态接口应该是直接返回状态结果，不应该有任何逻辑</li><li>就绪探针的健康状态接口应该提供就绪所需要的逻辑。但是不应该添加重新构建就绪的逻辑。例如：处理http请求的程序需要一个数据库连接的就绪状态，那么就应该在就绪探针的健康状态接口里添加数据库连接的检查逻辑。</li></ol>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix☞预警</title>
      <link href="2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/"/>
      <url>2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<p> 定义预警分为几个步骤</p><ol><li>定义预警媒介</li><li>定义预警用户</li><li>定义预警动作</li></ol><p>触发器达到阈值，调用预警动作，预警动作调用预警用户，预警用户调用预警媒介</p><h2 id="预警媒介"><a href="#预警媒介" class="headerlink" title="预警媒介"></a>预警媒介</h2><p>配置-报警媒介类型，这里有两个要素</p><h3 id="报警媒介类型"><a href="#报警媒介类型" class="headerlink" title="报警媒介类型"></a>报警媒介类型</h3><p>类型有很多种，比如邮件，自定义脚本，这里我们选自定义脚本，来定义一个企业微信预警</p><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902144015196.png" alt="image-20200902144015196"></p><p>脚本需要接收三个参数：</p><p>{ALERT.SENDTO}：收件人</p><p>{ALERT.SUBJECT}：主题</p><p>{ALERT.MESSAGE}：内容</p><p>我们一般只用{ALERT.SENDTO}和{ALERT.MESSAGE}即可</p><h3 id="信息模板"><a href="#信息模板" class="headerlink" title="信息模板"></a>信息模板</h3><p>定义信息模板，一般我们定义告警模板/恢复模板/自动注册模板</p><p>告警模板如图：</p><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902144408513.png" alt="image-20200902144408513"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【[骷髅]】&#x3D;》&#123;TRIGGER.SEVERITY&#125; 事件 : &#123;EVENT.ID&#125;</span><br><span class="line">【问题时间】: &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125; </span><br><span class="line">【问题名字】: &#123;EVENT.NAME&#125;</span><br><span class="line">【问题主机】: &#123;HOST.NAME&#125;</span><br><span class="line">【问题级别】: &#123;EVENT.SEVERITY&#125;</span><br><span class="line">【阈值信息】: &#123;TRIGGER.NAME&#125;</span><br><span class="line">【阈值项目】: &#123;TRIGGER.KEY1&#125;</span><br><span class="line">【问题详情】: &#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">【当前状态】: &#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">【Operational data】: &#123;EVENT.OPDATA&#125;</span><br><span class="line">&#123;TRIGGER.URL&#125;</span><br></pre></td></tr></table></figure><p>恢复模板如图：</p><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902144504865.png" alt="image-20200902144504865"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【[OK]】&#x3D;》&#123;TRIGGER.SEVERITY&#125; 事件 : &#123;EVENT.ID&#125;</span><br><span class="line">【问题时间】: &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125; </span><br><span class="line">【问题恢复时间】: &#123;EVENT.RECOVERY.DATE&#125;  &#123;EVENT.RECOVERY.TIME&#125;</span><br><span class="line">【问题名字】: &#123;EVENT.NAME&#125;</span><br><span class="line">【问题主机】: &#123;HOST.NAME&#125;</span><br><span class="line">【问题级别】: &#123;EVENT.SEVERITY&#125;</span><br><span class="line">【阈值信息】: &#123;TRIGGER.NAME&#125;</span><br><span class="line">【阈值项目】: &#123;TRIGGER.KEY1&#125;</span><br><span class="line">【问题详情】: &#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">【当前状态】: &#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line">【Operational data】: &#123;EVENT.OPDATA&#125;</span><br><span class="line">&#123;TRIGGER.URL&#125;</span><br></pre></td></tr></table></figure><p>自动注册模板如图：</p><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902144535568.png" alt="image-20200902144535568"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自动注册: </span><br><span class="line">主机名: &#123;HOST.HOST&#125;</span><br><span class="line">主机ip: &#123;HOST.IP&#125;</span><br><span class="line">代理端口: &#123;HOST.PORT&#125;</span><br></pre></td></tr></table></figure><h3 id="放置发送信息的脚本"><a href="#放置发送信息的脚本" class="headerlink" title="放置发送信息的脚本"></a>放置发送信息的脚本</h3><p>具体位置以zb server的安装和配置为基准.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: zyh</span></span><br><span class="line"><span class="string">@contact: aaa103439@hotmail.com</span></span><br><span class="line"><span class="string">@software: vscode</span></span><br><span class="line"><span class="string">@file: sendchat.py</span></span><br><span class="line"><span class="string">@time: 2020/02/05</span></span><br><span class="line"><span class="string">@use: pip3 install requests configparser</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, requests, pathlib, json, configparser</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PySendchat</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, corpid, agentid, secret, touser, content</span>):</span></span><br><span class="line">        self.corpid=corpid</span><br><span class="line">        self.agentid=agentid</span><br><span class="line">        self.secret=secret</span><br><span class="line">        self.touser=touser</span><br><span class="line">        self.content=content</span><br><span class="line"></span><br><span class="line">        LOG_PATHDIR=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        LOG_FILENAME = <span class="string">&#x27;&#123;0&#125;/sendchat.log&#x27;</span>.format(LOG_PATHDIR)</span><br><span class="line">        self.my_logger = logging.getLogger(<span class="string">&#x27;SendChat&#x27;</span>)</span><br><span class="line">        self.my_logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add the log message handler to the logger</span></span><br><span class="line">        handler = logging.handlers.RotatingFileHandler(LOG_FILENAME, maxBytes=<span class="number">102400000</span>, backupCount=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create formatter and add it to the handlers</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        self.my_logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gettoken</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.my_logger.info(<span class="string">&#x27;-----------------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">        pwd=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        tokenfile=<span class="string">&#x27;&#123;0&#125;/wechat.&#123;1&#125;&#x27;</span>.format(pwd,self.agentid)</span><br><span class="line">        <span class="keyword">if</span> pathlib.Path(tokenfile).exists():</span><br><span class="line">            tokenfilectime=os.path.getctime(tokenfile)</span><br><span class="line">            currenttime=datetime.now().timestamp()</span><br><span class="line">            dtime=currenttime-tokenfilectime</span><br><span class="line">            self.my_logger.info(<span class="string">&#x27;&#123;0&#125; lived &#123;1&#125;s.&#x27;</span>.format(tokenfile, dtime))</span><br><span class="line">            <span class="keyword">if</span> dtime &gt;= <span class="number">7200</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    os.remove(tokenfile)</span><br><span class="line">                    self.my_logger.info(<span class="string">&#x27;Token file &#123;0&#125;: delete success&#x27;</span>.format(tokenfile))</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    self.my_logger.error(<span class="string">&#x27;Token file:&#123;0&#125; delete error.Reason:&#123;1&#125;&#x27;</span>.format(tokenfile,e))</span><br><span class="line">                    exit</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check token file</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tokensize = os.path.getsize(tokenfile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.info(<span class="string">&#x27;Token file is not exist.Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line">            tokensize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get token from token file</span></span><br><span class="line">        <span class="keyword">if</span> tokensize != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">with</span> open(tokenfile, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                token = fd.read() <span class="comment"># get token success</span></span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Get token from token file.&#x27;</span>)</span><br><span class="line">            jsonObject = json.loads(token.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            access_token = jsonObject.get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> access_token</span><br><span class="line">        <span class="comment"># get token from weixin api</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;New Token Create.&#x27;</span>)</span><br><span class="line">                f = requests.get(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;0&#125;&amp;corpsecret=&#123;1&#125;&#x27;</span>.format(self.corpid, self.secret))</span><br><span class="line">                token = f.content</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Get token from weixin api.&#x27;</span>)</span><br><span class="line">                jsonObject = json.loads(token.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                errcode=int(jsonObject.get(<span class="string">&quot;errcode&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> errcode != <span class="number">0</span>:</span><br><span class="line">                    errmsg=jsonObject.get(<span class="string">&quot;errmsg&quot;</span>)</span><br><span class="line">                    self.my_logger.error(<span class="string">&#x27;Get token error!Reason:&#123;0&#125;&#x27;</span>.format(errmsg))</span><br><span class="line">                    exit()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">&#x27;Get token error!Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Write token to &#123;0&#125;.&#x27;</span>.format(tokenfile))</span><br><span class="line">                <span class="keyword">with</span> open(tokenfile, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                    fd.write(token)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">&#x27;Write &#123;0&#125; error!Reason:&#123;1&#125;&#x27;</span>.format(tokenfile,e))</span><br><span class="line">                exit()</span><br><span class="line">            access_token = jsonObject.get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendmsg</span>(<span class="params">self</span>):</span></span><br><span class="line">        accessToken = self.gettoken()</span><br><span class="line">        self.my_logger.info(<span class="string">&#x27;Token:&#123;0&#125;&#x27;</span>.format(accessToken))</span><br><span class="line">        sendMapDirectroy = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;agentid&quot;</span>] = self.agentid</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;touser&quot;</span>] = self.touser</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;msgtype&quot;</span>] = <span class="string">&quot;text&quot;</span></span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;safe&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br><span class="line">        contentDirectory = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;text&quot;</span>] = contentDirectory</span><br><span class="line">        contentDirectory[<span class="string">&quot;content&quot;</span>] = self.content</span><br><span class="line">        bodyStr = json.dumps(sendMapDirectroy, ensure_ascii=<span class="literal">False</span>).encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = requests.post(url=<span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s&quot;</span> % accessToken,</span><br><span class="line">                          data=bodyStr, timeout=<span class="number">5</span>)</span><br><span class="line">            self.my_logger.info(f.content)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.error(<span class="string">&#x27;Send chat network error!Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    appname = sys.argv[<span class="number">1</span>]</span><br><span class="line">    content = sys.argv[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># read conf.ini</span></span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    conf_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    conf_ini = <span class="string">&quot;&#123;0&#125;/conf.ini&quot;</span>.format(conf_path)</span><br><span class="line">    <span class="keyword">if</span> pathlib.Path(conf_ini).exists():</span><br><span class="line">        conf.read(conf_ini)</span><br><span class="line">        corpid = conf.get(<span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;corpid&quot;</span>)</span><br><span class="line">        appinfo = conf.get(<span class="string">&quot;app&quot;</span>, appname)</span><br><span class="line">        agentid = appinfo.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        secret = appinfo.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        groupname = conf.get(<span class="string">&quot;group&quot;</span>, appname)</span><br><span class="line">        touser = groupname.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        chatobj = PySendchat(corpid, agentid, secret, touser, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;conf.ini error&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chatobj.sendmsg()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        chatobj.my_logger.error(<span class="string">&quot;Send chat failure!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf.ini</span></span><br><span class="line"><span class="section">[wechat]</span></span><br><span class="line">corpid = </span><br><span class="line"></span><br><span class="line"><span class="section">[app]</span></span><br><span class="line"><span class="attr">it</span> = &lt;app_agent_id&gt;:&lt;app_secret&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">[group]</span></span><br><span class="line"><span class="attr">it</span> = usera|userb</span><br></pre></td></tr></table></figure><p>eg:</p><p>python3 wechat.py it ‘’ &lt;预警内容&gt;</p><p>因 zabbix 调用脚本并非 root 用户，所以给脚本附加 x 权限，避免权限问题。 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a+x wechat.py</span><br><span class="line"><span class="comment"># 因脚本会生成其它文件</span></span><br><span class="line"><span class="comment"># 所以还需要给脚本所在的目录添加其它用户的写入权限</span></span><br><span class="line">chmod 757 alertscripts</span><br></pre></td></tr></table></figure><h2 id="预警用户"><a href="#预警用户" class="headerlink" title="预警用户"></a>预警用户</h2><p>管理-用户-添加用户，这里有三要素</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>你无需登陆这个用户，所以密码可以尽量的复杂</p><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902150131147.png" alt="image-20200902150131147"></p><h3 id="报警媒介"><a href="#报警媒介" class="headerlink" title="报警媒介"></a>报警媒介</h3><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902150145022.png" alt="image-20200902150145022"></p><blockquote><p>我们定义这个用户被调用的时候，将会发送信息给it组，至于it组包含哪些人员，则由脚本定义。</p></blockquote><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902150153011.png" alt="image-20200902150153011"></p><h2 id="预警动作"><a href="#预警动作" class="headerlink" title="预警动作"></a>预警动作</h2><p>配置-动作-左上角（触发器动作Trigger actions），这里我们需要定义两个要素</p><ol><li>什么条件下执行动作</li><li>动作的实际行为</li></ol><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>需要注意的是计算方式</p><blockquote><p>问题没有被制止的意思：没有人为的关闭预警</p></blockquote><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902150806009.png" alt="image-20200902150806009"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p><img src="/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/image-20200902151037597.png" alt="image-20200902151037597"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://www.lengyuewusheng.com/%E9%80%9A%E8%BF%87zabbix-api%E5%9C%A8%E5%91%8A%E8%AD%A6%E9%82%AE%E4%BB%B6%E4%B8%AD%E6%8F%92%E5%85%A5%E8%B6%8B%E5%8A%BF%E5%9B%BE.html">通过Zabbix API在告警邮件中插入趋势图</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix☞容器搭建</title>
      <link href="2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge zbnet</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /<span class="built_in">export</span>/docker-data-mysql/&#123;config,logs,data&#125;</span><br><span class="line">docker run --name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--network zbnet \</span><br><span class="line">--restart=always \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/config,dst=/etc/mysql&#x27;</span> \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/logs,dst=/var/log/mysql&#x27;</span> \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/data,dst=/var/lib/mysql&#x27;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="zabbix-server"><a href="#zabbix-server" class="headerlink" title="zabbix-server"></a>zabbix-server</h2><blockquote><p><a href="https://hub.docker.com/r/zabbix/zabbix-server-mysql">https://hub.docker.com/r/zabbix/zabbix-server-mysql</a></p></blockquote><p>安装 centos + server + mysql 版本</p><p>默认，环境变量 <code>MYSQL_USER</code> and <code>MYSQL_PASSWORD</code> are <code>zabbix</code>, <code>zabbix</code>.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;export&#x2F;docker-data-zbserver&#x2F;alertscripts</span><br><span class="line">docker volume create zabbixServerEtc</span><br><span class="line">docker run --name&#x3D;zabbix_server \</span><br><span class="line">-p 10051:10051 \</span><br><span class="line">--network zbnet \</span><br><span class="line">--restart&#x3D;always \</span><br><span class="line">--mount &#39;type&#x3D;volume,src&#x3D;zabbixServerEtc,dst&#x3D;&#x2F;etc&#x2F;zabbix&#39; \</span><br><span class="line">--mount &#39;type&#x3D;bind,src&#x3D;&#x2F;export&#x2F;docker-data-zbserver&#x2F;alertscripts,dst&#x3D;&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;alertscripts&#39; \</span><br><span class="line">-e DB_SERVER_HOST&#x3D;&quot;mysql57&quot; \</span><br><span class="line">-e MYSQL_DATABASE&#x3D;&quot;zabbixserver&quot; \</span><br><span class="line">-e MYSQL_USER&#x3D;&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_PASSWORD&#x3D;&quot;zabbix&quot; \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;&quot;123456&quot; \</span><br><span class="line">-d zabbix&#x2F;zabbix-server-mysql:centos-latest</span><br></pre></td></tr></table></figure><ol><li><p>默认安装完之后，容器内缺少一些开发环境，这会导致我们的告警脚本执行失败，比如我是用 python3 写的微信告警，而环境里没有。因此需要额外加装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f zabbix_server </span><br><span class="line"><span class="comment"># 可以看到如下错误</span></span><br><span class="line">203:20200831:030724.713 Failed to execute <span class="built_in">command</span> <span class="string">&quot;/usr/lib/zabbix/alertscripts/wechat.py &#x27;it&#x27; &#x27;自动注册: xxx-use-001-10-240-128-100&#x27; &#x27;主机名: xxx-use-001-10-240-128-100</span></span><br><span class="line"><span class="string">主机ip: xxx</span></span><br><span class="line"><span class="string">代理端口: 10050&#x27;&quot;</span>: env: <span class="string">&#x27;python3&#x27;</span>: No such file or directory</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 python3 和模块</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u root zabbix_server yum install python3</span><br><span class="line">docker <span class="built_in">exec</span> -it -u root zabbix_server pip3 install requests configparser</span><br></pre></td></tr></table></figure></li><li><p>alertscripts 目录需要有 other 可执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod o+w /<span class="built_in">export</span>/docker-data-zbserver/alertscripts</span><br></pre></td></tr></table></figure><p>因为 zabbix_server 在执行告警脚本的时候，用的是普通用户</p></li></ol><h2 id="zabbix-server-web"><a href="#zabbix-server-web" class="headerlink" title="zabbix-server-web"></a>zabbix-server-web</h2><blockquote><p><a href="https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql">https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装字体</span></span><br><span class="line">yum install google-noto-sans-simplified-chinese-fonts.noarch -y</span><br><span class="line">docker run --name zabbix_web \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">-p 443:8443 \</span><br><span class="line">--restart=always \</span><br><span class="line">--network zbnet \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/usr/share/fonts/google-noto/NotoSansSC-Regular.otf,dst=/usr/share/zabbix/assets/fonts/DejaVuSans.ttf&#x27;</span> \</span><br><span class="line">-e DB_SERVER_HOST=<span class="string">&quot;mysql57&quot;</span> \</span><br><span class="line">-e MYSQL_DATABASE=<span class="string">&quot;zabbixserver&quot;</span> \</span><br><span class="line">-e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_PASSWORD=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix_server&quot;</span> \</span><br><span class="line">-e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-web-nginx-mysql:latest</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://ip/">http://ip</a> 即可</p><p>初始账户密码是 Admin/zabbix</p></blockquote><p>到这里，你就可以访问zabbix了，不过这时候你会发现zabbix提示agent不可达</p><p><img src="/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/image-20200901172913999.png" alt="image-20200901172913999"></p><p>其原因是我们还没创建agent</p><p>需要注意的是，因为默认zabbix server的主机配置项监听的是 127.0.0.1:10050, 并且主机名配置的是</p><p> <code>zabbix server</code>. 这和我们本文档有一些冲突，所以需要修改一些配置。</p><ol start="2"><li>修改主机配置中的 hostname 为 agent 容器中的环境变量 ZBX_HOSTNAME。这里我们为 zabbix_server</li><li>修改主机配置中的监听地址为 zabbix_server，且监听方式为 dns</li></ol><p>最终修改完如下：</p><p><img src="/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/image-20200901175159400.png" alt="image-20200901175159400"></p><h2 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix-agent"></a>zabbix-agent</h2><blockquote><p><a href="https://hub.docker.com/r/zabbix/zabbix-agent">https://hub.docker.com/r/zabbix/zabbix-agent</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create zbAgentEtc</span><br><span class="line">docker run --name zabbix_agent \</span><br><span class="line">--network=container:zabbix_server \</span><br><span class="line">--mount <span class="string">&#x27;type=volume,src=zbAgentEtc,dst=/etc/zabbix/zabbix_agentd.d&#x27;</span> \</span><br><span class="line">-e ZBX_DEBUGLEVEL=<span class="string">&quot;3&quot;</span> \</span><br><span class="line">-e ZBX_HOSTNAME=<span class="string">&quot;zabbix_server&quot;</span> \</span><br><span class="line">-e ZBX_SERVER_HOST=<span class="string">&quot;zabbix_server&quot;</span> \</span><br><span class="line">-d zabbix/zabbix-agent:latest</span><br></pre></td></tr></table></figure><p>这里 zabbix_agent 采用网络模式为容器模式，并加入到 zabbix_server 容器中，以便于 zabbix_server 可以找到 zabbix_agent</p><p>其它配置变量详见上面官方文档</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://songrgg.github.io/operation/how-to-build-a-smallest-docker-image/">how to build the smallest docker image as fast as you can</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql☞离线迁移脚本</title>
      <link href="2020/08/29/mysql%E2%98%9E%E7%A6%BB%E7%BA%BF%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC/"/>
      <url>2020/08/29/mysql%E2%98%9E%E7%A6%BB%E7%BA%BF%E8%BF%81%E7%A7%BB%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">databases=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mysqltonew</span></span>()&#123;</span><br><span class="line">    olddatabasehost=</span><br><span class="line">    olddatabaseport=</span><br><span class="line">    olddatabase=<span class="variable">$1</span></span><br><span class="line">    oldUserName=</span><br><span class="line">    oldpassword=</span><br><span class="line"></span><br><span class="line">    newdatabasehost=</span><br><span class="line">    newolddatabaseport=</span><br><span class="line">    newdatabase=<span class="variable">$&#123;olddatabase&#125;</span></span><br><span class="line">    newUserName=</span><br><span class="line">    newpassword=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># utf8 / utf8mb4</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;character [utf8/utf8mb4/latin1]:&quot;</span> Character</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导出老库</span></span><br><span class="line">    mysqldump -u<span class="variable">$&#123;oldUserName&#125;</span> -p<span class="variable">$&#123;oldpassword&#125;</span> -h<span class="variable">$&#123;olddatabasehost&#125;</span> -P<span class="variable">$&#123;olddatabaseport&#125;</span> --default-character-set=<span class="variable">$&#123;Character&#125;</span> --single-transaction <span class="variable">$&#123;olddatabase&#125;</span> &gt; <span class="variable">$&#123;olddatabase&#125;</span>.sql</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建新库</span></span><br><span class="line">    mysql -u<span class="variable">$&#123;newUserName&#125;</span> -p<span class="variable">$&#123;newpassword&#125;</span> -h<span class="variable">$&#123;newdatabasehost&#125;</span> -P<span class="variable">$&#123;newolddatabaseport&#125;</span> -e <span class="string">&quot;CREATE DATABASE <span class="variable">$&#123;newdatabase&#125;</span> DEFAULT CHARSET <span class="variable">$&#123;Character&#125;</span> COLLATE <span class="variable">$&#123;Character&#125;</span>_general_ci;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入新库</span></span><br><span class="line">    mysql -u<span class="variable">$&#123;newUserName&#125;</span> -p<span class="variable">$&#123;newpassword&#125;</span> -h<span class="variable">$&#123;newdatabasehost&#125;</span> -P<span class="variable">$&#123;newolddatabaseport&#125;</span> --default-character-set=<span class="variable">$&#123;Character&#125;</span> <span class="variable">$&#123;newdatabase&#125;</span> &lt; <span class="variable">$&#123;olddatabase&#125;</span>.sql</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;databases&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;start <span class="variable">$i</span>&quot;</span></span><br><span class="line">        mysqltonew <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="http://hexo.yuanjh.cn/hexo/a27a49e6/">mysql常用操作速查[博]</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysqldump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞03静态pod</title>
      <link href="2020/08/26/k8s%E2%98%9E03%E9%9D%99%E6%80%81pod/"/>
      <url>2020/08/26/k8s%E2%98%9E03%E9%9D%99%E6%80%81pod/</url>
      
        <content type="html"><![CDATA[<h2 id="静态pod"><a href="#静态pod" class="headerlink" title="静态pod"></a>静态pod</h2><p>特点：</p><ol><li>永远运行在固定节点</li><li>由所在节点的kubelet管理，但只负责保活，即pod崩溃重生</li><li>kubelet会让apiserver创建一个镜像pod，便于可以通过kubectl查询到静态pod</li></ol><p>配置：</p><ol><li>存放在 /etc/kubernetes/manifests 当采用kubeadm安装的时候，一般位于此目录。具体需要去看kubelet配置。</li><li>配置本身可以按照标准pod方式来创建</li></ol><p>检测：</p><ol><li>kubelet会定期检测配置目录加载配置创建/重建pod</li></ol><blockquote><p>当你通过kubeadm创建的时候，那么k8s的几个重要组件均会以静态pod的方式在master节点上创建，你可以在/etc/kubernetes/manifests/这里找到他们的配置</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 ~]<span class="comment"># ll /etc/kubernetes/manifests/</span></span><br><span class="line">total 16</span><br><span class="line">-rw------- 1 root root 1848 Aug 25 16:28 etcd.yaml</span><br><span class="line">-rw------- 1 root root 2709 Aug 25 16:28 kube-apiserver.yaml</span><br><span class="line">-rw------- 1 root root 2564 Aug 25 16:33 kube-controller-manager.yaml</span><br><span class="line">-rw------- 1 root root 1120 Aug 25 16:33 kube-scheduler.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞04pod钩子函数</title>
      <link href="2020/08/26/k8s%E2%98%9E04pod%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
      <url>2020/08/26/k8s%E2%98%9E04pod%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在实际工作中，可能会遇到容器程序的准备工作，以及容器结束之前的处理工作。比如，容器开始之前下载一些包，或者容器结束之前上传日志等。</p><p>k8s 给我们提供了两个函数用于处理这些工作，分别是 postStart和 preStop</p><h2 id="postStart"><a href="#postStart" class="headerlink" title="postStart"></a>postStart</h2><ol><li>它将在容器创建后立即运行，但不保证在 ENTRYPOINT 之前运行</li><li>它是同步状态，如果它卡住，pod 无法达到 running 状态</li><li>它位于容器 lifecycle 中</li></ol><p>示例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">poststart-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">poststart-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo This is postStart-test &gt; /usr/share/nginx/html/index.html&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 ~]<span class="comment"># kubectl apply -f poststart-test.yaml</span></span><br><span class="line">pod/poststart-test created</span><br><span class="line">[root@k8s00 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME             READY   STATUS              RESTARTS   AGE   IP       NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">poststart-test   0/1     ContainerCreating   0          7s    &lt;none&gt;   k8s02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8s00 ~]<span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE   IP          NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">poststart-test   1/1     Running   0          10s   10.97.2.6   k8s02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8s00 ~]<span class="comment"># curl 10.97.2.6</span></span><br><span class="line">This is postStart-test</span><br></pre></td></tr></table></figure><h2 id="preStop"><a href="#preStop" class="headerlink" title="preStop"></a>preStop</h2><ol><li>它将在容器结束之前运行</li><li>它是同步的，如果它卡住，pod 将停留在 running 状态，无法达到 failed 状态</li><li>它位于容器 lifecycle 中</li></ol><p>示例：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prestop-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prestop-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prestop-test-tmp</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo This is preStop &gt; /usr/share/message&quot;</span>]</span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prestop-test-tmp</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s00 ~]<span class="comment"># kubectl delete pod prestop-test</span></span><br><span class="line"><span class="comment"># 这里 prestop-test 被调度到 k8s02</span></span><br><span class="line">[root@k8s02 ~]<span class="comment"># cat /tmp/message</span></span><br><span class="line">This is preStop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞02v1.18.6安装</title>
      <link href="2020/08/25/k8s%E2%98%9E02v1.18.6%E5%AE%89%E8%A3%85/"/>
      <url>2020/08/25/k8s%E2%98%9E02v1.18.6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文编写的时候，官方已经到了1.18.8，但是鉴于国内环境，非官方源没找到1.18.8，所以最后用的1.18.6<br>另外，文中出现的宿主机ip，请自行修改为自己的环境ip</p><h2 id="以下命令在所有节点上运行"><a href="#以下命令在所有节点上运行" class="headerlink" title="以下命令在所有节点上运行"></a>以下命令在所有节点上运行</h2><ol><li><p>时间同步</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install chrony -y</span><br><span class="line">sed -i  <span class="string">&#x27;1a server cn.pool.ntp.org prefer iburst&#x27;</span> /etc/chrony.conf</span><br><span class="line">systemctl restart chronyd</span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line">chronyc activity</span><br></pre></td></tr></table></figure></li><li><p>系统配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载模块</span></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="comment"># 添加配置</span></span><br><span class="line">cat &gt; /etc/sysctl.d/99-kubernetes-cri.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">net.ipv4.ip_forward                 = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 配置生效</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空防火墙</span></span><br><span class="line">systemctl stop firewalld.service iptables.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> iptables.service;</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s@^\(SELINUX=\).*@\1disabled@&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">sed -i <span class="string">&#x27;s@^\(SELINUX=\).*@\1disabled@&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 swap，kubelet 1.18 要求.如果你fstab也有，请一并注释</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ipvs</span></span><br><span class="line">yum install ipvsadm -y</span><br><span class="line">ipvsadm --clear</span><br><span class="line">cat&gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">ipvs_mods_dir=<span class="string">&quot;/usr/lib/modules/<span class="subst">$(uname -r)</span>/kernel/net/netfilter/ipvs&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls <span class="variable">$ipvs_mods_dir</span> | grep -o <span class="string">&quot;^[^.]*&quot;</span>); <span class="keyword">do</span></span><br><span class="line">    /sbin/modinfo -F filename <span class="variable">$i</span>  &amp;&gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        /sbin/modprobe <span class="variable">$i</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOF</span><br><span class="line">chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">/etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure></li><li><p>安装 docker</p><blockquote><p><a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#docker">https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/#docker</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="comment"># 安装兼容k8s的docker版本</span></span><br><span class="line">yum install -y \</span><br><span class="line">  containerd.io-1.2.13 \</span><br><span class="line">  docker-ce-19.03.11 \</span><br><span class="line">  docker-ce-cli-19.03.11</span><br><span class="line"><span class="comment">#sed -i &#x27;/ExecStart=/a ExecStartPort=/usr/sbin/iptables -P FORWARD ACCEPT&#x27; /usr/lib/systemd/system/docker.service;</span></span><br><span class="line">mkdir -p /etc/docker;</span><br><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/export/docker-data-root&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;storage-opts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>安装 kubelet kubeadm kubectl</p><blockquote><p>阿里巴巴镜像点：</p><p><a href="https://developer.aliyun.com/mirror/kubernetes">https://developer.aliyun.com/mirror/kubernetes</a></p><p>google 官方安装文档 <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">   [kubernetes]</span><br><span class="line">   name=Kubernetes</span><br><span class="line">   baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">   enabled=1</span><br><span class="line">   gpgcheck=1</span><br><span class="line">   repo_gpgcheck=1</span><br><span class="line">   gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">   exclude=kubelet kubeadm kubectl</span><br><span class="line">   EOF</span><br><span class="line">   <span class="comment"># 确定 kube* 版本</span></span><br><span class="line">   yum list kube* --showduplicates | sort -r </span><br><span class="line">   <span class="comment"># 选择要安装的版本</span></span><br><span class="line">   Version=1.18.6</span><br><span class="line">   <span class="comment"># 安装 kube 管理组件和 kubelet</span></span><br><span class="line">   yum install -y kubelet-<span class="variable">$&#123;Version&#125;</span> kubeadm-<span class="variable">$&#123;Version&#125;</span> kubectl-<span class="variable">$&#123;Version&#125;</span> --disableexcludes=kubernetes</span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><blockquote><p>kubelet 1.18 的时候，当你使用 docker 的时候，kubeadm 会通过 kubelet 自动设置 cgroup 和 docker 一致。</p></blockquote></li></ol><h2 id="以下命令在-master-节点运行"><a href="#以下命令在-master-节点运行" class="headerlink" title="以下命令在 master 节点运行"></a>以下命令在 master 节点运行</h2><ol><li><p>初始化 master 节点</p><blockquote><p>info: <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鉴于网络问题，所以国内一般无法直接运行初始化命令，因此最好先自行安装好包</span></span><br><span class="line"><span class="comment"># 查看对应版本 k8s 所需包</span></span><br><span class="line">kubeadm config images list --kubernetes-version=1.18.6</span><br><span class="line"><span class="comment"># 运行下列脚本安装所需的包</span></span><br><span class="line"><span class="comment"># ---------------------我是脚本开头--------------------</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># kubeadm config images list</span></span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.18.6</span><br><span class="line">kube-controller-manager:v1.18.6</span><br><span class="line">kube-scheduler:v1.18.6</span><br><span class="line">kube-proxy:v1.18.6</span><br><span class="line">pause:3.2</span><br><span class="line">etcd:3.4.3-0</span><br><span class="line">coredns:1.6.7</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    docker pull mirrorgooglecontainers/<span class="variable">$&#123;imageName&#125;</span></span><br><span class="line">    docker tag mirrorgooglecontainers/<span class="variable">$&#123;imageName&#125;</span> k8s.gcr.io/<span class="variable">$&#123;imageName&#125;</span></span><br><span class="line">    docker rmi mirrorgooglecontainers/<span class="variable">$&#123;imageName&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------我是脚本结尾--------------------</span></span><br><span class="line"><span class="comment"># 如果某些包无法下载，则需自行去 dockerhub 上找，并在下载完毕后，添加 k8s 自己的 tags，例如 coredns</span></span><br><span class="line"><span class="comment">#docker pull coredns/coredns:1.6.7 &amp;&amp; docker tag coredns/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7 &amp;&amp; docker rmi coredns/coredns:1.6.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数初始化模式</span></span><br><span class="line">kubeadm init --kubernetes-version=1.18.6  \</span><br><span class="line">--apiserver-advertise-address=10.200.16.100   \</span><br><span class="line">--service-cidr=10.96.0.0/16 --pod-network-cidr=10.97.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件初始化模式</span></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm.yaml</span><br><span class="line"><span class="comment"># 修改以下配置：</span></span><br><span class="line"> advertiseAddress: <span class="comment"># apiserver 节点内网IP</span></span><br><span class="line"> <span class="built_in">type</span>: CoreDNS  <span class="comment"># dns类型</span></span><br><span class="line"> kubernetesVersion: v1.18.6  <span class="comment"># k8s版本</span></span><br><span class="line"> podSubnet: 10.97.0.0/16</span><br><span class="line"> serviceSubnet: 10.96.0.0/16</span><br><span class="line"><span class="comment"># 追加 ipvs 配置</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs  <span class="comment"># kube-proxy 模式</span></span><br><span class="line"><span class="comment"># 进行初始化</span></span><br><span class="line">kubeadm init --config kubeadm.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录初始化生成的命令，特别是最后的 kubeadm join</span></span><br></pre></td></tr></table></figure></li><li><p>配置通过kubectl访问集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="comment"># kubectl 命令补全</span></span><br><span class="line"><span class="built_in">source</span> &lt;(kubectl completion bash)</span><br><span class="line"></span><br><span class="line"><span class="comment"># You should now deploy a pod network to the cluster.</span></span><br><span class="line"><span class="comment"># Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br></pre></td></tr></table></figure></li><li><p>调整 kube-controller-manager 和 scheduler 的配置.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你可能会发现，此时用 kubectl get cs 会出现服务连接拒绝问题</span></span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line"><span class="comment"># 原因是这两个服务配置默认端口是0。至于为啥就不晓得了</span></span><br><span class="line"><span class="comment"># 你需要注释掉两个配置里的端口（- --port=0），恢复为默认端口</span></span><br><span class="line">sed -i <span class="string">&#x27;/- --port=0/d&#x27;</span> /etc/kubernetes/manifests/kube-scheduler.yaml</span><br><span class="line">sed -i <span class="string">&#x27;/- --port=0/d&#x27;</span> /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line"><span class="comment"># 重启 kubelet</span></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li><li><p>添加网络插件</p><p>网络插件常用的有两种，</p><p>第一种是 flannel，涉及到更多的 iptables 规则</p><p>第二种是 calico，涉及到更多的路由规则</p><ul><li>flannel</li></ul><blockquote><p><a href="https://github.com/coreos/flannel">https://github.com/coreos/flannel</a> 代码托管地址</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"><span class="comment"># 修改里面的 &quot;Network&quot;: &quot;10.244.0.0/16&quot;, 变更为你自己的 pod 网段</span></span><br><span class="line">kubectl apply -f  kube-flannel.yml</span><br></pre></td></tr></table></figure><ul><li>calico</li></ul><blockquote><p><a href="https://docs.projectcalico.org/getting-started/kubernetes/quickstart">https://docs.projectcalico.org/getting-started/kubernetes/quickstart</a> 安装文档</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/tigera-operator.yaml</span><br><span class="line">wget https://docs.projectcalico.org/manifests/custom-resources.yaml</span><br><span class="line"><span class="comment"># custom-resources.yaml 修改里面的网络为 pod 网段</span></span><br><span class="line">kubectl apply -f custom-resources.yaml</span><br></pre></td></tr></table></figure><blockquote><p>注意，当你使用了 calico 后， 会生成一些 cni 的配置，这些配置会导致你返回 flannel 的时候出现问题。例如无法创建 cni </p><p>你可以使用 find / -name ‘*calico*‘ 找到所有信息，然后都删除</p></blockquote></li><li><p>默认kubeadm安装完后，禁止调度pod到master上</p></li><li><p>添加web控制台</p><blockquote><p><a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a> 代码托管地址</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml &amp;&amp; mv recommended.yaml kubernetes-dashboard.yaml</span><br><span class="line"><span class="comment"># 这里我们要修改一些东西</span></span><br><span class="line"><span class="comment"># 默认控制台的 svc 配置类型不是 NodePort，这会导致我们无法直接通过宿主机ip访问，这里我们为了方便，将 dashboard 的 svc 加入NodePort类型</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment"># 还需要修改一下部署的位置，如果你集群中已经加入了多个节点，则会导致 pod 分发到其它节点上。这里我们强制分发到 master 上. 找到 kind: Deployment 配置，并修改两个 pod 的分发位置为 nodeName: &lt;master 节点主机名&gt;</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line">    spec:</span><br><span class="line">      nodeName: k8s00</span><br><span class="line">      containers:</span><br><span class="line">        - name: kubernetes-dashboard</span><br><span class="line">          image: kubernetesui/dashboard:v2.0.3</span><br><span class="line">          </span><br><span class="line">    spec:</span><br><span class="line">      nodeName: k8s00</span><br><span class="line">      containers:</span><br><span class="line">        - name: dashboard-metrics-scraper</span><br><span class="line">          image: kubernetesui/metrics-scraper:v1.0.4          </span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="comment"># 然后创建</span></span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加访问 token</span></span><br><span class="line"><span class="comment"># 官方文档： https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</span></span><br><span class="line"><span class="comment"># 通过下面内容创建 kube-db-auth.yaml</span></span><br><span class="line">cat &gt; kube-db-auth.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f kube-db-auth.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过下面命令拿到 token</span></span><br><span class="line">kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 https://&lt;masterip&gt;:30001 访问</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="以下命令在非master节点执行"><a href="#以下命令在非master节点执行" class="headerlink" title="以下命令在非master节点执行"></a>以下命令在非master节点执行</h2><ol><li><p>节点加入集群的命令</p><blockquote><p>加入命令，位于 master 初始化命令尾部</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.200.16.100:6443 --token abcdef.827 \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:681d6529ebcd1acaec488c842b42222838</span><br><span class="line"><span class="comment"># 如果忘记了 token</span></span><br><span class="line">kubeadm token list</span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="kubectl-命令文档"><a href="#kubectl-命令文档" class="headerlink" title="kubectl 命令文档"></a>kubectl 命令文档</h2><blockquote><p><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询集群网络的app</span></span><br><span class="line">kubectl run -it --rm --restart=Never --image=infoblox/dnstools:latest dnstools</span><br></pre></td></tr></table></figure><h2 id="删除与清理"><a href="#删除与清理" class="headerlink" title="删除与清理"></a>删除与清理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master 删除所有 work node</span></span><br><span class="line">kubectl get node | awk <span class="string">&#x27;FNR!=1&#123;print $1&#125;&#x27;</span> | <span class="keyword">while</span> <span class="built_in">read</span> node;<span class="keyword">do</span> </span><br><span class="line">kubectl drain <span class="variable">$node</span>  --delete-local-data --force --ignore-daemonsets;</span><br><span class="line">kubectl delete node <span class="variable">$node</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有节点清理</span></span><br><span class="line">yes | kubeadm reset;</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br><span class="line">ipvsadm --clear;</span><br><span class="line">ip link <span class="built_in">set</span> cni0 down &amp;&amp; ip link delete cni0;</span><br><span class="line">ip link <span class="built_in">set</span> flannel.1 down &amp;&amp; ip link delete flannel.1;</span><br><span class="line">ip link <span class="built_in">set</span> kube-ipvs0 down &amp;&amp; ip link delete kube-ipvs0;</span><br><span class="line">ip link <span class="built_in">set</span> dummy0 down &amp;&amp; ip link delete dummy0;</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf <span class="variable">$HOME</span>/.kube;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -------我是分割线------</span></span><br><span class="line"><span class="comment"># 删除某个 work node</span></span><br><span class="line"><span class="comment"># master exec</span></span><br><span class="line">kubectl drain &lt;NODE_ID&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;NODE_ID&gt;</span><br><span class="line"><span class="comment"># worker exec</span></span><br><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><hr><h1 id="以下文档还未更新，属于老文档-请无视"><a href="#以下文档还未更新，属于老文档-请无视" class="headerlink" title="以下文档还未更新，属于老文档,  请无视"></a>以下文档还未更新，属于老文档,  请无视</h1><h2 id="构建高可用的-master-节点"><a href="#构建高可用的-master-节点" class="headerlink" title="构建高可用的 master 节点"></a>构建高可用的 master 节点</h2><blockquote><p> 文档: <a href="https://kubernetes.io/docs/setup/independent/high-availability/">https://kubernetes.io/docs/setup/independent/high-availability/</a></p></blockquote><ol><li><p>构建负载软件, 比如 haproxy, 并将其转发到所有 master 的 apiserver </p></li><li><p>修改主 master 的 kubeadm-config.yaml 中以下键值:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: stable</span><br><span class="line">apiServer:</span><br><span class="line">  certSANs:</span><br><span class="line">  - &quot;LOAD_BALANCER_DNS&quot;</span><br><span class="line">controlPlaneEndpoint: &quot;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&quot;</span><br></pre></td></tr></table></figure></li><li><p>初始化主 master, 并将证书复制到其它 master 节点上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER&#x3D; # 修改为免密免证书用户</span><br><span class="line">CONTROL_PLANE_IPS&#x3D;&quot;&quot; # 修改为其它 master 节点</span><br><span class="line">for host in $&#123;CONTROL_PLANE_IPS&#125;; do</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.crt &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;ca.key &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.key &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;sa.pub &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.key &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt &quot;$&#123;USER&#125;&quot;@$host:etcd-ca.crt</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.key &quot;$&#123;USER&#125;&quot;@$host:etcd-ca.key</span><br><span class="line">    scp &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf &quot;$&#123;USER&#125;&quot;@$host:</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>在其它 master 节点上, 将证书从用户家目录移至工作目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USER&#x3D;ubuntu # customizable</span><br><span class="line">mkdir -p &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;ca.crt &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;ca.key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;sa.pub &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;sa.key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;front-proxy-ca.crt &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;front-proxy-ca.key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;etcd-ca.crt &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;etcd-ca.key &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.key</span><br><span class="line">mv &#x2F;home&#x2F;$&#123;USER&#125;&#x2F;admin.conf &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</span><br></pre></td></tr></table></figure></li><li><p>使用主 master 初始化的 kubeadm join 命令将其它 master 加入到主 master 里</p><blockquote><p>注意需要追加 experimental-control-plane 参数, 用于自动将此 master 连接到集群</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;ca cert hash&gt; &lt;apiserver:6443&gt; --experimental-control-plane</span><br></pre></td></tr></table></figure></li><li><p>观察 kube-system 命名空间中 etcd pod 的状态</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n kube-system -w</span><br></pre></td></tr></table></figure></li></ol><h2 id="节点一致性测试"><a href="#节点一致性测试" class="headerlink" title="节点一致性测试"></a>节点一致性测试</h2><blockquote><p><a href="https://kubernetes.io/docs/setup/node-conformance/">https://kubernetes.io/docs/setup/node-conformance/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞记录点</title>
      <link href="2020/08/25/k8s%E2%98%9E%E8%AE%B0%E5%BD%95%E7%82%B9/"/>
      <url>2020/08/25/k8s%E2%98%9E%E8%AE%B0%E5%BD%95%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<ol><li><p>pv和pvc的绑定关系是终生的. 也就是说你删除了当前pvc, pv依然不能被其它pvc所绑定.</p><p>删除pvc后, pv的状态将从bound转为Released.</p><p>如果你想让pv从新绑定到原来的pvc上, 则需要两个步骤:</p><ol><li>先创建原来的pvc. </li><li>删除当前pv并重新创建, 或者修改当前pv的配置, 删除spec.claimRef信息.</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ server安装注意事项</title>
      <link href="2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<ol><li><p>数据库编码一定要安装官方来命令来设置，例如zabbix5编码是 utf8和utf8_bin</p></li><li><p>最后web控制台安装界面，要确保zabbix-server可以访问设置的 hostname 的 10051 端口。如果hostname写的域名，那么要确保zabbix-server可以通过 hosts本地解析或者外网访问10051端口</p></li><li><p>zabbix-server 的 agent 要使用拉取模式，因为官方给的模板无法直接修正为推流模式</p></li><li><p>报警媒介设置</p><p>脚本设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">脚本参数</span><br><span class="line">&#123;ALERT.SENDTO&#125;</span><br><span class="line">&#123;ALERT.SUBJECT&#125;</span><br><span class="line">&#123;ALERT.MESSAGE&#125;</span><br></pre></td></tr></table></figure><p>问题模板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">故障: &#123;TRIGGER.NAME&#125;</span><br><span class="line"></span><br><span class="line">【[骷髅]】=》&#123;TRIGGER.SEVERITY&#125; 事件ID : &#123;EVENT.ID&#125;</span><br><span class="line">【UTC+0】: &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">【告警等级】: &#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">【主机信息1】: &#123;HOST.NAME&#125;</span><br><span class="line">【主机信息2】: &#123;HOSTNAME1&#125;</span><br><span class="line">【告警信息】: &#123;TRIGGER.NAME&#125;</span><br><span class="line">【告警项目】: &#123;TRIGGER.KEY1&#125;</span><br><span class="line">【问题详情】: &#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">【当前状态】: &#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br></pre></td></tr></table></figure><p>恢复模板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">恢复: &#123;TRIGGER.NAME&#125;</span><br><span class="line"></span><br><span class="line">【[OK]】=》&#123;TRIGGER.SEVERITY&#125; 事件ID : &#123;EVENT.ID&#125;</span><br><span class="line">【UTC+0】: &#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line">【告警等级】: &#123;TRIGGER.SEVERITY&#125;</span><br><span class="line">【主机信息1】: &#123;HOST.NAME&#125;</span><br><span class="line">【主机信息2】: &#123;HOSTNAME1&#125;</span><br><span class="line">【告警信息】: &#123;TRIGGER.NAME&#125;</span><br><span class="line">【告警项目】: &#123;TRIGGER.KEY1&#125;</span><br><span class="line">【问题详情】: &#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line">【当前状态】: &#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br></pre></td></tr></table></figure></li><li><p>预警用户添加超管权限</p></li><li><p>中文字体</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install google-noto-sans-simplified-chinese-fonts.noarch -y</span><br><span class="line">rm -rf /etc/alternatives/zabbix-web-font</span><br><span class="line">ln -s /usr/share/fonts/google-noto/NotoSansSC-Regular.otf /etc/alternatives/zabbix-web-font</span><br></pre></td></tr></table></figure></li></ol><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins☞从容器中访问宿主机docker命令</title>
      <link href="2020/06/09/jenkins%E2%98%9E%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAdocker%E5%91%BD%E4%BB%A4/"/>
      <url>2020/06/09/jenkins%E2%98%9E%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAdocker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的jenkins是运行在docker中，但是jenkins官方的镜像里却没有docker命令。</p><p>以至于无法在流水线中打包docker镜像。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先，需要将docker命令、docker.sock文件以及相关依赖文件映射到容器内。</p><p>其次，以root用户访问容器，在容器中添加docker组，并且组id需要和宿主机中的docker组id一致。</p><p>最后，以root用户访问容器，并将jenkins用户加入到容器中的docker组中。</p><p>最最后，最关键的来了， 一定要重启一下 jenkins 容器。。。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 额外的映射文件（宿主机文件和容器内的映射路径，以实际情况为准）</span></span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以 root 用户访问 jenkins 容器（宿主机的组ID以实际情况为准）</span></span><br><span class="line">docker <span class="built_in">exec</span> -it -u root jenkins /bin/bash</span><br><span class="line">groupadd -g xxx docker</span><br><span class="line">usermod -aG docker jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 jenkins 容器</span></span><br><span class="line">docker stop jenkins &amp;&amp; docker start jenkins</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在容器内执行的 groupadd 和 usermod 命令，需要在每次变更容器镜像后，重新执行，因为命令的相关结果都是容器内数据，清理后不会保留。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/">jenkins☞安装和基本配置</a></li><li><a href="https://blog.themismin.com/posts/1363d69a.html">运维-Jeknins安装</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux☞ssh-MFA自动登陆</title>
      <link href="2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/"/>
      <url>2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ssh 关联MFA后,安全度增加了很多,但是每次手动输入MFA动态口令比较麻烦.所以记录一下自动交互输入MFA口令</p><h2 id="命令安装"><a href="#命令安装" class="headerlink" title="命令安装"></a>命令安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install oathtool gnupg2 expect</span><br></pre></td></tr></table></figure><blockquote><p>oathtool 是我们用来生成MFA口令的工具.</p><p>expect 用来编写交互程序</p></blockquote><h2 id="登陆交互脚本"><a href="#登陆交互脚本" class="headerlink" title="登陆交互脚本"></a>登陆交互脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> timeout 5</span><br><span class="line"><span class="built_in">set</span> MFAToken <span class="string">&quot;我是MFA的TOKEN&quot;</span></span><br><span class="line">spawn 我是ssh命令</span><br><span class="line">expect <span class="string">&quot;MFA auth&quot;</span></span><br><span class="line">send <span class="string">&quot;[exec oathtool -b --totp <span class="variable">$MFAToken</span>]\r&quot;</span>;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><blockquote><p>将脚本中的TOKEN和命令替换为自己的.</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果你发现你登陆不了, 每次都验证错误, 那么你应该检查下你机器的时间是否正常.</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://zyh.cool/2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/">linux☞时间</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
            <tag> mfa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk☞安装和配置</title>
      <link href="2020/06/01/jdk%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>2020/06/01/jdk%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>oracle jdk 现在是商业产品了, 所以线上最好还是用 openjdk.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://adoptopenjdk.net/installation.html#linux-pkg">https://adoptopenjdk.net/installation.html#linux-pkg</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> MANPATH=<span class="variable">$JAVA_HOME</span>/man</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx☞fcgi中alias的使用</title>
      <link href="2020/05/27/nginx%E2%98%9Efcgi%E4%B8%ADalias%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/05/27/nginx%E2%98%9Efcgi%E4%B8%ADalias%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知, nginx 在配置静态资源的时候, root 和 alias 分别是两种指定资源路径的方式.</p><p>如果 url 是 <code>http://xxx.com/god/a.jpg</code>, location 匹配的是 <code>/god/</code>.</p><p>则当用 root 定位资源路径时, root 指的就是 xxx.com 所对应的路径, 此时 a.jpg 的物理路径就是  $root/god/a.jpg</p><p>当用 alias 定位资源路径时, alias 指的 xxx.com/god/ 所对应的路径, 此时 a.jpg 的物理路径就是 ${alias}a.jpg</p><p>即</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ^~ /god/ &#123;</span><br><span class="line">    root /<span class="built_in">export</span>/webapps/xxx.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">location ^~ /god/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /<span class="built_in">export</span>/webapps/xxx.com/god/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后问题出现了. 当我采用上述规则,去配置fcgi的时候,现实给了我暴击…妥妥的404了.</p><h2 id="在fcgi环境下-alias-的配置"><a href="#在fcgi环境下-alias-的配置" class="headerlink" title="在fcgi环境下, alias 的配置"></a>在fcgi环境下, alias 的配置</h2><p>废话不多说, 直接上结果.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ^~ /god/ &#123;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line">    <span class="built_in">alias</span> /<span class="built_in">export</span>/webapps/xxx.com/god/;</span><br><span class="line">    location ~* <span class="string">&quot;\.php$&quot;</span> &#123;</span><br><span class="line">        try_files      <span class="variable">$uri</span> =404;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        include        fastcgi.conf;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  <span class="variable">$request_filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>官方的例子:</p><p><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#use-request-filename-for-script-filename">https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#use-request-filename-for-script-filename</a></p></blockquote><p>这里, 当你用 alias 而不是 root 的时候, 你需要将 $document_root$fastcgi_script_name 替换成 $request_filename. </p><p>假设你访问 /god/api.php, 而这个文件的物理路径是 /export/webapps/xxx.com/god/api.php</p><p>但是 $document_root$fastcgi_script_name 指的是 /export/webapps/xxx.com/god//god/api.php, 这是不对的.</p><p>此时 $request_filename 指的是 /export/webapps/xxx.com/god/api.php.</p><p>其次, 当你使用了 $request_filename 的时候, 则 fastcgi_index 将无法正常工作, 因此你需要显式的指定 index. 即:</p><p>index  index.php index.html index.htm;</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> fcgi </tag>
            
            <tag> php </tag>
            
            <tag> alias </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞角色</title>
      <link href="2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/"/>
      <url>2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>角色的作用就是规范化，将一个playbook各部分分门别类的放置在规定好的目录中。就如同linux系统一样，/etc/就是放配置的，/bin 就是放程序的，/tmp 就是放临时文件的 ……</p><p>ansible 会基于官方规定好的目录结构, 去自动加载目录中的文件. 当一个需求很复杂的时候, 我们就可以基于角色对需求进行分组. </p><p>最后, 如果你不按照这个规定来走, 那么ansible角色模块就找不到相关东西.</p><h2 id="角色结构"><a href="#角色结构" class="headerlink" title="角色结构"></a>角色结构</h2><p>这是一个官方项目的例子</p><blockquote><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#">https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#</a>  官方文档</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">site.yml</span><br><span class="line">webservers.yml</span><br><span class="line">fooservers.yml</span><br><span class="line">roles/</span><br><span class="line">    common/</span><br><span class="line">        tasks/</span><br><span class="line">        handlers/</span><br><span class="line">        files/</span><br><span class="line">        templates/</span><br><span class="line">        vars/</span><br><span class="line">        defaults/</span><br><span class="line">        meta/</span><br><span class="line">    webservers/</span><br><span class="line">        tasks/</span><br><span class="line">        defaults/</span><br><span class="line">        meta/</span><br></pre></td></tr></table></figure><p>例子中，common 和 webservers 就是两个角色<br>关于角色的目录，必须包含下面列举出来的目录之一，目录可以为空。但是如果你使用到了某个目录，那么部分目录需要包含main.yml文件。</p><ul><li>tasks 角色用到的主要任务列表</li><li>handlers 角色或者角色外用到的任务后续处理</li><li>defaults 角色默认变量</li><li>vars 角色其余变量，优先级大于 defaults 中定义的变量</li><li>files 角色部署中牵扯到的文件</li><li>templates 角色的jinja2模板</li><li>meta 角色的元数据信息，例如角色的属性(作者, 说明, 一些特殊功能等)</li></ul><p>最后，目录中main.yml用来存储主配置信息。在这里，你可以包含其它的子任务，在子任务中详细描述。<br>例如，在 tasks/main.yml 中，通过 import_tasks，包含其它子任务，就像下面这样</p><blockquote><p>main 包含 redhat 和 debian。当系统是 redhat 时，安装 httpd 包，当系统是 debian 时，安装 apache2 包</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># roles/xxx/tasks/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">added</span> <span class="string">in</span> <span class="number">2.4</span><span class="string">,</span> <span class="string">previously</span> <span class="string">you</span> <span class="string">used</span> <span class="string">&#x27;include&#x27;</span></span><br><span class="line">  <span class="attr">import_tasks:</span> <span class="string">redhat.yml</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansible_facts[&#x27;os_family&#x27;]|lower</span> <span class="string">==</span> <span class="string">&#x27;redhat&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_tasks:</span> <span class="string">debian.yml</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansible_facts[&#x27;os_family&#x27;]|lower</span> <span class="string">==</span> <span class="string">&#x27;debian&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/xxx/tasks/redhat.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">yum:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;httpd&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/xxx/tasks/debian.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apt:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&quot;apache2&quot;</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><h2 id="使用角色"><a href="#使用角色" class="headerlink" title="使用角色"></a>使用角色</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># file: site.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">webservers.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">fooservers.yml</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># file: webservers.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">webservers</span></span><br></pre></td></tr></table></figure><p>只运行 webservers 角色，可以通过 site.yml 添加 limit 限制执行，也可以直接调用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook site.yml --<span class="built_in">limit</span> webservers</span><br><span class="line">ansible-playbook webservers.yml</span><br></pre></td></tr></table></figure><h2 id="角色优先级"><a href="#角色优先级" class="headerlink" title="角色优先级"></a>角色优先级</h2><p>角色中针对 tasks, handlers, vars 有一个优先级概念. 优先级大的会覆盖掉优先级小的配置.</p><p>优先级由大到小如下:</p><p><code>cli 层面参数 &gt; role-xxx-dir &gt; playbook-xxx &gt; role-defaults-dir</code></p><p>这里 cli 层面参数指的是 ansible-playbook -e vara=’a’ test.play 这种外部传递变量的行为</p><p>这里 role-xxx-dir 指的是 role 特定目录里的配置, 例如 tasks, handlers, vars</p><p>这里 playbook-xxx 指的是直接写入 ploybook 中的部分</p><p>这里 role-defaults-dir 指的是角色目录中的 defaults 默认变量目录</p><h2 id="角色复制"><a href="#角色复制" class="headerlink" title="角色复制"></a>角色复制</h2><p>如果你想让一个角色多次执行，就如同下面这样</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">moo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">moo</span></span><br></pre></td></tr></table></figure><p>有下列两种方式:</p><ol><li>moo，拥有不同的参数</li><li>将<code>allow_duplicates: true</code>写入 moo/meta/main.yml</li></ol><h2 id="角色标签"><a href="#角色标签" class="headerlink" title="角色标签"></a>角色标签</h2><p>我们一定要针对角色中的tasks添加标签(tags). 原因在于, 有些时候, 当我们只想修改部署很久的一堆机器的某个服务时, 我们只需要在执行角色的 playbook 的时候,追加 –tags 即可帮助我们执行项目中某一个任务，而不必执行所有任务.</p><p>比如, 我们有个部署项目, 其中有一个初始化角色( common ). common 中有众多的初始化任务, 其中一个任务是 ntp 服务的 安装/配置/启动/重启 . </p><p>ntp 服务配置如下: </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># file: roles/common/tasks/main.yml</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">be</span> <span class="string">sure</span> <span class="string">ntp</span> <span class="string">is</span> <span class="string">installed</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">pkg=ntp</span> <span class="string">state=installed</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ntp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">be</span> <span class="string">sure</span> <span class="string">ntp</span> <span class="string">is</span> <span class="string">configured</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">src=ntp.conf.j2</span> <span class="string">dest=/etc/ntp.conf</span></span><br><span class="line">  <span class="attr">notify:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">restart</span> <span class="string">ntpd</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ntp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">be</span> <span class="string">sure</span> <span class="string">ntpd</span> <span class="string">is</span> <span class="string">running</span> <span class="string">and</span> <span class="string">enabled</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=ntpd</span> <span class="string">state=running</span> <span class="string">enabled=yes</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">ntp</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># file: roles/common/handlers/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">ntpd</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=ntpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><p>现在, 我们只想修改生产环境的 ntp 服务的配置, 那么只需要将 ntp.conf.j2 模板配置好之后, 重新执行这个playbooks即可. 就想下面这样:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i production site.yml --tags ntp</span><br></pre></td></tr></table></figure><h2 id="写好的playbook"><a href="#写好的playbook" class="headerlink" title="写好的playbook"></a>写好的playbook</h2><p><a href="https://galaxy.ansible.com/">https://galaxy.ansible.com/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-include/">ansible☞playbook-include</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞模板</title>
      <link href="2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你用ansible进行多机器的配置调整，且调整的东西都一模一样，此时你不会拒绝模板的诱惑。</p><p>ansible的模板是jinja2，所以jinja2的特性，在这里都可以用。</p><blockquote><p>模板中，不要出现任何你觉得模板会忽略的东西，包括但不限于空格</p></blockquote><h2 id="模块-template"><a href="#模块-template" class="headerlink" title="模块 template"></a>模块 template</h2><p>参数：</p><ul><li>src 模板文件路径</li><li>dest 目的文件路径</li></ul><p>牵扯到目的路径，必然有权限参数</p><ul><li>owner 目的属主</li><li>group 目的属组</li><li>mode 目的权限</li></ul><p>覆盖与备份</p><ul><li>force 覆盖，yes / no</li><li>backup 备份， yes / no ， 若为 yes ，则目的重名文件会先改名</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">~/test.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">~/test.info</span></span><br></pre></td></tr></table></figure><h2 id="模板分隔符"><a href="#模板分隔符" class="headerlink" title="模板分隔符"></a>模板分隔符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 一般用来填充变量，可以是过滤器，也可以填充表达式，从而返回相应的值，例如 &#123;&#123; 1==1 &#125;&#125; 返回 True</span><br><span class="line">&#123;% %&#125; 一般用来填充控制语句</span><br><span class="line">&#123;<span class="comment"># #&#125; 模板注释语句，并非渲染后会出现</span></span><br><span class="line"><span class="comment">#  ... ## 这一种 ansible 貌似不支持，所以可以忽略</span></span><br></pre></td></tr></table></figure><h3 id="分隔符1"><a href="#分隔符1" class="headerlink" title="分隔符1"></a>分隔符1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#123;&#123; &#125;&#125;</span><br><span class="line">&#123;# 普通变量 #&#125;</span><br><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line">&#123;&#123; foo[&#39;bar&#39;] &#125;&#125;</span><br><span class="line">&#123;# 以过滤器 lookup 为例 #&#125;</span><br><span class="line">&#123;&#123; lookup(&#39;file&#39;, &#39;~&#x2F;test.file&#39;) &#125;&#125;</span><br><span class="line">&#123;&#123; lookup(&#39;env&#39;, &#39;PATH&#39; )&#125;&#125;</span><br></pre></td></tr></table></figure><p>最终目的文件，会输出<code>~/test.file</code> 内容和 <code>$PATH</code> 内容</p><blockquote><p>字符串拼接需要使用<code>~</code>，例如 <code>&quot;name:&quot;~name</code></p></blockquote><h3 id="分隔符2"><a href="#分隔符2" class="headerlink" title="分隔符2"></a>分隔符2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;% %&#125;</span></span><br><span class="line"><span class="comment"># 官网所有的控制列表</span></span><br><span class="line">https://jinja.palletsprojects.com/en/master/templates/<span class="comment">#list-of-control-structures</span></span><br></pre></td></tr></table></figure><h4 id="条件控制语句-if"><a href="#条件控制语句-if" class="headerlink" title="条件控制语句 if"></a>条件控制语句 if</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if 条件1 %&#125;</span><br><span class="line">  pass</span><br><span class="line">&#123;% elif 条件2 %&#125;</span><br><span class="line">  pass</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  pass </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句 for"></a>循环语句 for</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in 可迭代对象 %&#125;</span><br><span class="line">  &#123;&#123; i &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认循环后，每一个循环单体独占一行，如果需要删除独占，则需要给第二个%}和第三个控制符{%加减号，最终变为-%}和{%-。</p></blockquote><p>关于字典类型，可以使用 iteritems() 函数，从而方便的获取到字典的 k 和 v。例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for k,v in &#123;&#39;name&#39;:&#39;zhangsan&#39;, &#39;gender&#39;:&#39;male&#39;&#125;.iteritems() %&#125;</span><br><span class="line">  &#123;&#123; k &#125;&#125;:&#123;&#123; v &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">name:zhangsan</span><br><span class="line">gender:male</span><br></pre></td></tr></table></figure><h4 id="条件和循环组合语句"><a href="#条件和循环组合语句" class="headerlink" title="条件和循环组合语句"></a>条件和循环组合语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in 可迭代对象 if 条件 %&#125;</span><br><span class="line">  满足条件语句</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  不满足条件语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in [1,2,3,4] if i&gt;2 %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;&#39;s index is &#123;&#123; loop.index &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">3<span class="string">&#x27;s index is 1</span></span><br><span class="line"><span class="string">4&#x27;</span>s index is 2</span><br></pre></td></tr></table></figure><blockquote><p>loop.index 是循环体索引，这里可能会有个疑问。</p><p>正常情况下，3和4的索引应该就是3和4，之所以是1和2，原因在于当条件控制和循环控制位于同一行的时候，先行运算的是 <code>[1,2,3,4] if i&gt;2</code>，之后才开始走<code>for</code>循环。</p><p>如果你想输出原始循环体，则需要将条件控制语句另起一行，放在<code>for</code>循环内部</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for i in [1,2,3,4] %&#125;</span><br><span class="line">&#123;% if i&gt;2 %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;&#39;s index is &#123;&#123; loop.index &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">3<span class="string">&#x27;s index is 3</span></span><br><span class="line"><span class="string">4&#x27;</span>s index is 4</span><br></pre></td></tr></table></figure><blockquote><p>上述的 loop.index 只是jinja2的一种使用方式，其它方式具体可见官网文档</p><p><a href="https://jinja.palletsprojects.com/en/master/templates/#list-of-control-structures">https://jinja.palletsprojects.com/en/master/templates/#list-of-control-structures</a></p></blockquote><h4 id="宏-macro"><a href="#宏-macro" class="headerlink" title="宏 macro"></a>宏 macro</h4><p>宏就是类似于函数的一个东西。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 编写宏 #&#125;</span><br><span class="line">&#123;% macro func() %&#125;</span><br><span class="line">函数体</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 调用宏 #&#125;</span><br><span class="line">&#123;&#123; func() &#125;&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% macro func(a,b,c&#x3D;3,d&#x3D;4) %&#125;</span><br><span class="line">&#123;# 宏编写的时候，宏参数，要遵循默认参数在后</span><br><span class="line">&#123;&#123; a &#125;&#125;</span><br><span class="line">&#123;&#123; b &#125;&#125;</span><br><span class="line">&#123;&#123; c &#125;&#125;</span><br><span class="line">&#123;&#123; d &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;&#123; func(1,2,5) &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>当给出参数超出了宏所定义的参数时，根据情况，宏会将多余的参数存在变量中，即：</p><p>超出的为非关键字参数，则存放在一个叫<code>varargs</code>的元组中</p><p>超出的为关键字参数，则存放在一个叫<code>kwargs</code>的字典中</p></blockquote><h4 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h4><p>如同当前函数的装饰器，可以扩展当前宏的功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 编写宏 func，并调用 caller #&#125;</span><br><span class="line">&#123;% macro func(a) %&#125;</span><br><span class="line">我有一个&#123;&#123; a &#125;&#125;。</span><br><span class="line">&#123;&#123; caller(a) &#125;&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 编写宏 func_ext #&#125;</span><br><span class="line">&#123;% macro func_ext(a,b) %&#125;</span><br><span class="line">但&#123;&#123; b &#125;&#125;比&#123;&#123; a &#125;&#125;好吃。</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">&#123;# 通过 call 关联 func，加载 func_ext #&#125;</span><br><span class="line">&#123;% call(a) func(&#39;汉堡&#39;) %&#125;</span><br><span class="line">&#123;&#123; func_ext(a,&#39;三明治&#39;) &#125;&#125;</span><br><span class="line">&#123;% endcall %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>caller是call的对象，因此caller也是可以给call传参</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染后</span></span><br><span class="line">我有一个汉堡。</span><br><span class="line">但三明治比汉堡好吃</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><blockquote><p> 扩展官方文档，可见 <a href="https://jinja.palletsprojects.com/en/master/extensions/">https://jinja.palletsprojects.com/en/master/extensions/</a></p></blockquote><p>这里我只简单的说一下如何启动 <code>for</code> 循环中的 <code>break</code> 和 <code>continue</code>。</p><p><code>ansible</code> 中添加 <code>jinja2</code> 扩展，需要修改主配置文件 <code>/etc/ansible/ansible.cfg</code>，找到 <code>jinja2_extensions </code>，在后面追加扩展配置即可，每一个扩展用逗号<code>,</code>分割。</p><p><code>break</code>和<code>continue</code> 的扩展名叫：<code>jinja2.ext.loopcontrols</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-include/">ansible☞playbook-include</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-include</title>
      <link href="2020/05/18/ansible%E2%98%9Eplaybook-include/"/>
      <url>2020/05/18/ansible%E2%98%9Eplaybook-include/</url>
      
        <content type="html"><![CDATA[<h2 id="引入额外任务"><a href="#引入额外任务" class="headerlink" title="引入额外任务"></a>引入额外任务</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br></pre></td></tr></table></figure><h2 id="绑定-kv-对，从而改变额外任务里的变量"><a href="#绑定-kv-对，从而改变额外任务里的变量" class="headerlink" title="绑定 kv 对，从而改变额外任务里的变量"></a>绑定 kv 对，从而改变额外任务里的变量</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="string">var1=hello</span></span><br><span class="line">    <span class="string">var2=world</span></span><br></pre></td></tr></table></figure><h2 id="绑定-tags-标记"><a href="#绑定-tags-标记" class="headerlink" title="绑定 tags 标记"></a>绑定 tags 标记</h2><blockquote><p>可以通过tags执行相应的额外任务</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - include: add1.yml</span><br><span class="line">    tags: add1</span><br><span class="line">  - include: add2.yml</span><br><span class="line">    tags: add2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play --tags add1 <span class="comment"># 仅执行 add1.yml 任务</span></span><br></pre></td></tr></table></figure><h2 id="绑定-loop-循环"><a href="#绑定-loop-循环" class="headerlink" title="绑定 loop 循环"></a>绑定 loop 循环</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="attr">loop:</span></span><br><span class="line">      <span class="bullet">-</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># add.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">  <span class="attr">msg:</span> <span class="string">&quot;loop-item: <span class="template-variable">&#123;&#123; item &#125;&#125;</span> in add.yml &quot;</span></span><br></pre></td></tr></table></figure><h2 id="绑定-when-条件"><a href="#绑定-when-条件" class="headerlink" title="绑定 when 条件"></a>绑定 when 条件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">add.yml</span></span><br><span class="line">    <span class="attr">when:</span> <span class="number">1</span> <span class="string">&lt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><p>ansible 在当前版本2.9中，推荐使用 import_tasks 和 include_tasks 来替换 include，include 未来有可能不在支持。（为啥总感觉 ansible 各种变呢）</p><p>import_tasks 静态任务导入，静态任务简单来说，就是不能从任务外传递变量到任务中。</p><p>include_tasks 动态任务导入。支持循环传递变量</p><p>import_tasks 绑定 when 的时候，会将 when 的条件一对一的应用到任务文件中列出的所有任务</p><p>include_tasks 绑定 when 的时候，会将 when 的条件仅应用到任务文件。即只要条件为真，任务文件里的所有任务都会执行。</p><p>关于新版写法，绑定 tags 的方式，和旧版差异比较大，例如</p><h4 id="include-tasks"><a href="#include-tasks" class="headerlink" title="include_tasks"></a>include_tasks</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">include_tasks:</span> </span><br><span class="line">        <span class="attr">file:</span> <span class="string">add.yml</span></span><br><span class="line">        <span class="attr">apply:</span></span><br><span class="line">          <span class="attr">tags:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">add</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">always</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># add.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span> is ok&quot;</span></span><br><span class="line">  <span class="attr">loop:</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> include </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo☞本地搜索</title>
      <link href="2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
      <url>2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装完 hexo-generator-search 后，发现搜索结果始终是所有文章.</p><p>如果你用的也是 <a href="https://github.com/Molunerfinn/hexo-theme-melody">Melody</a> 主题，那么可以参考如下信息，来确认。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/image-20200518121421437.png" alt="image-20200518121421437"></p><h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><blockquote><p>截至：2020.05.18，软件包如下</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;gitalk&quot;</span>: <span class="string">&quot;^1.6.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-asset-image&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-generator-search&quot;</span>: <span class="string">&quot;^2.4.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-renderer-pug&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^1.1.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react&quot;</span>: <span class="string">&quot;^15.3.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;react-dom&quot;</span>: <span class="string">&quot;^15.3.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><blockquote><p>追加内容如下</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote><p>修改内容</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/">hexo☞图片显示</a></li><li><a href="https://becomesilent.github.io/2020/08/09/My-Gallery/">My Gallery</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞nginx编译方式</title>
      <link href="2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/"/>
      <url>2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此脚本用于安装 nginx;tengine;openresty. 安装版本为：</p><ul><li>nginx: 1.14</li><li>openresty: 1.15.8.3</li><li>tengine: 2.1.2 # 这是一个很古老的版本…</li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>因为是编译安装，所以产出目录均在 /usr/local/&lt;nginx/openresty/tengine&gt;，除了 logs 做了软链<code> /usr/local/xxx/logs -&gt; /export/logs/nginx</code></p><p><code>/usr/local/xxx/conf 目录结构</code></p><p><img src="/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/image-20200515120037239.png" alt="image-20200515120037239"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面两个主配置文件会告诉你，相应的上下文配置，应该以什么结尾！！！</span></span><br><span class="line">include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/server/*.server;</span><br><span class="line">include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/upstream/*.upstream;</span><br></pre></td></tr></table></figure><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$basedir</span></span><br><span class="line">runuser=`whoami`</span><br><span class="line">[[ <span class="variable">$runuser</span> == <span class="string">&#x27;root&#x27;</span> ]] || &#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ERROR:执行用户不是<span class="variable">$runuser</span>&quot;</span> &amp;&amp; <span class="built_in">exit</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[ -d /<span class="built_in">export</span>/logs/nginx ]] || &#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;/export/logs/nginx/目录不存在&quot;</span> &amp;&amp; <span class="built_in">exit</span> </span><br><span class="line">&#125;</span><br><span class="line">CpuNum=`cat /proc/cpuinfo | grep processor | wc -l`</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入安装的Nginx版本:(nginx;tengine;openresty):&quot;</span> NginxVer</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入开发日常操作用户:&quot;</span> KaifaUser</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入nginx worker用户:&quot;</span> NginxWorkerUser</span><br><span class="line">useradd -s /sbin/nologin <span class="variable">$&#123;NginxWorkerUser&#125;</span></span><br><span class="line">usermod -a -G <span class="variable">$&#123;KaifaUser&#125;</span> <span class="variable">$&#123;NginxWorkerUser&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">rm -rf <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; mkdir <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line"></span><br><span class="line">cat&gt;&gt;<span class="variable">$basedir</span>/test.com.server&lt;&lt;EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com;</span><br><span class="line">    root /<span class="built_in">export</span>/<span class="variable">$&#123;NginxWorkerUser&#125;</span>/test.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    access_log logs/nginx-test.com.access.log main;</span><br><span class="line">    error_log logs/nginx-test.com.error.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭日志</span></span><br><span class="line">    location = /favicon.ico &#123;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 关闭日志</span></span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        auth_basic off;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拒绝探测网站根下的隐藏文件 Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).</span></span><br><span class="line">    location ~ /\. &#123;</span><br><span class="line">        deny all;</span><br><span class="line">        access_log off;</span><br><span class="line">        log_not_found off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment">#######这个是一个thinkphp框架的伪静态规则，请忽略</span></span><br><span class="line">        <span class="keyword">if</span> (!-e \<span class="variable">$request_filename</span>) &#123;</span><br><span class="line">           rewrite ^(.*)\$ /index.php?s=\<span class="variable">$1</span> last;</span><br><span class="line">           <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#######</span></span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启浏览器静态文件缓存</span></span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)\$ &#123; </span><br><span class="line">        expires 3h; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若php-fpm,请保留这里修改</span></span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1：9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout 10s;</span><br><span class="line">        fastcgi_send_timeout 10s;</span><br><span class="line">        fastcgi_read_timeout 10s;</span><br><span class="line">        fastcgi_buffers 8 256k;                           </span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 若 http，请保留这里修改</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_connect_timeout 300ms;</span><br><span class="line">        proxy_send_timeout 300ms;</span><br><span class="line">        proxy_read_timeout 300ms;</span><br><span class="line">        proxy_max_temp_file_size 1024m;</span><br><span class="line">        proxy_set_header   Host         <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header   X-Real-IP    <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_buffers 256 4k;</span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat&gt;&gt;nginx_status.server&lt;&lt;EOF</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># charset koi8-r;</span></span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location /server_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$NginxVer</span> == <span class="string">&#x27;nginx&#x27;</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;/usr/local/$NginxVer 已存在&#x27;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc</span><br><span class="line">    wget http://<span class="variable">$&#123;NginxVer&#125;</span>.org/download/<span class="variable">$&#123;NginxVer&#125;</span>-1.14.0.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_v2_module || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">&#x27;\$remote_addr - \$remote_user [\$time_local] \$request_time \$host &quot;\$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;\$status \$body_bytes_sent &quot;\$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;\$http_user_agent&quot; &quot;\$http_x_forwarded_for&quot; \$upstream_addr \$upstream_status&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">        deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$NginxVer</span> == <span class="string">&#x27;openresty&#x27;</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;/usr/local/$NginxVer 已存在&#x27;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc</span><br><span class="line">    wget https://openresty.org/download/openresty-1.15.8.3.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-http_v2_module || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">&#x27;\$remote_addr - \$remote_user [\$time_local] \$request_time \$host &quot;\$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;\$status \$body_bytes_sent &quot;\$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;\$http_user_agent&quot; &quot;\$http_x_forwarded_for&quot; \$upstream_addr \$upstream_status&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="built_in">return</span> 444;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/nginx/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$NginxVer</span> == <span class="string">&#x27;tengine&#x27;</span> ]];<span class="keyword">then</span></span><br><span class="line">    [[ -d /usr/<span class="built_in">local</span>/<span class="variable">$NginxVer</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;/usr/local/$NginxVer 已存在&#x27;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">    yum install readline-devel pcre-devel openssl-devel gcc jemalloc-devel</span><br><span class="line">    wget http://tengine.taobao.org/download/tengine-2.1.2.tar.gz -O <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz</span><br><span class="line">    tar xf <span class="variable">$&#123;NginxVer&#125;</span>.tar.gz --strip-components 1 -C <span class="variable">$&#123;NginxVer&#125;</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> --user=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --group=<span class="variable">$&#123;NginxWorkerUser&#125;</span> --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-pcre --with-jemalloc || <span class="built_in">exit</span></span><br><span class="line">    make</span><br><span class="line">    make install</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span> &amp;&amp; rm -rf logs</span><br><span class="line">    ln -s /<span class="built_in">export</span>/logs/nginx logs</span><br><span class="line">    <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf</span><br><span class="line">    mkdir &#123;location,ssl,upstream,server&#125;</span><br><span class="line">    mv <span class="variable">$basedir</span>/&#123;test.com.server,nginx_status.server&#125; server/</span><br><span class="line">    rm -rf nginx.conf</span><br><span class="line">    cat &gt;&gt;nginx.conf&lt;&lt;EOF</span><br><span class="line">user <span class="variable">$&#123;NginxWorkerUser&#125;</span>;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 65535; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">error_log logs/error.log;</span><br><span class="line"><span class="comment">#error_log logs/error.log notice;</span></span><br><span class="line"><span class="comment">#error_log logs/error.log info;</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format main <span class="string">&#x27;\$remote_addr - \$remote_user [\$time_local] \$request_time \$host &quot;\$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;\$status \$body_bytes_sent &quot;\$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;\$http_user_agent&quot; &quot;\$http_x_forwarded_for&quot; \$upstream_addr \$upstream_status&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log main;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css text/javascript application/xml application/ms* application/vnd* application/postscript application/javascript application/json application/x-httpd-php application/x-httpd-fastphp;</span><br><span class="line">    gzip_vary off;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#跨域访问</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Origin *; </span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></span><br><span class="line">    <span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 backlog=8092;</span><br><span class="line">        location / &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/server/*.server;</span><br><span class="line">    include /usr/<span class="built_in">local</span>/<span class="variable">$&#123;NginxVer&#125;</span>/conf/upstream/*.upstream;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/">nginx☞日志切割脚本</a></li><li><a href="https://zyh.cool/2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/">安装脚本☞php包管理方式</a></li><li><a href="https://www.lengyuewusheng.com/ngxtop%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5.html">ngxtop应用实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo☞图片显示</title>
      <link href="2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
      <url>2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>写作工具：typora</p><p>部署端：github</p><p>部署包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 你可以通过hexo的根目录下的package.json来确认版本</span><br><span class="line">&quot;hexo&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;hexo-asset-image&quot;: &quot;^1.0.0&quot;</span><br></pre></td></tr></table></figure><p>目前网上大多数的博文描述的场景，均不是当前场景（截至到2020.05.14），所以博文里虽然展示都正常，但是按照博文的操作却会有路径问题，具体表现是图片前多了一级路径（路径应该是1级域名，比如.com，.io等，根据你的域名来定）</p><p>那么，请按照下面我的步骤来操作，如果还有问题，那就不是上述我所说的情况了。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol><li><p>修改 hexo-asset-image，修改内容如图所示</p><p><img src="/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/image-20200901195338475.png" alt="image-20200901195338475">修改typora的图片存放路径，修改内容如图所示</p><p><img src="/2020/05/14/hexo%E2%98%9E%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/image-20200514185631903.png" alt="image-20200514185631903"></p><blockquote><p>这不是必须的，但是我想没人会拒绝方便的操作。 typora 在进行如上操作后，就可以在你往文章里粘贴图片的时候，自动生成以文件名前缀命名的目录（效果就如同你开启了hexo的post_asset_folder: true参数），并将图片存放在此目录中。</p></blockquote></li><li><p>开启 hexo 的 _config.yml 中 post_asset_folder: true 参数配置</p></li></ol><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>经过上述操作，我想你已经可以在本地 md 文件和线上同时看到图片了。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/18/hexo%E2%98%9E%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/">hexo☞本地搜索</a></li><li><a href="https://becomesilent.github.io/2020/08/09/My-Gallery/">My Gallery</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx☞日志切割脚本</title>
      <link href="2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/"/>
      <url>2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本脚本用于将 nginx 日志进行时间周期切割，并 lzo 压缩，最终上传到 s3。<br>脚本分为三个函数，切割函数，压缩上传函数，删除函数，需要执行哪个，就填写相对应变量。<br>详情可以看脚本注释。</p><blockquote><p>请务必执行前，确认安装了 lzop 和 jq 命令 ，且机器是 aws EC2 </p></blockquote><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># by zyh</span></span><br><span class="line"><span class="comment"># time: 2019-12-13</span></span><br><span class="line"><span class="comment"># warning: 使用之前 yum install -y lzop jq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># crontab (执行时间周期需要和切割时间周期一致) 重要!!!!!!!</span></span><br><span class="line"><span class="comment"># */10 * * * * root bash /export/shell/nginxlog2s3/start.sh &gt; /export/shell/nginxlog2s3/start.log 2&gt;&amp;1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标识日志名前缀</span></span><br><span class="line">localtag=`curl -sq http://169.254.169.254/latest/dynamic/instance-identity/document/ | jq -r .<span class="string">&quot;accountId&quot;</span>,.<span class="string">&quot;availabilityZone&quot;</span>,.<span class="string">&quot;privateIp&quot;</span> | sed <span class="string">&#x27;N;N;s@\n@_@g&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------人为变量填写开始区域----------------------------------</span></span><br><span class="line"><span class="comment"># 切割时间周期，定位切割后日期的初始写入时间（仅适用于连续切割，且不适用于第一次切割）</span></span><br><span class="line">todaytime=$(date -d <span class="string">&quot;-10 mins&quot;</span> +%Y%m%d)</span><br><span class="line">todayhour=$(date -d <span class="string">&quot;-10 mins&quot;</span> +%H)</span><br><span class="line">todaytimestr=$(date  -d <span class="string">&quot;-10 mins&quot;</span> +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 企业微信机器人</span></span><br><span class="line">wx_api=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx 日志目录 logs 所在路径, 备份日志目录是 logs/logsbak</span></span><br><span class="line"><span class="comment"># 例如日志目录是 /usr/local/nginx/logs，则填写 /usr/loca/nginx, 则切割后本地备份路径是 /usr/local/nginx/logs/logsbak</span></span><br><span class="line">nginx_base=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志位于S3的根路径，例如 s3://xxx/logs/xxxdays/nginx</span></span><br><span class="line">S3Base=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MvLogList=&quot;a.log b.log c.log&quot;  需要切割的日志，这是必须的</span></span><br><span class="line">MvLogList=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LzopS3LogList=&quot;a.log b.log c.log&quot; 需要压缩并上传S3的日志，如果你需要执行此步骤</span></span><br><span class="line"><span class="comment"># S3目录格式：$&#123;S3Base&#125;/$&#123;日志名&#125;/$&#123;todaytime&#125;/$&#123;todayhour&#125;/ </span></span><br><span class="line">LzopS3LogList=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DeleteLocalLog=&quot;a.log b.log c.log&quot; 需要本地设置保留时间的日志，如果你需要执行此步</span></span><br><span class="line">DeleteLocalLog=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地保存时间</span></span><br><span class="line">deletetime=$(date -d <span class="string">&quot;72 hours ago&quot;</span> +%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------人为变量填写结束区域----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志原始路径</span></span><br><span class="line">nginx_logs=<span class="string">&quot;<span class="variable">$&#123;nginx_base&#125;</span>/logs&quot;</span></span><br><span class="line"><span class="comment"># 日志位于本地的切割后备份路径</span></span><br><span class="line">backup_logs=<span class="string">&quot;<span class="variable">$&#123;nginx_logs&#125;</span>/logsbak&quot;</span></span><br><span class="line">[[ -d <span class="variable">$&#123;backup_logs&#125;</span> ]] || mkdir -p <span class="variable">$&#123;backup_logs&#125;</span></span><br><span class="line"><span class="comment"># nginx pid 文件路径</span></span><br><span class="line">nginx_pid=<span class="string">&quot;<span class="variable">$&#123;nginx_logs&#125;</span>/nginx.pid&quot;</span></span><br><span class="line">[[ -f <span class="variable">$&#123;nginx_pid&#125;</span> ]] || &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;nginx_pid&#125;</span> is not exist!!!!&quot;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mvlog</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  [[ -d <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> ]] || mkdir -p <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  mv <span class="variable">$&#123;nginx_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;MV: <span class="variable">$&#123;nginx_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span> to <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">lzops3log</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  S3Path=<span class="variable">$2</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  lzop <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span> &amp;&amp; aws s3 cp <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo <span class="variable">$&#123;S3Path&#125;</span>/<span class="variable">$&#123;todaytime&#125;</span>/<span class="variable">$&#123;todayhour&#125;</span>/ --quiet &amp;&amp; rm -rf <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;UPLOAD: <span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo to <span class="variable">$&#123;S3Path&#125;</span>/<span class="variable">$&#123;todaytime&#125;</span>/<span class="variable">$&#123;todayhour&#125;</span>/&quot;</span> || curl <span class="string">&quot;<span class="variable">$wx_api</span>&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;&quot;msgtype&quot;: &quot;markdown&quot;,&quot;markdown&quot;: &#123;&quot;content&quot;: &quot;# `&#x27;</span><span class="string">&quot;<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;todaytime&#125;</span><span class="variable">$&#123;todayhour&#125;</span>_<span class="variable">$&#123;todaytimestr&#125;</span>.lzo&quot;</span><span class="string">&#x27;` 日志上传失败!!!!!!&quot;&#125;&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">deletelocallog</span></span>()&#123;</span><br><span class="line">  [[ -z <span class="variable">$1</span> ]] &amp;&amp; <span class="built_in">continue</span></span><br><span class="line">  NginxLogName=<span class="variable">$1</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span></span><br><span class="line">  <span class="keyword">for</span> logname <span class="keyword">in</span> `ls`;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;deletetime&#125;</span> -ge <span class="variable">$&#123;logname##*_&#125;</span> ]];<span class="keyword">then</span></span><br><span class="line">      rm -rf <span class="variable">$&#123;logname&#125;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;DELETE: <span class="variable">$&#123;backup_logs&#125;</span>/<span class="variable">$&#123;NginxLogName&#125;</span>/<span class="variable">$&#123;localtag&#125;</span>_<span class="variable">$&#123;NginxLogName&#125;</span>_<span class="variable">$&#123;deletetime&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#MV</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;MvLogList&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  mvlog <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#nginx log reload</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;nginx_pid&#125;</span>`</span><br><span class="line"><span class="comment">#lzop and to s3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;LzopS3LogList&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  lzops3log <span class="variable">$&#123;i&#125;</span> <span class="variable">$&#123;S3Base&#125;</span>/<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#Delete</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;DeleteLocalLog&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  deletelocallog <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞nginx编译方式</a></li><li><a href="https://zyh.cool/2019/09/04/nginx%E2%98%9E%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/">nginx ☞ 基本认证</a></li><li><a href="https://www.lengyuewusheng.com/ngxtop%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5.html">ngxtop应用实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ web 监控</title>
      <link href="2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/"/>
      <url>2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-构建-zabbix-agentd-端配置"><a href="#1-构建-zabbix-agentd-端配置" class="headerlink" title="1. 构建 zabbix_agentd 端配置"></a>1. 构建 zabbix_agentd 端配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">[root@ip-10-230-10-105 zabbix]<span class="comment"># pwd</span></span><br><span class="line">/etc/zabbix</span><br><span class="line">[root@ip-10-230-10-105 zabbix]<span class="comment"># tree &#123;etc,shell&#125;</span></span><br><span class="line">etc</span><br><span class="line">├── zabbix_agentd.conf</span><br><span class="line">├── zabbix_agentd.conf.bak</span><br><span class="line">└── zabbix_agentd.conf.d</span><br><span class="line">    └── http_status.conf <span class="comment"># 我是 zabbix_agentd 数据项配置</span></span><br><span class="line"></span><br><span class="line">shell</span><br><span class="line">└── web</span><br><span class="line">    ├── http_status.py <span class="comment"># 我是自动发现脚本 + 数据采集脚本</span></span><br><span class="line"></span><br><span class="line">    └── WEB.txt  <span class="comment"># 我是自动发现的数据源</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 directories, 5 files</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zabbix_agentd 配置 http_status.conf</span></span><br><span class="line">UserParameter=web.site.code[*],/usr/bin/python /etc/zabbix/shell/web/http_status.py web_site_code <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">UserParameter=web.site.discovery,/usr/bin/python /etc/zabbix/shell/web/http_status.py web_site_discovery</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动发现规则配置文件 WEB.txt</span></span><br><span class="line"><span class="comment"># 一行一个监控地址</span></span><br><span class="line"><span class="comment"># get 原样写入</span></span><br><span class="line"><span class="comment"># post 模仿get多加一个?</span></span><br><span class="line">https://abc.com??&lt;post_kv&gt;</span><br><span class="line"></span><br><span class="line">https://abc.com?&lt;get_kv&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="comment"># python2.7</span></span><br><span class="line"><span class="comment"># 自动发现脚本 + 数据采集脚本 http_status.py</span></span><br><span class="line"><span class="comment"># 请将我添加 o+x 权限</span></span><br><span class="line"><span class="keyword">import</span> urllib2, sys, json, ConfigParser, os </span><br><span class="line"></span><br><span class="line">a1 = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web_site_code</span>(<span class="params">args</span>):</span></span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line">    WEB_TXT = <span class="string">&quot;%s/WEB.txt&quot;</span> % (os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(WEB_TXT):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;??&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                line = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&quot;??&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;?&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                line = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    response = urllib2.urlopen(line[<span class="number">0</span>], data=line[<span class="number">1</span>], timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">                <span class="keyword">except</span> IndexError:</span><br><span class="line">                    response = urllib2.urlopen(line[<span class="number">0</span>], timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    response = urllib2.urlopen(line, timeout=<span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">print</span> response.code</span><br><span class="line">            <span class="keyword">except</span> urllib2.URLError,e:</span><br><span class="line">                <span class="keyword">if</span> hasattr(e, <span class="string">&#x27;code&#x27;</span>):</span><br><span class="line">                    <span class="keyword">print</span> e.code</span><br><span class="line">                <span class="keyword">elif</span> hasattr(e, <span class="string">&#x27;reason&#x27;</span>):</span><br><span class="line">                    <span class="keyword">print</span> <span class="number">53</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    response.close()</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web_site_discovery</span>():</span></span><br><span class="line">    Dict = &#123;<span class="string">&quot;data&quot;</span>:[]&#125;</span><br><span class="line">    WEB_TXT = <span class="string">&quot;%s/WEB.txt&quot;</span> % (os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(WEB_TXT):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;??&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&quot;??&quot;</span>)</span><br><span class="line">            line = &#123;<span class="string">&quot;&#123;#SITENAME&#125;&quot;</span>:line[<span class="number">0</span>]&#125;</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;?&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">            line = &#123;<span class="string">&quot;&#123;#SITENAME&#125;&quot;</span>:line[<span class="number">0</span>]&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            line = &#123;<span class="string">&quot;&#123;#SITENAME&#125;&quot;</span>:line&#125;</span><br><span class="line">        Dict[<span class="string">&quot;data&quot;</span>].append(line)</span><br><span class="line">    <span class="keyword">print</span> json.dumps(Dict, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a1 == <span class="string">&#x27;web_site_code&#x27;</span>:</span><br><span class="line">    url = sys.argv[<span class="number">2</span>]</span><br><span class="line">    web_site_code(url)</span><br><span class="line"><span class="keyword">elif</span> a1 == <span class="string">&#x27;web_site_discovery&#x27;</span>:</span><br><span class="line">    web_site_discovery()</span><br></pre></td></tr></table></figure><blockquote><p>{ #SITENAME} 自动发现脚本输出的重要变量 servername 地址，将会用于 web 控制台配置</p></blockquote><h2 id="2-构建-web-控制台配置"><a href="#2-构建-web-控制台配置" class="headerlink" title="2. 构建 web 控制台配置"></a>2. 构建 web 控制台配置</h2><ul><li><p>构建一个主机项，监控 agentd</p></li><li><p>在自动发现规则里，构建监控项原型，内容如图：</p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/image-20200616182457232.png" alt="image-20200616182457232"></p></li><li><p>在自动发现规则里，构建触发器原型，内容如图： </p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/image-20200616182509904.png" alt="image-20200616182509904"></p><blockquote><p>100秒以内，收集到三次不是200的数据，就报警</p></blockquote></li><li><p>在自动发现规则里，构建图形原型，内容如图：</p><p><img src="/2020/05/14/zabbix%E2%98%9EWEB%E7%9B%91%E6%8E%A7/image-20200616182538573.png" alt="image-20200616182538573"></p></li></ul><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ nginx</title>
      <link href="2020/05/14/zabbix%E2%98%9Enginx/"/>
      <url>2020/05/14/zabbix%E2%98%9Enginx/</url>
      
        <content type="html"><![CDATA[<blockquote><p>确保相关目录地址如下：</p><p>/etc/zabbix/shell</p><p>/etc/zabbix/zabbix_agentd.d</p><p>/usr/local/nginx/conf/server</p></blockquote><ul><li>1，nginx增加配置 server_status.server</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;server&#x2F;server_status.server &lt;&lt; &#39;EOF&#39;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  off;</span><br><span class="line">    location &#x2F;server_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">        allow 127.0.0.1;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t &amp;&amp; &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><hr><ul><li>2，添加脚本nginx.sh  (确保a+x权限)</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;zabbix&#x2F;shell -p;</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh &lt;&lt; &#39;EOF&#39;</span><br><span class="line">#!&#x2F;bin&#x2F;bash  </span><br><span class="line"></span><br><span class="line">function active &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Active&#39; | awk &#39;&#123;print $NF&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reading &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Reading&#39; | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function writing &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt;&#x2F;dev&#x2F;null| grep &#39;Writing&#39; | awk &#39;&#123;print $4&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function waiting &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| grep &#39;Waiting&#39; | awk &#39;&#123;print $6&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function accepts &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $1&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handled &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $2&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function requests &#123;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;curl &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot; 2&gt; &#x2F;dev&#x2F;null| awk NR&#x3D;&#x3D;3 | awk &#39;&#123;print $3&#125;&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function qps &#123;</span><br><span class="line">        NGINX_STATUS_URL&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;server_status&quot;</span><br><span class="line">        #若是tnginx，则最后应输出d[length(d)-1]</span><br><span class="line">        requestold&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;curl -s $&#123;NGINX_STATUS_URL&#125; | &#x2F;usr&#x2F;bin&#x2F;awk &#39;&#x2F;server accepts handled requests&#x2F;&#123;getline a;split(a,d);print d[length(d)]&#125;&#39;&#96;</span><br><span class="line">        TimeWait&#x3D;1</span><br><span class="line">        sleep $TimeWait</span><br><span class="line">        requestnew&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;curl -s $&#123;NGINX_STATUS_URL&#125; | &#x2F;usr&#x2F;bin&#x2F;awk &#39;&#x2F;server accepts handled requests&#x2F;&#123;getline a;split(a,d);print d[length(d)]&#125;&#39;&#96;</span><br><span class="line">        if [ $requestnew -gt 0 ];then</span><br><span class="line">                QPS&#x3D;&#96;echo &quot;( $requestnew - $requestold ) &#x2F; $TimeWait&quot; | &#x2F;usr&#x2F;bin&#x2F;bc&#96;</span><br><span class="line">        fi</span><br><span class="line">        echo $QPS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Run the requested function  </span><br><span class="line">$1</span><br><span class="line">EOF</span><br><span class="line">chmod a+x &#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh</span><br></pre></td></tr></table></figure><hr><ul><li>3，配置zabbix客户端zabbix_agentd.conf</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;nginx.conf &lt;&lt; &#39;EOF&#39;</span><br><span class="line">#monitor nginx  </span><br><span class="line">UserParameter&#x3D;nginx.accepts,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh accepts</span><br><span class="line">UserParameter&#x3D;nginx.handled,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh handled</span><br><span class="line">UserParameter&#x3D;nginx.requests,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh requests</span><br><span class="line">UserParameter&#x3D;nginx.connections.active,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh active</span><br><span class="line">UserParameter&#x3D;nginx.connections.reading,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh reading</span><br><span class="line">UserParameter&#x3D;nginx.connections.writing,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh writing</span><br><span class="line">UserParameter&#x3D;nginx.connections.waiting,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh waiting</span><br><span class="line">UserParameter&#x3D;nginx.connections.qps,&#x2F;etc&#x2F;zabbix&#x2F;shell&#x2F;nginx.sh qps</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><hr><ul><li>4，在服务的对应主机上添加模板</li></ul><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ redis</title>
      <link href="2020/05/14/zabbix%E2%98%9Eredis/"/>
      <url>2020/05/14/zabbix%E2%98%9Eredis/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-模板"><a href="#zabbix-模板" class="headerlink" title="zabbix 模板"></a>zabbix 模板</h2><ol><li><p>自动发现规则</p><p><img src="/2020/05/14/zabbix%E2%98%9Eredis/image-20200520152740815.png" alt="image-20200520152740815"></p></li><li><p>过滤器</p><p><img src="/2020/05/14/zabbix%E2%98%9Eredis/image-20200520152922570.png" alt="image-20200520152922570"></p></li><li><p>监控项原型</p><table><thead><tr><th>名称</th><th>键值</th><th>间隔</th><th>历史记录</th><th>趋势</th><th>类型</th></tr></thead><tbody><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; connected_clients[客户端连接数]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,connected_clients]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; maxmemory[redis配置的内存上限]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,maxmemory]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; mem_fragmentation_ratio[内存碎片率]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,mem_fragmentation_ratio]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; redis_instantaneous_ops_per_sec[每秒执行的命令个数]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,instantaneous_ops_per_sec]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; redis 存活状态</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,exist]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; rejected_connections[被拒绝的客户端连接数]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,rejected_connections]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_cpu_sys[redis-master sys-cpu占用]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_cpu_sys]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_cpu_sys_children[redis-children sys-cpu占用]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_cpu_sys_children]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_cpu_user[redis-master user-cpu占用]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_cpu_user]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_cpu_user_children[redis-children user-cpu占用]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_cpu_user_children]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_memory[redis层面已使用内存-不含碎片]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_memory_pct[操作系统层面已使用内存百分比]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_pct]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_memory_peak[操作系统层面已使用内存历史峰值-含内存碎片]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_peak]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125; used_memory_rss[操作系统层面已使用内存-含内存碎片]</code></td><td><code>redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_rss]</code></td><td>30s</td><td>30d</td><td>90d</td><td>Zabbix客户端(主动式)</td></tr></tbody></table></li><li><p>触发器原型</p><table><thead><tr><th>严重性</th><th>名称</th><th>表达式</th></tr></thead><tbody><tr><td>一般严重</td><td><code>&#123;#IP&#125;:&#123;#TCP_PORT&#125; Redis  内存碎片化超过50%, 剩余可用内存低于30%</code></td><td><code>&#123;Template Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,mem_fragmentation_ratio].last()&#125;&gt;1.5  and &#123;Template Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_pct].last()&#125;&gt;0.7</code></td></tr><tr><td>严重</td><td><code>&#123;#IP&#125;:&#123;#TCP_PORT&#125; Redis  可用内存低, 存在使用交换分区</code></td><td><code>&#123;Template Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,mem_fragmentation_ratio].last()&#125;&lt;1  and &#123;Template Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_pct].last()&#125;&gt;0.7</code></td></tr><tr><td>一般严重</td><td><code>&#123;#IP&#125;:&#123;#TCP_PORT&#125; Redis  操作系统层面内存占用百分比过高</code></td><td><code>&#123;Template  Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,used_memory_pct].last()&#125;&gt;0.7</code></td></tr><tr><td>灾难</td><td><code>&#123;#IP&#125;:&#123;#TCP_PORT&#125; Redis 端口无法访问</code></td><td><code>&#123;Template  Redis Auto Discovert Active  mode:redis_info[&#123;#IP&#125;,&#123;#TCP_PORT&#125;,exist].last()&#125;&lt;&gt;1</code></td></tr></tbody></table></li><li><p>图形原型，就不详细写了，这里只列出我自己的分类</p><table><thead><tr><th>名称</th><th>宽</th><th>高</th><th>图形类别</th></tr></thead><tbody><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125;  redis 连接数监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125;  redis 其他监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125;  redis qps 监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125;  redis mem 监控</code></td><td>900</td><td>200</td><td>正常</td></tr><tr><td><code>&#123;#IP&#125;,&#123;#TCP_PORT&#125;  redis cpu 监控</code></td><td>900</td><td>200</td><td>正常</td></tr></tbody></table></li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本会生成自动发现进程脚本和redis检测脚本</p><p>zabbix的redis配置路径：ZabbixEtc</p><p>zabbix的脚本路径：ZabbixShell</p><p>redis的cli命令路径：RedisCli</p><p>自动发现脚本：ip_port_discovery.sh</p><ul><li>bash ip_port_discovery.sh 进程名或者端口</li></ul><p>redis检测脚本：redis_info.sh</p><ul><li>bash redis_info.sh ip port item</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZabbixEtc&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d</span><br><span class="line">ZabbixShell&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;shell</span><br><span class="line">RedisCli&#x3D;&#39;docker exec -t redis redis-cli&#39;</span><br><span class="line"></span><br><span class="line">[[ -d $&#123;ZabbixShell&#125; ]] || mkdir -p $&#123;ZabbixShell&#125;</span><br><span class="line">[[ -z $&#123;ZabbixEtc&#125; ]] &amp;&amp; [[ -z $&#123;ZabbixShell&#125; ]] || [[ -z $&#123;RedisCli&#125; ]] &amp;&amp; exit</span><br><span class="line"></span><br><span class="line">cat&gt;$&#123;ZabbixEtc&#125;&#x2F;redis.conf&lt;&lt;EOF</span><br><span class="line">##redis monitor</span><br><span class="line">UserParameter&#x3D;redis_info[*],$&#123;ZabbixShell&#125;&#x2F;redis_info.sh \$1 \$2 \$3 \$4</span><br><span class="line">UserParameter&#x3D;ip_port_discovery[*],$&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh \$1</span><br><span class="line">EOF</span><br><span class="line">cat&gt;$&#123;ZabbixShell&#125;&#x2F;redis_info.sh&lt;&lt;&quot;EOF&quot;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">RedisCli&#x3D;</span><br><span class="line">HOST&#x3D;$1</span><br><span class="line">PORT&#x3D;$2</span><br><span class="line">REDIS_INFO&#x3D;&quot;$RedisCli -h $HOST -p $PORT info&quot;</span><br><span class="line">[[ $# -ne 3 ]] &amp;&amp; [[ $# -ne 4 ]] &amp;&amp; &#123;</span><br><span class="line"> exit</span><br><span class="line">&#125;</span><br><span class="line">if [[ $# -eq 3 ]];then</span><br><span class="line">case $3 in</span><br><span class="line">exist)</span><br><span class="line"> result&#x3D;&#96;$RedisCli -h $HOST -p $PORT ping 2&gt;&#x2F;dev&#x2F;null |grep -c PONG&#96;</span><br><span class="line"> echo $result</span><br><span class="line">;;</span><br><span class="line">cluster)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep cluster|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">uptime_in_seconds)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep uptime_in_seconds|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_clients)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep connected_clients|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_longest_output_list)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep client_longest_output_list|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_biggest_input_buf)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep client_biggest_input_buf|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">blocked_clients)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep blocked_clients|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#内存</span><br><span class="line">maxmemory)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep maxmemory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_rss)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w used_memory_rss|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk -F&#39;k&#39; &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_pct)</span><br><span class="line"> A&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line"> B&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep maxmemory|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line"> result&#x3D;&#96;echo $A $B | awk &#39;&#123;printf&quot;%0.2f&quot;,$1&#x2F;$2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_peak)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory_peak|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;|awk &#39;NR&#x3D;&#x3D;1&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_lua)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep used_memory_lua|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">mem_fragmentation_ratio)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep mem_fragmentation_ratio|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#rdb</span><br><span class="line">rdb_changes_since_last_save)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_changes_since_last_save|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_bgsave_in_progress)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_bgsave_in_progress|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_save_time)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep rdb_last_save_time|awk -F&quot;:&quot; &#39;&#123;print $NF&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_bgsave_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rdb_last_bgsave_status&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39; | &#x2F;bin&#x2F;grep -c ok&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_current_bgsave_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rdb_current_bgsave_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#rdbinfo</span><br><span class="line">aof_enabled)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_enabled&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_scheduled)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_rewrite_scheduled&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_last_rewrite_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_last_rewrite_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_current_rewrite_time_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_current_rewrite_time_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_last_bgrewrite_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_last_bgrewrite_status&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39; | &#x2F;bin&#x2F;grep -c ok&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#aofinfo</span><br><span class="line">aof_current_size)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_current_size&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_base_size)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_base_size&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_rewrite)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_pending_rewrite&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_buffer_length)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_buffer_length&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_buffer_length)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_rewrite_buffer_length&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_bio_fsync)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_pending_bio_fsync&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_delayed_fsync)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;aof_delayed_fsync&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#stats</span><br><span class="line">total_connections_received)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;total_connections_received&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">total_commands_processed)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;total_commands_processed&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">instantaneous_ops_per_sec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;instantaneous_ops_per_sec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rejected_connections)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;rejected_connections&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expired_keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;expired_keys&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">evicted_keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;evicted_keys&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_hits)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;keyspace_hits&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_misses)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;keyspace_misses&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_channels&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_channels&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_patterns)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;pubsub_patterns&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">latest_fork_usec)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;latest_fork_usec&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_slaves)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;connected_slaves&quot; | awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_link_status)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_link_status&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;|&#x2F;bin&#x2F;grep -c up&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_last_io_seconds_ago)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_last_io_seconds_ago&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_sync_in_progress)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;master_sync_in_progress&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">slave_priority)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;slave_priority&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">#cpu</span><br><span class="line">used_cpu_sys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_sys&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_user&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_sys_children)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_sys_children&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user_children)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;used_cpu_user_children&quot;|awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> echo &quot;argu error&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">#db0:key</span><br><span class="line">   elif [[ $# -eq 4 ]];then</span><br><span class="line">case $4 in</span><br><span class="line">keys)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO| &#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;keys&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expires)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO| &#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;expires&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $4&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">avg_ttl)</span><br><span class="line">        result&#x3D;&#96;$REDIS_INFO|&#x2F;bin&#x2F;grep -w &quot;db0&quot;| &#x2F;bin&#x2F;grep -w &quot;$1&quot; | &#x2F;bin&#x2F;grep -w &quot;avg_ttl&quot; | awk -F&#39;&#x3D;|,&#39; &#39;&#123;print $6&#125;&#39;&#96;</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">     echo &quot;argu error&quot; ;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line">cat&gt;$&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh&lt;&lt;&quot;EOF&quot;</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#$1是要发现的进程部分词汇</span><br><span class="line">portarray&#x3D;(&#96;sudo ss -tnlp|egrep -i &quot;$1&quot;|awk &#123;&#39;print $4&#39;&#125;|awk -F&#39;:&#39; &#39;&#123;if ($NF~&#x2F;^[0-9]*$&#x2F;) print $NF&#125;&#39;|sort|uniq&#96;)</span><br><span class="line">iparray&#x3D;&#96;curl -s http:&#x2F;&#x2F;169.254.169.254&#x2F;latest&#x2F;meta-data&#x2F;local-ipv4&#96;</span><br><span class="line">length&#x3D;$&#123;#portarray[@]&#125;</span><br><span class="line">printf &quot;&#123;\n&quot;</span><br><span class="line">printf &#39;\t&#39;&quot;\&quot;data\&quot;:[&quot;</span><br><span class="line">for ((i&#x3D;0;i&lt;$length;i++))</span><br><span class="line">  do</span><br><span class="line">     printf &#39;\n\t\t&#123;&#39;</span><br><span class="line">     printf &quot;\&quot;&#123;#IP&#125;\&quot;:\&quot;$&#123;iparray&#125;\&quot;,\&quot;&#123;#TCP_PORT&#125;\&quot;:\&quot;$&#123;portarray[$i]&#125;\&quot;&#125;&quot;</span><br><span class="line">     if [ $i -lt $[$length-1] ];then</span><br><span class="line">                printf &#39;,&#39;</span><br><span class="line">     fi</span><br><span class="line">  done</span><br><span class="line">printf &quot;\n\t]\n&quot;</span><br><span class="line">printf &quot;&#125;\n&quot;</span><br><span class="line">EOF</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;&#x2F;redis_info.sh</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;&#x2F;ip_port_discovery.sh</span><br><span class="line">sed -i &#39;s#RedisCli&#x3D;#RedisCli&#x3D;\&quot;&#39;&quot;$&#123;RedisCli&#125;&quot;&#39;\&quot;#&#39; $&#123;ZabbixShell&#125;&#x2F;redis_info.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &#39;------------------------------------我是 zabbix 监控信息----------------------------------&#39;</span><br><span class="line">echo &#39;编辑 visudo，添加如下信息&#39;</span><br><span class="line">echo &quot;</span><br><span class="line">#zabbix用户可以以sudo执行ss</span><br><span class="line">zabbix ALL &#x3D; NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;ss</span><br><span class="line">#zabbix用户使用sudo无需tty</span><br><span class="line">Defaults:zabbix    !requiretty</span><br><span class="line">&quot;</span><br><span class="line">echo &#39;若redis运行在docker中，执行如下命令&#39;</span><br><span class="line">echo &#39;usermod -a -G docker zabbix&#39;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://thelighter.github.io/2020/02/19/redis/">redis是什么——redis优点和特性</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix ☞ agent和proxy</title>
      <link href="2020/05/14/zabbix%E2%98%9Eagent%E5%92%8Cproxy/"/>
      <url>2020/05/14/zabbix%E2%98%9Eagent%E5%92%8Cproxy/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://repo.zabbix.com/zabbix/">https://repo.zabbix.com/zabbix/</a></p></blockquote><h3 id="agent安装命令"><a href="#agent安装命令" class="headerlink" title="agent安装命令"></a>agent安装命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ubuntu 16.04</span></span><br><span class="line">wget http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">dpkg -i zabbix-release_3.4-1+xenial_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt-get install zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 14.04</span></span><br><span class="line">wget http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">dpkg -i zabbix-release_3.4-1+trusty_all.deb</span><br><span class="line">apt update</span><br><span class="line">apt-get install zabbix-agent</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos 7</span></span><br><span class="line">rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">yum install zabbix-agent -y</span><br><span class="line">systemctl enable zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos 6</span></span><br><span class="line">rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-15.el6.noarch.rpm;</span><br><span class="line">yum install zabbix-agent -y;</span><br><span class="line">chkconfig --level 2345 zabbix-agent on</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="agent主动模式配置文件"><a href="#agent主动模式配置文件" class="headerlink" title="agent主动模式配置文件"></a>agent主动模式配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf.bak;</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf &lt;&lt; &#39;EOF&#39;</span><br><span class="line">Hostname&#x3D;</span><br><span class="line">StartAgents&#x3D;0</span><br><span class="line">ServerActive&#x3D;</span><br><span class="line">PidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_agentd.pid</span><br><span class="line">LogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_agentd.log</span><br><span class="line">#DebugLevel&#x3D;4</span><br><span class="line">Include&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;*.conf</span><br><span class="line">#被监控端到服务器获取监控项的周期</span><br><span class="line">RefreshActiveChecks&#x3D;60</span><br><span class="line">#被监控端存储监控信息的空间大小</span><br><span class="line">BufferSize&#x3D;1000</span><br><span class="line">MaxLinesPerSecond&#x3D;200</span><br><span class="line">#超时时间</span><br><span class="line">Timeout&#x3D;10</span><br><span class="line">EOF</span><br><span class="line">vi  &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="proxy-安装命令"><a href="#proxy-安装命令" class="headerlink" title="proxy 安装命令"></a>proxy 安装命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># centos 6</span><br><span class="line">yum install http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;6&#x2F;x86_64&#x2F;zabbix-proxy-mysql-3.4.15-1.el6.x86_64.rpm -y</span><br><span class="line"># 解压数据库文件, 并自行导入</span><br><span class="line">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql-3.4.15&#x2F;schema.sql.gz &gt; schema.sql</span><br><span class="line"></span><br><span class="line"># centos 7</span><br><span class="line">yum install http:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;3.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-proxy-mysql-3.4.15-1.el7.x86_64.rpm</span><br><span class="line">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql-3.4.15&#x2F;schema.sql.gz &gt; schema.sql</span><br></pre></td></tr></table></figure><h2 id="proxy-配置"><a href="#proxy-配置" class="headerlink" title="proxy 配置"></a>proxy 配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/zabbix/zabbix_proxy.conf /etc/zabbix/zabbix_proxy.conf.bak;</span><br><span class="line">cat &gt; /etc/zabbix/zabbix_proxy.conf  &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">Server=</span><br><span class="line">ServerPort=10051</span><br><span class="line">Hostname=</span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_proxy.log</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_proxy.pid</span><br><span class="line">DBHost=</span><br><span class="line">DBPort=</span><br><span class="line">DBName=</span><br><span class="line">DBUser=</span><br><span class="line">DBPassword=</span><br><span class="line">Timeout=4</span><br><span class="line">LogSlowQueries=3000</span><br><span class="line">ConfigFrequency=60</span><br><span class="line">DataSenderFrequency=60</span><br><span class="line">StartDiscoverers=5</span><br><span class="line">CacheSize=128M</span><br><span class="line">StartDBSyncers=20</span><br><span class="line">HistoryCacheSize=256M</span><br><span class="line">HistoryIndexCacheSize=32M</span><br><span class="line">EOF</span><br><span class="line">vi /etc/zabbix/zabbix_proxy.conf</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/09/02/zabbix%E2%98%9E%E9%A2%84%E8%AD%A6/">zabbix☞预警</a></li><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞redis</title>
      <link href="2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/"/>
      <url>2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/</url>
      
        <content type="html"><![CDATA[<h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redisName=redis</span><br><span class="line">docker volume create <span class="variable">$&#123;redisName&#125;</span></span><br><span class="line">touch /<span class="built_in">export</span>/docker-data-root/volumes/<span class="variable">$&#123;redisName&#125;</span>/_data/redis.conf</span><br><span class="line">redis.conf 请参考官方默认配置文档，默认配置文档地址： https://redis.io/topics/config</span><br><span class="line">docker run --name  <span class="variable">$&#123;redisName&#125;</span> -v  <span class="variable">$&#123;redisName&#125;</span>:/data -p 6379:6379 --restart always -d redis redis-server /data/redis.conf </span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by zyh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2018-06-21</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DownUrl: redis源码包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisBaseDir： redis安装路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisPort: redis端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> RedisMaxMem：redis内存限制</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZabbixBase: zabbix 根路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完毕后，会输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. redis信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. zabbix需要额外手动添加的命令， 并在zabbix_server_web里，给机器关联上 &lt;Template Redis Auto Discovert Active mode&gt; 模板</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. monit需要额外手动添加的配置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BaseDir=`cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd`</span><br><span class="line">DownUrl=http://download.redis.io/releases/redis-stable.tar.gz</span><br><span class="line">RedisMaxMem=1g</span><br><span class="line">RedisPort=6379</span><br><span class="line">RedisBaseDir=/export/redis_$&#123;RedisPort&#125;</span><br><span class="line">ZabbixBase=/etc/zabbix</span><br><span class="line"></span><br><span class="line">if [[ $&#123;ZabbixBase&#125; == &#x27;/usr/local/zabbix&#x27; ]];then</span><br><span class="line">    ZabbixShell=$&#123;ZabbixBase&#125;/shell</span><br><span class="line">    ZabbixEtc=$&#123;ZabbixBase&#125;/etc/zabbix_agentd.conf.d/redis.conf</span><br><span class="line">else</span><br><span class="line">    ZabbixShell=/etc/zabbix/shell</span><br><span class="line">    ZabbixEtc=/etc/zabbix/zabbix_agentd.d/redis.conf</span><br><span class="line">fi</span><br><span class="line">RedisBaseName=$&#123;RedisBaseDir##*/&#125;</span><br><span class="line"></span><br><span class="line">export TOP_PID=$$</span><br><span class="line">trap &#x27;exit 1&#x27; TERM</span><br><span class="line"></span><br><span class="line">exit_script()&#123;</span><br><span class="line">    kill -s TERM $TOP_PID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yum install gcc-c++ -y</span><br><span class="line"></span><br><span class="line">[[ -d $&#123;RedisBaseDir&#125; ]] &amp;&amp; echo &quot;$&#123;RedisBaseDir&#125;已存在&quot; &amp;&amp; exit_script</span><br><span class="line">ss -tnalp | grep redis | awk &#x27;&#123;print $4&#125;&#x27; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | while read line;do</span><br><span class="line">    [[ $line -eq $&#123;RedisPort&#125; ]] &amp;&amp; echo &quot;$&#123;RedisPort&#125;已被占用&quot; &amp;&amp; exit_script</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cd $&#123;BaseDir&#125; &amp;&amp; mkdir redis</span><br><span class="line">wget $&#123;DownUrl&#125; -O redis.tar.gz</span><br><span class="line">tar xf redis.tar.gz --strip-components 1 -C redis</span><br><span class="line">cd redis</span><br><span class="line">make PREFIX=$&#123;RedisBaseDir&#125; install</span><br><span class="line">mkdir $&#123;RedisBaseDir&#125;/&#123;etc,data,logs&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;RedisBaseDir&#125;</span>/etc/redis.conf &lt;&lt;EOF</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode yes</span><br><span class="line">port $&#123;RedisPort&#125;</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">daemonize yes</span><br><span class="line">supervised no</span><br><span class="line">pidfile $&#123;RedisBaseDir&#125;/redis.pid</span><br><span class="line">loglevel warning</span><br><span class="line">logfile &quot;$&#123;RedisBaseDir&#125;/logs/redis.log&quot;</span><br><span class="line">databases 16</span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename redis_$&#123;RedisPort&#125;.rdb</span><br><span class="line">dir $&#123;RedisBaseDir&#125;/data/</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">rename-command FLUSHDB GOD_FLUSHDB</span><br><span class="line">rename-command FLUSHALL GOD_FLUSHALL</span><br><span class="line">rename-command CONFIG GOD_CONFIG</span><br><span class="line">rename-command KEYS GOD_KEYS</span><br><span class="line">maxmemory $&#123;RedisMaxMem&#125;</span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">slave-lazy-flush no</span><br><span class="line">appendonly no</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble no</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;RedisBaseDir&#125;</span>/redis.sh &lt;&lt; EOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Simple Redis init.d script conceived to work on Linux systems</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> as it does use of the /proc filesystem.</span></span><br><span class="line">BASEDIR=$&#123;RedisBaseDir&#125;</span><br><span class="line">REDISPORT=$&#123;RedisPort&#125;</span><br><span class="line">EXEC=\$BASEDIR/bin/redis-server</span><br><span class="line">CLIEXEC=\$BASEDIR/bin/redis-cli</span><br><span class="line">PIDFILE=\$BASEDIR/redis.pid</span><br><span class="line">CONF=&quot;\$BASEDIR/etc/redis.conf&quot;</span><br><span class="line">case &quot;\$1&quot; in</span><br><span class="line">    start)</span><br><span class="line">        [[ -f \$PIDFILE ]] &amp;&amp; kill -0 \`cat \$PIDFILE\` 2&gt;&gt;\$BASEDIR/crash.log &amp;&amp; echo &quot;\$PIDFILE exists, process is already running or crashed&quot; || &#123;</span><br><span class="line">                echo &quot;Starting Redis server...&quot;</span><br><span class="line">                \$EXEC \$CONF</span><br><span class="line">        &#125;</span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        if [ ! -f \$PIDFILE ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;\$PIDFILE does not exist, process is not running&quot;</span><br><span class="line">        else</span><br><span class="line">                PID=\$(cat \$PIDFILE)</span><br><span class="line">                echo &quot;Stopping ...&quot;</span><br><span class="line">                \$CLIEXEC -p \$REDISPORT shutdown</span><br><span class="line">                while [ -x /proc/\$&#123;PID&#125; ]</span><br><span class="line">                do</span><br><span class="line">                    echo &quot;Waiting for Redis to shutdown ...&quot;</span><br><span class="line">                    sleep 1</span><br><span class="line">                done</span><br><span class="line">                echo &quot;Redis stopped&quot;</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;Please use start or stop as first argument&quot;</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line">EOF</span><br><span class="line">chmod u+x $&#123;RedisBaseDir&#125;/redis.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改内核参数</span></span><br><span class="line">grep -q net.core.somaxconn /etc/sysctl.conf || echo &quot;net.core.somaxconn = 511&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">grep -q vm.overcommit_memory /etc/sysctl.conf || &#123;</span><br><span class="line">    echo &quot;vm.overcommit_memory = 1&quot; &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line">&#125;</span><br><span class="line">grep -q &#x27;/sys/kernel/mm/transparent_hugepage/enabled&#x27; /etc/rc.local || &#123;</span><br><span class="line">    echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">    echo &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; &gt;&gt; /etc/rc.local</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改zabbix监控</span></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixEtc&#125;</span>&lt;&lt;EOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#redis monitor</span></span></span><br><span class="line">UserParameter=redis_info[*],$&#123;ZabbixShell&#125;/redis_info.sh \$1 \$2 \$3 \$4</span><br><span class="line">UserParameter=ip_port_discovery[*],$&#123;ZabbixShell&#125;/ip_port_discovery.sh \$1</span><br><span class="line">EOF</span><br><span class="line">mkdir $&#123;ZabbixShell&#125;</span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixShell&#125;</span>/redis_info.sh&lt;&lt;<span class="string">&quot;EOF&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">REDISPATH=&quot;/export/redis/bin/redis-cli&quot;</span><br><span class="line">HOST=$1</span><br><span class="line">PORT=$2</span><br><span class="line">REDIS_INFO=&quot;$REDISPATH -h $HOST -p $PORT info&quot;</span><br><span class="line">[[ $# -ne 3 ]] &amp;&amp; [[ $# -ne 4 ]] &amp;&amp; &#123;</span><br><span class="line"> exit</span><br><span class="line">&#125;</span><br><span class="line">if [[ $# -eq 3 ]];then</span><br><span class="line">case $3 in</span><br><span class="line">exist)</span><br><span class="line"> result=`$REDISPATH -h $HOST -p $PORT ping 2&gt;/dev/null |grep -c PONG`</span><br><span class="line"> echo $result</span><br><span class="line">;;</span><br><span class="line">cluster)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep cluster|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">uptime_in_seconds)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep uptime_in_seconds|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_clients)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep connected_clients|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_longest_output_list)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep client_longest_output_list|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">client_biggest_input_buf)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep client_biggest_input_buf|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">blocked_clients)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep blocked_clients|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">内存</span></span><br><span class="line">maxmemory)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep maxmemory|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk &#x27;NR==1&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk &#x27;NR==1&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_rss)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w used_memory_rss|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk -F&#x27;k&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_pct)</span><br><span class="line"> A=`$REDIS_INFO|/bin/grep used_memory|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk &#x27;NR==1&#x27;`</span><br><span class="line"> B=`$REDIS_INFO|/bin/grep maxmemory|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk &#x27;NR==1&#x27;`</span><br><span class="line"> result=`echo $A $B | awk &#x27;&#123;printf&quot;%0.2f&quot;,$1/$2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_peak)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory_peak|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk &#x27;NR==1&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_memory_lua)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep used_memory_lua|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">mem_fragmentation_ratio)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep mem_fragmentation_ratio|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdb</span></span><br><span class="line">rdb_changes_since_last_save)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_changes_since_last_save|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_bgsave_in_progress)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_bgsave_in_progress|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_save_time)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep rdb_last_save_time|awk -F&quot;:&quot; &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_last_bgsave_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;rdb_last_bgsave_status&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | /bin/grep -c ok`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rdb_current_bgsave_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;rdb_current_bgsave_time_sec&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">rdbinfo</span></span><br><span class="line">aof_enabled)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_enabled&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_scheduled)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_rewrite_scheduled&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_last_rewrite_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_last_rewrite_time_sec&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_current_rewrite_time_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_current_rewrite_time_sec&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">            ;;</span><br><span class="line">aof_last_bgrewrite_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_last_bgrewrite_status&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | /bin/grep -c ok`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">aofinfo</span></span><br><span class="line">aof_current_size)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_current_size&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_base_size)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_base_size&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_rewrite)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_pending_rewrite&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_buffer_length)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_buffer_length&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_rewrite_buffer_length)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_rewrite_buffer_length&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_pending_bio_fsync)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_pending_bio_fsync&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">aof_delayed_fsync)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;aof_delayed_fsync&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">stats</span></span><br><span class="line">total_connections_received)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;total_connections_received&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">total_commands_processed)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;total_commands_processed&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">instantaneous_ops_per_sec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;instantaneous_ops_per_sec&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">rejected_connections)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;rejected_connections&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expired_keys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;expired_keys&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">evicted_keys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;evicted_keys&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_hits)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;keyspace_hits&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">keyspace_misses)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;keyspace_misses&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;pubsub_channels&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_channels)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;pubsub_channels&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">pubsub_patterns)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;pubsub_patterns&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">latest_fork_usec)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;latest_fork_usec&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">connected_slaves)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;connected_slaves&quot; | awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_link_status)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;master_link_status&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;|/bin/grep -c up`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_last_io_seconds_ago)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;master_last_io_seconds_ago&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">master_sync_in_progress)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;master_sync_in_progress&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">slave_priority)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;slave_priority&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line"><span class="meta">#</span><span class="bash">cpu</span></span><br><span class="line">used_cpu_sys)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;used_cpu_sys&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;used_cpu_user&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_sys_children)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;used_cpu_sys_children&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">used_cpu_user_children)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;used_cpu_user_children&quot;|awk -F&#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"> echo &quot;argu error&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"><span class="meta">#</span><span class="bash">db0:key</span></span><br><span class="line">   elif [[ $# -eq 4 ]];then</span><br><span class="line">case $4 in</span><br><span class="line">keys)</span><br><span class="line">        result=`$REDIS_INFO| /bin/grep -w &quot;db0&quot;| /bin/grep -w &quot;$1&quot; | /bin/grep -w &quot;keys&quot; | awk -F&#x27;=|,&#x27; &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">expires)</span><br><span class="line">        result=`$REDIS_INFO| /bin/grep -w &quot;db0&quot;| /bin/grep -w &quot;$1&quot; | /bin/grep -w &quot;expires&quot; | awk -F&#x27;=|,&#x27; &#x27;&#123;print $4&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">avg_ttl)</span><br><span class="line">        result=`$REDIS_INFO|/bin/grep -w &quot;db0&quot;| /bin/grep -w &quot;$1&quot; | /bin/grep -w &quot;avg_ttl&quot; | awk -F&#x27;=|,&#x27; &#x27;&#123;print $6&#125;&#x27;`</span><br><span class="line">        echo $result</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">     echo &quot;argu error&quot; ;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash"><span class="variable">$&#123;ZabbixShell&#125;</span>/ip_port_discovery.sh&lt;&lt;<span class="string">&quot;EOF&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$1</span>是要发现的进程部分词汇</span></span><br><span class="line">portarray=(`sudo ss -tnlp|egrep -i &quot;$1&quot;|awk &#123;&#x27;print $4&#x27;&#125;|awk -F&#x27;:&#x27; &#x27;&#123;if ($NF~/^[0-9]*$/) print $NF&#125;&#x27;|sort|uniq`)</span><br><span class="line">iparray=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`</span><br><span class="line">length=$&#123;#portarray[@]&#125;</span><br><span class="line">printf &quot;&#123;\n&quot;</span><br><span class="line">printf &#x27;\t&#x27;&quot;\&quot;data\&quot;:[&quot;</span><br><span class="line">for ((i=0;i&lt;$length;i++))</span><br><span class="line">  do</span><br><span class="line">     printf &#x27;\n\t\t&#123;&#x27;</span><br><span class="line">     printf &quot;\&quot;&#123;#IP&#125;\&quot;:\&quot;$&#123;iparray&#125;\&quot;,\&quot;&#123;#TCP_PORT&#125;\&quot;:\&quot;$&#123;portarray[$i]&#125;\&quot;&#125;&quot;</span><br><span class="line">     if [ $i -lt $[$length-1] ];then</span><br><span class="line">                printf &#x27;,&#x27;</span><br><span class="line">     fi</span><br><span class="line">  done</span><br><span class="line">printf &quot;\n\t]\n&quot;</span><br><span class="line">printf &quot;&#125;\n&quot;</span><br><span class="line">EOF</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;/redis_info.sh</span><br><span class="line">chmod a+x $&#123;ZabbixShell&#125;/ip_port_discovery.sh</span><br><span class="line">sed -i &#x27;2s#/export/redis#&#x27;&quot;$&#123;RedisBaseDir&#125;&quot;&#x27;#&#x27; $&#123;ZabbixShell&#125;/redis_info.sh</span><br><span class="line"></span><br><span class="line">echo &#x27;--------------------------------------------------我是 redis 信息-----------------------------------------------------------&#x27;</span><br><span class="line">echo &#x27;redis相关信息如下：&#x27;</span><br><span class="line">echo &quot;</span><br><span class="line">根路径：$&#123;RedisBaseDir&#125;</span><br><span class="line">启动脚本：$&#123;RedisBaseDir&#125;/redis.sh</span><br><span class="line">&quot;</span><br><span class="line">echo &#x27;--------------------------------------------------我是 zabbix 监控信息----------------------------------------------------------&#x27;</span><br><span class="line">echo &#x27;请先安装 zabbix.&#x27;</span><br><span class="line">echo &#x27;zabbix监控因使用了ss命令，故而需要开启sudo相关信息&#x27;</span><br><span class="line">echo &quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">zabbix用户可以以sudo执行ss</span></span><br><span class="line">zabbix ALL = NOPASSWD: /usr/sbin/ss</span><br><span class="line"><span class="meta">#</span><span class="bash">zabbix用户使用sudo无需tty</span></span><br><span class="line">Defaults:zabbix    !requiretty</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">echo &#x27;---------------------------------------------------我是 monit 监控信息----------------------------------------------------------&#x27;</span><br><span class="line">echo &#x27;请先安装 monit.&#x27;</span><br><span class="line">echo &#x27;monit配置文件如下:&#x27;</span><br><span class="line">echo &quot;</span><br><span class="line">check process $&#123;RedisBaseName&#125; with pidfile $&#123;RedisBaseDir&#125;/redis.pid</span><br><span class="line">  start program = \&quot;$&#123;RedisBaseDir&#125;/redis.sh start\&quot;</span><br><span class="line">  stop program = \&quot;$&#123;RedisBaseDir&#125;/redis.sh stop\&quot;</span><br><span class="line">if changed pid then alert</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://zyh.cool/2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/">redis☞备份</a></li><li><a href="https://zyh.cool/2018/02/02/redis%E2%98%9E%E8%8E%B7%E5%8F%96%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEttl%E7%9A%84key/">redis☞调整内核参数</a></li><li><a href="https://thelighter.github.io/2020/02/19/redis/">redis是什么——redis优点和特性</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 邮件预警</title>
      <link href="2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/"/>
      <url>2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $1 收件人</span></span><br><span class="line"><span class="comment"># $2 主题</span></span><br><span class="line"><span class="comment"># $3 内容</span></span><br><span class="line">smtpServer=  <span class="comment"># smtp 服务器地址，例如 smtp.gmail.com:xxx</span></span><br><span class="line">sendUserEmail=<span class="string">&#x27;it@abc.com&#x27;</span></span><br><span class="line">sendUserPassword=  <span class="comment"># 一般发件人邮箱密码都是专用密码，并非web密码</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/sendEmail -f <span class="variable">$&#123;sendUserEmail&#125;</span> -t <span class="variable">$1</span> -u <span class="string">&quot;<span class="variable">$2</span>&quot;</span> -m <span class="string">&quot;<span class="variable">$3</span>&quot;</span> -s <span class="variable">$&#123;smtpServer&#125;</span> -xu <span class="variable">$&#123;sendUserEmail&#125;</span> -xp <span class="variable">$&#123;sendUserPassword&#125;</span> -o message-charset=utf-8</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> smtplib </span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"> </span><br><span class="line">mail_host = <span class="string">&#x27;&#x27;</span> <span class="comment"># smtp 服务器地址，例如 smtp.gmail.com:xxx</span></span><br><span class="line">mail_user = <span class="string">&#x27;it@abc.com&#x27;</span></span><br><span class="line">mail_pass = <span class="string">&#x27;&#x27;</span> <span class="comment"># 一般发件人邮箱密码都是专用密码，并非web密码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">to_list,subject,content</span>):</span> </span><br><span class="line">    me = mail_user+<span class="string">&quot;&lt;&quot;</span>+mail_user+<span class="string">&quot;&gt;&quot;</span> </span><br><span class="line">    msg = MIMEText(content) </span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = subject </span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = me </span><br><span class="line">    msg[<span class="string">&#x27;to&#x27;</span>] = to_list </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;start sendmail&quot;</span></span><br><span class="line">        s = smtplib.SMTP(mail_host)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;connect mail server suesscc&quot;</span> </span><br><span class="line">s.starttls()</span><br><span class="line">        s.login(mail_user,mail_pass) </span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;login mail server suesscc&quot;</span></span><br><span class="line">        s.sendmail(me,to_list,msg.as_string()) </span><br><span class="line">        s.close() </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">except</span> Exception,e: </span><br><span class="line">        <span class="keyword">print</span> str(e) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    send_mail(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Enginx/">zabbix ☞ nginx</a></li><li><a href="https://zyh.cool/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/">监控☞企业微信机器人</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控☞企业微信机器人</title>
      <link href="2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wechatUrl=</span><br><span class="line">wechatData=</span><br><span class="line">curl <span class="variable">$&#123;wechatUrl&#125;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="string">&#x27;&#123;&quot;msgtype&quot;: &quot;markdown&quot;,&quot;markdown&quot;: &#123;&quot;content&quot;: &quot;`&#x27;</span><span class="string">&quot;<span class="variable">$wechatData</span>&quot;</span><span class="string">&#x27;`&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line">wechatData=&#123;<span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,<span class="string">&quot;text&quot;</span>: &#123;<span class="string">&quot;content&quot;</span>: <span class="string">&quot;&quot;</span>&#125;&#125;</span><br><span class="line">wechatData[<span class="string">&#x27;text&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]=<span class="string">&#x27;广州今日天气：29度，大部分多云，降雨概率：60%&#x27;</span></span><br><span class="line">wechatData[<span class="string">&#x27;text&#x27;</span>][<span class="string">&#x27;mentioned_list&#x27;</span>]=[<span class="string">&quot;zyh&quot;</span>]  <span class="comment"># all 代表群组所有人</span></span><br><span class="line">wechatData=json.dumps(wechatData)</span><br><span class="line">wechatUrl=</span><br><span class="line">requests.post(url=wechatUrl, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;, data=wechat</span><br><span class="line">Data, timeout=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/">监控 ☞ 邮件预警</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Enginx/">zabbix ☞ nginx</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志 ☞ logrotate</title>
      <link href="2020/05/14/%E6%97%A5%E5%BF%97%E2%98%9Elogrotate/"/>
      <url>2020/05/14/%E6%97%A5%E5%BF%97%E2%98%9Elogrotate/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>logrotate 可以帮助我们进行日志切割，搭配 cron 服务，就可以自动的进行轮转</p><h4 id="logrotate-版本更新"><a href="#logrotate-版本更新" class="headerlink" title="logrotate 版本更新"></a>logrotate 版本更新</h4><blockquote><p>确保 logrotate 支持小时级别的管理，替换/usr/sbin/logrotate,并附加x权限，我这里有一个二进制版本 <a href="logrotate">logrotate</a> </p><p>或者也可以直接去 github 上拉取<a href="https://github.com/logrotate/logrotate">https://github.com/logrotate/logrotate</a></p></blockquote><h4 id="添加-logrotate-配置"><a href="#添加-logrotate-配置" class="headerlink" title="添加 logrotate 配置"></a>添加 logrotate 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加所需切割的日志配置</span></span><br><span class="line">cat &gt; /etc/logrotate.d/nginx &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/logs/access.log &#123;  <span class="comment"># 定义日志位置</span></span><br><span class="line"> hourly    <span class="comment"># 按照小时切割</span></span><br><span class="line"> rotate 2  <span class="comment"># 最多保留两份切割日志</span></span><br><span class="line"> missingok</span><br><span class="line"> nocompress</span><br><span class="line"> sharedscripts</span><br><span class="line"> postrotate</span><br><span class="line">  /bin/<span class="built_in">kill</span> -USR1 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line"> endscript</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="添加-crontab-配置"><a href="#添加-crontab-配置" class="headerlink" title="添加 crontab 配置"></a>添加 crontab 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加logrotate执行脚本</span></span><br><span class="line">cp /etc/cron.daily/logrotate /etc/cron.hourly/</span><br></pre></td></tr></table></figure><h4 id="重载-crond-服务"><a href="#重载-crond-服务" class="headerlink" title="重载 crond 服务"></a>重载 crond 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reload crond</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logrotate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 远程磁盘检测</title>
      <link href="2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E8%BF%9C%E7%A8%8B%E7%A3%81%E7%9B%98%E6%A3%80%E6%B5%8B/"/>
      <url>2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E8%BF%9C%E7%A8%8B%E7%A3%81%E7%9B%98%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 文件名：disklog.sh </span></span><br><span class="line"><span class="comment"># 用途：监视远程系统的磁盘使用情况 </span></span><br><span class="line">BaseDir=`<span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span>; <span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BaseDir</span></span><br><span class="line">logfile=<span class="string">&quot;disk.log&quot;</span> </span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$1</span> ]];<span class="keyword">then</span> </span><br><span class="line">    logfile=<span class="variable">$1</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">shellexecuser=`whoami`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$shellexecuser</span> == root ]];<span class="keyword">then</span></span><br><span class="line">    rm -rf /root/.ssh/known_hosts</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    rm -rf /home/<span class="variable">$shellexecuser</span>/.ssh/known_hosts</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-8s %-14s %-9s %-8s %-6s %-6s %-6s %s\r\n&quot;</span> <span class="string">&quot;Date&quot;</span> <span class="string">&quot;IP ADDRESS&quot;</span> <span class="string">&quot;Device&quot;</span> <span class="string">&quot;Capacity&quot;</span> <span class="string">&quot;Used&quot;</span> <span class="string">&quot;Free&quot;</span> <span class="string">&quot;Percent&quot;</span> <span class="string">&quot;Status&quot;</span> &gt; <span class="variable">$logfile</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">##################### 手动填写区</span></span><br><span class="line"><span class="comment"># 提供远程主机IP地址列表 1.1.1.1 2.2.2.2 3.3.3.3</span></span><br><span class="line">IP_LIST=</span><br><span class="line"><span class="comment"># 监控阈值(百分比) 只填写数字 1 到 100</span></span><br><span class="line">DiskPct=</span><br><span class="line"><span class="comment"># 执行用户</span></span><br><span class="line">UserName=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 执行用户所需私钥, 此文件需要与脚本同级目录</span></span><br><span class="line">PemName=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 企业微信bot机器人地址</span></span><br><span class="line">wx_api=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">##################### 手动填写区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$IP_LIST</span>;<span class="keyword">do</span> </span><br><span class="line">    ssh -i <span class="variable">$PemName</span> -o StrictHostKeyChecking=no <span class="variable">$&#123;UserName&#125;</span>@<span class="variable">$ip</span> <span class="string">&#x27;df -H&#x27;</span> | grep ^/dev/ &gt; /tmp/$$.df </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> </span><br><span class="line">        cur_date=`date  <span class="string">&quot;+%F_%R&quot;</span>`</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&quot;%-8s %-14s &quot;</span> <span class="variable">$cur_date</span> <span class="variable">$ip</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">&#x27;&#123; printf(&quot;%-9s %-8s %-6s %-6s %-8s&quot;, $1,$2,$3,$4,$5); &#125;&#x27;</span> </span><br><span class="line"></span><br><span class="line">        pusg=$(<span class="built_in">echo</span> <span class="variable">$line</span> | egrep -o <span class="string">&quot;[0-9]+%&quot;</span>) </span><br><span class="line">        pusg=<span class="variable">$&#123;pusg/\%/&#125;</span>; </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$pusg</span> -lt <span class="variable">$DiskPct</span> ];<span class="keyword">then</span> </span><br><span class="line">            <span class="built_in">echo</span> OK</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">echo</span> ALERT </span><br><span class="line">        <span class="keyword">fi</span> </span><br><span class="line">    <span class="keyword">done</span> &lt; /tmp/$$.df </span><br><span class="line">    rm -rf /tmp/$$.df</span><br><span class="line"><span class="keyword">done</span> &gt;&gt; <span class="variable">$&#123;logfile&#125;</span></span><br><span class="line">sed -n <span class="string">&#x27;1p&#x27;</span> <span class="variable">$&#123;logfile&#125;</span> &gt; alert.log</span><br><span class="line">awk <span class="string">&#x27;$NF == &quot;ALERT&quot;&#123;print $0&#125;&#x27;</span> <span class="variable">$&#123;logfile&#125;</span> &gt;&gt; alert.log</span><br><span class="line"><span class="comment">#sed -i &#x27;1i &quot;磁盘阈值：&#x27;&quot;$DiskPct&quot;&#x27;&quot;&#x27; alert.log</span></span><br><span class="line">content=`cat alert.log`</span><br><span class="line">grep -q <span class="string">&#x27;ALERT&#x27;</span> alert.log &amp;&amp; &#123;</span><br><span class="line">curl <span class="string">&quot;<span class="variable">$wx_api</span>&quot;</span>  -H <span class="string">&#x27;Content-Type: application/json&#x27;</span>  \</span><br><span class="line">-d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string">        &quot;msgtype&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">        &quot;text&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;content&quot;: &quot;&#x27;</span><span class="string">&quot;<span class="variable">$content</span>&quot;</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">   &#125;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/">监控 ☞ 邮件预警</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Enginx/">zabbix ☞ nginx</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控 ☞ 微信预警</title>
      <link href="2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E5%BE%AE%E4%BF%A1%E9%A2%84%E8%AD%A6/"/>
      <url>2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E5%BE%AE%E4%BF%A1%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># conf.ini</span></span><br><span class="line">[wechat]</span><br><span class="line">corpid = </span><br><span class="line"></span><br><span class="line">[app]</span><br><span class="line">it = &lt;app_agent_id&gt;:&lt;app_secret&gt;</span><br><span class="line"></span><br><span class="line">[group]</span><br><span class="line">it = usera|userb</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@author: zyh</span></span><br><span class="line"><span class="string">@contact: aaa103439@hotmail.com</span></span><br><span class="line"><span class="string">@software: vscode</span></span><br><span class="line"><span class="string">@file: sendchat.py</span></span><br><span class="line"><span class="string">@time: 2020/02/05</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, requests, pathlib, json, configparser</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PySendchat</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, corpid, agentid, secret, touser, content</span>):</span></span><br><span class="line">        self.corpid=corpid</span><br><span class="line">        self.agentid=agentid</span><br><span class="line">        self.secret=secret</span><br><span class="line">        self.touser=touser</span><br><span class="line">        self.content=content</span><br><span class="line"></span><br><span class="line">        LOG_PATHDIR=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        LOG_FILENAME = <span class="string">&#x27;&#123;0&#125;/sendchat.log&#x27;</span>.format(LOG_PATHDIR)</span><br><span class="line">        self.my_logger = logging.getLogger(<span class="string">&#x27;SendChat&#x27;</span>)</span><br><span class="line">        self.my_logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add the log message handler to the logger</span></span><br><span class="line">        handler = logging.handlers.RotatingFileHandler(LOG_FILENAME, maxBytes=<span class="number">102400000</span>, backupCount=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create formatter and add it to the handlers</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">        handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        self.my_logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gettoken</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.my_logger.info(<span class="string">&#x27;-----------------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">        pwd=os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        tokenfile=<span class="string">&#x27;&#123;0&#125;/wechat.&#123;1&#125;&#x27;</span>.format(pwd,self.agentid)</span><br><span class="line">        <span class="keyword">if</span> pathlib.Path(tokenfile).exists():</span><br><span class="line">            tokenfilectime=os.path.getctime(tokenfile)</span><br><span class="line">            currenttime=datetime.now().timestamp()</span><br><span class="line">            dtime=currenttime-tokenfilectime</span><br><span class="line">            self.my_logger.info(<span class="string">&#x27;&#123;0&#125; lived &#123;1&#125;s.&#x27;</span>.format(tokenfile, dtime))</span><br><span class="line">            <span class="keyword">if</span> dtime &gt;= <span class="number">7200</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    os.remove(tokenfile)</span><br><span class="line">                    self.my_logger.info(<span class="string">&#x27;Token file &#123;0&#125;: delete success&#x27;</span>.format(tokenfile))</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    self.my_logger.error(<span class="string">&#x27;Token file:&#123;0&#125; delete error.Reason:&#123;1&#125;&#x27;</span>.format(tokenfile,e))</span><br><span class="line">                    exit</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check token file</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            tokensize = os.path.getsize(tokenfile)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.info(<span class="string">&#x27;Token file is not exist.Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line">            tokensize = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get token from token file</span></span><br><span class="line">        <span class="keyword">if</span> tokensize != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">with</span> open(tokenfile, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                token = fd.read() <span class="comment"># get token success</span></span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Get token from token file.&#x27;</span>)</span><br><span class="line">            jsonObject = json.loads(token.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            access_token = jsonObject.get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> access_token</span><br><span class="line">        <span class="comment"># get token from weixin api</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;New Token Create.&#x27;</span>)</span><br><span class="line">                f = requests.get(<span class="string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;0&#125;&amp;corpsecret=&#123;1&#125;&#x27;</span>.format(self.corpid, self.secret))</span><br><span class="line">                token = f.content</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Get token from weixin api.&#x27;</span>)</span><br><span class="line">                jsonObject = json.loads(token.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                errcode=int(jsonObject.get(<span class="string">&quot;errcode&quot;</span>))</span><br><span class="line">                <span class="keyword">if</span> errcode != <span class="number">0</span>:</span><br><span class="line">                    errmsg=jsonObject.get(<span class="string">&quot;errmsg&quot;</span>)</span><br><span class="line">                    self.my_logger.error(<span class="string">&#x27;Get token error!Reason:&#123;0&#125;&#x27;</span>.format(errmsg))</span><br><span class="line">                    exit()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">&#x27;Get token error!Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.my_logger.info(<span class="string">&#x27;Write token to &#123;0&#125;.&#x27;</span>.format(tokenfile))</span><br><span class="line">                <span class="keyword">with</span> open(tokenfile, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">                    fd.write(token)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                self.my_logger.error(<span class="string">&#x27;Write &#123;0&#125; error!Reason:&#123;1&#125;&#x27;</span>.format(tokenfile,e))</span><br><span class="line">                exit()</span><br><span class="line">            access_token = jsonObject.get(<span class="string">&quot;access_token&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> access_token</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendmsg</span>(<span class="params">self</span>):</span></span><br><span class="line">        accessToken = self.gettoken()</span><br><span class="line">        self.my_logger.info(<span class="string">&#x27;Token:&#123;0&#125;&#x27;</span>.format(accessToken))</span><br><span class="line">        sendMapDirectroy = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;agentid&quot;</span>] = self.agentid</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;touser&quot;</span>] = self.touser</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;msgtype&quot;</span>] = <span class="string">&quot;text&quot;</span></span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;safe&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br><span class="line">        contentDirectory = &#123;&#125;</span><br><span class="line">        sendMapDirectroy[<span class="string">&quot;text&quot;</span>] = contentDirectory</span><br><span class="line">        contentDirectory[<span class="string">&quot;content&quot;</span>] = self.content</span><br><span class="line">        bodyStr = json.dumps(sendMapDirectroy, ensure_ascii=<span class="literal">False</span>).encode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = requests.post(url=<span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s&quot;</span> % accessToken,</span><br><span class="line">                          data=bodyStr, timeout=<span class="number">5</span>)</span><br><span class="line">            self.my_logger.info(f.content)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.my_logger.error(<span class="string">&#x27;Send chat network error!Reason:&#123;0&#125;&#x27;</span>.format(e))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    appname = sys.argv[<span class="number">1</span>]</span><br><span class="line">    content = sys.argv[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># read conf.ini</span></span><br><span class="line">    conf = configparser.ConfigParser()</span><br><span class="line">    conf_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    conf_ini = <span class="string">&quot;&#123;0&#125;/conf.ini&quot;</span>.format(conf_path)</span><br><span class="line">    <span class="keyword">if</span> pathlib.Path(conf_ini).exists():</span><br><span class="line">        conf.read(conf_ini)</span><br><span class="line">        corpid = conf.get(<span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;corpid&quot;</span>)</span><br><span class="line">        appinfo = conf.get(<span class="string">&quot;app&quot;</span>, appname)</span><br><span class="line">        agentid = appinfo.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        secret = appinfo.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        groupname = conf.get(<span class="string">&quot;group&quot;</span>, appname)</span><br><span class="line">        touser = groupname.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        chatobj = PySendchat(corpid, agentid, secret, touser, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;conf.ini error&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chatobj.sendmsg()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        chatobj.my_logger.error(<span class="string">&quot;Send chat failure!&quot;</span>)</span><br></pre></td></tr></table></figure><p>eg:</p><p>python sendchat.py it ‘’ &lt;预警内容&gt;</p><blockquote><p>创建好app，并关联用户到app</p><p>执行上述命令，会将预警内容通过<app_agent_id> 应用发送给用户usera和userb</app_agent_id></p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/07/23/zabbix%E2%98%9Eserver%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">zabbix ☞ server安装注意事项</a></li><li><a href="https://zyh.cool/2020/05/14/%E7%9B%91%E6%8E%A7%E2%98%9E%E9%82%AE%E4%BB%B6%E9%A2%84%E8%AD%A6/">监控 ☞ 邮件预警</a></li><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Enginx/">zabbix ☞ nginx</a></li><li><a href="https://www.lengyuewusheng.com/prometheus%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5.html">prometheus监控实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-过滤器</title>
      <link href="2020/05/11/ansible%E2%98%9Eplaybook-%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>2020/05/11/ansible%E2%98%9Eplaybook-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不管是过滤器，lookup，query，with_xxx，很多都是获取我们想要的信息。</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><blockquote><p><a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html">https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html</a></p></blockquote><blockquote><p>处理变量值，从而获取想要的信息.</p><p>过滤器本身是 jinja2 或者 ansible 官方定义的</p></blockquote><h4 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">vara:</span> <span class="string">abcde</span></span><br><span class="line">    <span class="attr">varb:</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">A</span>,<span class="string">b</span>,<span class="string">C</span>,<span class="string">d</span>]</span><br><span class="line">    <span class="attr">varc:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">vard:</span> [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="number">4</span>,<span class="number">5</span> ]</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">upper</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vara | upper&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>简例中的 upper 即是过滤器，它可以将 vara 中的所有字母元素大写，最终输出 ABCDE</p></blockquote><h4 id="常用的过滤器"><a href="#常用的过滤器" class="headerlink" title="常用的过滤器"></a>常用的过滤器</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将字符串开头和结尾的空格去除</span></span><br><span class="line"><span class="string">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vara | trim &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#返回字符串或列表长度,length与count等效,可以写为count</span></span><br><span class="line"><span class="string">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | length &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 绝对值</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varc | abs &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 排序(降序排序)</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | sort(reverse=true) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 将列表中第一层嵌套列表元素展开并入列表中,并取出新列表中的最大元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vard | flatten(levels=1) | max &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 随机返回一个元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | random &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vard | unique &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | union(vard) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | intersect(vard) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 补集，取出存在于 varb，但不存在于 vard 中的元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | difference(vard) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 去除两个列表交集后的元素</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb | symmetric_difference(vard) &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 变量未定义，返回默认值 new</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vare | default(&#x27;new&#x27;)&#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 变量未定义或者定义但为空，返回默认值 new</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; vare | default(&#x27;new&#x27;, boolean=true)&#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 变量未定义时，忽略某个参数</span></span><br><span class="line"><span class="attr">file:</span> <span class="string">xxxx</span>  <span class="string">mode=&#123;&#123;</span> <span class="string">vare</span> <span class="string">|</span> <span class="string">default(omit)&#125;&#125;&quot;</span>  <span class="comment"># 若 vare 不存在，则忽略mode参数</span></span><br></pre></td></tr></table></figure><h4 id="json-query"><a href="#json-query" class="headerlink" title="json_query"></a>json_query</h4><blockquote><p>获取特定数据</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查询字符串可用变量代替，增加可读性</span><br><span class="line"> loop: &quot;&#123;&#123; domain_definition | json_query(server_name_cluster1_query) &#125;&#125;&quot;</span><br><span class="line"> vars:</span><br><span class="line">    server_name_cluster1_query: &quot;domain.server[?cluster&#x3D;&#x3D;&#39;cluster1&#39;].port&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询条件</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users | json_query(&#x27;[?name==`zhangsan`].gender&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;male&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p>映射</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users|map(attribute=&#x27;name&#x27;) | list &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users | json_query(&#x27;[*].name&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test 2 是采用 json_query 方式，test1和test2结果一样</span></span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;zhangsan&quot;</span>, </span><br><span class="line">        <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-文本文件操作</title>
      <link href="2020/05/10/ansible%E2%98%9Eplaybook-%E5%8F%98%E9%87%8F/"/>
      <url>2020/05/10/ansible%E2%98%9Eplaybook-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="var-定义"><a href="#var-定义" class="headerlink" title="var 定义"></a>var 定义</h4><blockquote><p>通过变量，修改playbook</p><p>可直接写入 playbook， 也可以写入文件，然后 playbook 通过 vars_files 引用</p><p>关键词:</p><ul><li>vars</li><li>vars_files # 一次性加载文件内部数据，不支持文件动态修改或添加新变量</li></ul></blockquote><h4 id="简例"><a href="#简例" class="headerlink" title="简例"></a>简例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">~/vars.yml</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">father:</span> <span class="string">Zhang</span> <span class="string">San</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; father &#125;&#125;</span> - <span class="template-variable">&#123;&#123; children.son_name &#125;&#125;</span> success&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/son.log</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">children:</span></span><br><span class="line">  <span class="attr">son_name:</span> <span class="string">Zhang</span> <span class="string">Xiaosan</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># son.log 内容</span></span><br><span class="line">Zhang San - Zhang Xiaosan success</span><br></pre></td></tr></table></figure><h4 id="var-注册"><a href="#var-注册" class="headerlink" title="var 注册"></a>var 注册</h4><blockquote><p>当我们想将某个任务的结果写入一个变量的时候，我们可以用register来进行注册</p><p>关键词: </p><ul><li>register</li><li>debug  <ul><li>var 输出变量值</li><li>msg 输出字符串</li></ul></li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">register</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;register success&quot;</span> <span class="string">&gt;</span> <span class="string">~/register.log</span></span><br><span class="line">      <span class="attr">register:</span> <span class="string">resultInfo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">register</span> <span class="string">result</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;Oh my god&quot;</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">resultInfo</span></span><br></pre></td></tr></table></figure><h4 id="var-交互"><a href="#var-交互" class="headerlink" title="var 交互"></a>var 交互</h4><blockquote><p>提供一个用户输入信息的机会，和 shell 里面的 read -p 一致。</p><p>关键词：</p><ul><li>vars_prompt</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: localhost</span><br><span class="line">  remote_user: zyh</span><br><span class="line">  vars_prompt:</span><br><span class="line">    - name: <span class="string">&quot;fatherName&quot;</span></span><br><span class="line">      prompt: <span class="string">&quot;What&#x27;s your father name&quot;</span></span><br><span class="line">      default: ZhangSan</span><br><span class="line">      private: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: show father name</span><br><span class="line">      shell: <span class="built_in">echo</span> <span class="string">&quot;&#123;&#123; fatherName &#125;&#125;&quot;</span> &gt; ~/prompt.log</span><br></pre></td></tr></table></figure><blockquote><p>private yes=隐藏输入内容 no=显示输入内容</p><p>default 默认值</p><p>encrypt “sha512_crypt” 将变量值加密，一般用于传递密码，比如传递给 user 模块的 password 参数</p></blockquote><h4 id="var-命令行传入"><a href="#var-命令行传入" class="headerlink" title="var 命令行传入"></a>var 命令行传入</h4><blockquote><p>一般用于临时强制覆盖playbook中定义好的变量</p><p>关键词：</p><ul><li>-e 或者 –extra-vars<ul><li>参数后面，可以跟随多个变量kv对，每一个kv对用空格隔开</li><li>参数后面，@filePath 可以传入变量文件，文件中的变量均可以被引用</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-play test.play -e <span class="string">&quot;fatherName=Laowang&quot;</span></span><br></pre></td></tr></table></figure><h4 id="var-作用域"><a href="#var-作用域" class="headerlink" title="var 作用域"></a>var 作用域</h4><table><thead><tr><th>创建方式</th><th>调用位置</th><th>作用域</th></tr></thead><tbody><tr><td>vars</td><td>play和tasks</td><td>当前play或者当前tasks，无法跨主机</td></tr><tr><td>set_fact</td><td>tasks</td><td>跨play，默认无法跨主机</td></tr><tr><td>register</td><td>tasks</td><td>跨play，默认无法跨主机</td></tr></tbody></table><p>若要使得 set_fact 和 register 跨主机使用，则需要引入内置变量 <code>hostvars</code> 例如 hostvars.&lt;主机名&gt;.&lt;变量名&gt;</p><blockquote><p>其它内置变量：</p><ul><li><p>ansible_version # 版本 </p></li><li><p>hostvars # 存储play中的所有主机变量</p></li><li><p>play_hosts # 存储play中的所有主机名</p></li><li><p>inventory_hostname  # 存储当前主机名</p></li><li><p>inventory_hostname_short  # 存储当前主机名简称（其实就是获取主机名第一级，例如001.localhost，那么获取的就是001）</p></li><li><p>groups # 存储所有分组信息，包括all和ungrouped</p></li><li><p>group_names # 存储当前play中主机的所属组名</p></li><li><p>inventory_dir # 存储主机清单文件所在路径</p></li></ul></blockquote><h4 id="var-动态获取新变量"><a href="#var-动态获取新变量" class="headerlink" title="var 动态获取新变量"></a>var 动态获取新变量</h4><blockquote><p>关键词：include_vars</p><p>用于任务重载变量文件，从而获取任务期间变量文件修改的数据</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars_files:</span> <span class="string">~/test.yaml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">varb</span> <span class="bullet">-</span> <span class="string">max</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb |  max &#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lineinfile</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">^varb</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">&quot;varb: [1,2,3,4]&quot;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/test.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">include_vars:</span> <span class="string">~/test.yaml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">varb</span> <span class="bullet">-</span> <span class="string">max</span> <span class="string">again</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; varb |  max &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### test.yaml 变量文件初始内容:</span></span><br><span class="line"></span><br><span class="line">vara: 123                                                                 </span><br><span class="line">varb: [1,2,3]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 最终结果：</span></span><br><span class="line"></span><br><span class="line">第一次 get varb 任务输出 3, 第二次 get varb 任务输出 4</span><br></pre></td></tr></table></figure><blockquote><p>include_vars 模块常用参数：</p><ul><li><p>file 读取某个变量文件</p></li><li><p>dir 读取某个目录的所有变量文件</p></li><li><p>depth 递归层深，仅在 dir 启用的时候有意义</p></li><li><p>files_matching 正则匹配文件名，仅在 dir 启用的时候有意义</p></li><li><p>ignore_files 忽略某个列表，列表中的元素可以为正则表达式</p></li><li><p>name: 变量 x  将读取的文件内容集中复制给变量 x，例如上例中变量 x 为 {vara: 123, varb: [1,2,3,4]}</p></li></ul></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux☞输出个性化开机状态</title>
      <link href="2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/"/>
      <url>2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h4><p>觉得默认的登陆不够给力，无法忽悠机器，用wower的话来说，就是先祖忽悠着你</p><h4 id="效果图在此"><a href="#效果图在此" class="headerlink" title="效果图在此"></a>效果图在此</h4><p><img src="/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/image-20200515110044304.png" alt="image-20200515110044304"></p><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><blockquote><p>将脚本放置到 /etc/profile.d/status.sh</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: zyh</span></span><br><span class="line"><span class="comment"># 需先安装 toilet 和 cowsay 命令</span></span><br><span class="line"><span class="comment"># yum install epel-release -y</span></span><br><span class="line"><span class="comment"># yum install https://rpmfind.net/linux/openmandriva/4.1/repository/x86_64/unsupported/release/toilet-0.2-3-omv4000.x86_64.rpm cowsay -y</span></span><br><span class="line"></span><br><span class="line">user=<span class="variable">$USER</span></span><br><span class="line">home=<span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## blue to echo</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">blue</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[34m[Info] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## green to echo</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">green</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[32m[Success] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Error</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">red</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31m\033[01m[Error] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># warning</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">yellow</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m\033[01m[Warn] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## Error to warning with blink</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bred</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31m\033[01m\033[05m[Error] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Error to warning with blink</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">byellow</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[33m\033[01m\033[05m[Warn] <span class="variable">$1</span>\033[0m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">publicip=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`</span><br><span class="line">localip=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$publicip</span> <span class="variable">$localip</span>&quot;</span> | cowsay -f tux | toilet -f term  --gay</span><br><span class="line"></span><br><span class="line"><span class="comment"># * Check if we&#x27;re somewhere in /home</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$&#123;home&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * Calculate last login</span></span><br><span class="line">lastlog=`lastlog -u <span class="variable">$&#123;user&#125;</span> | grep <span class="variable">$&#123;user&#125;</span> | awk <span class="string">&#x27;&#123;for(i=3;i&lt;=NF;++i) printf(&quot;%s &quot;,$i)&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># * Print Output</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; ::::::::::::::::::::::::::::::::::-STATUS-::::::::::::::::::::::::::::::::::&quot;</span></span><br><span class="line"><span class="comment">#  * Check RAM Usages</span></span><br><span class="line">free_mem_usages=$(awk <span class="string">&#x27;/MemTotal/&#123;total=$2&#125;/MemAvailable/&#123;free=$2&#125;END&#123;print free/1024&quot;/&quot;total/1024&quot; MB&quot;&#125;&#x27;</span> /proc/meminfo)</span><br><span class="line">app_mem_usages=$(awk <span class="string">&#x27;/MemTotal/&#123;total=$2&#125;/MemFree/&#123;free=$2&#125;/Buffers/&#123;buffers=$2&#125;/^Cached/&#123;cached=$2&#125;END&#123;print (total-free-buffers-cached)/1024&quot;/&quot;total/1024&quot; MB&quot;&#125;&#x27;</span>  /proc/meminfo)</span><br><span class="line">all_mem_usages=$(awk <span class="string">&#x27;/MemTotal/&#123;total=$2&#125;/MemFree/&#123;free=$2&#125;END&#123;print (total-free)/1024&quot;/&quot;total/1024&quot; MB&quot;&#125;&#x27;</span>  /proc/meminfo)</span><br><span class="line">blue <span class="string">&quot; Free Memory : <span class="variable">$&#123;free_mem_usages&#125;</span>&quot;</span></span><br><span class="line">blue <span class="string">&quot; Application Memory Usages : <span class="variable">$&#123;app_mem_usages&#125;</span>&quot;</span></span><br><span class="line">blue <span class="string">&quot; System Memory Usages : <span class="variable">$&#123;all_mem_usages&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># * Check Disk Usages</span></span><br><span class="line">diskusages=$(df -PH | awk <span class="string">&#x27;&#123;printf &quot;%-40s%-15s%-15s%-15s%-15s%-15s\n&quot;, $1,$2,$3,$4,$5,$6&#125;&#x27;</span>)</span><br><span class="line">blue <span class="string">&quot; Disk Usages :&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;diskusages&#125;</span>&quot;</span> | toilet -f term --metal -w 200</span><br><span class="line"><span class="comment"># * Check Load Average</span></span><br><span class="line">loadaverage=$(top -n 1 -b | grep <span class="string">&quot;load average:&quot;</span> | awk <span class="string">&#x27;&#123;print $(NF-2) $(NF-1) $NF&#125;&#x27;</span>)</span><br><span class="line">blue <span class="string">&quot; Load Average: <span class="variable">$loadaverage</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://zyh.cool/2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/">linux☞时间</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题记录</title>
      <link href="2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Q-包管理器安装软件出现"><a href="#Q-包管理器安装软件出现" class="headerlink" title="Q:包管理器安装软件出现"></a>Q:包管理器安装软件出现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insserv:  loop involving service xxx at depth 2</span><br></pre></td></tr></table></figure><h4 id="A-删除-xxx-服务，如果-xxx-服务已删除，清理-xxx-服务的启动脚本-etc-init-d-xxx"><a href="#A-删除-xxx-服务，如果-xxx-服务已删除，清理-xxx-服务的启动脚本-etc-init-d-xxx" class="headerlink" title="A:删除 xxx 服务，如果 xxx 服务已删除，清理 xxx 服务的启动脚本 /etc/init.d/xxx"></a>A:删除 xxx 服务，如果 xxx 服务已删除，清理 xxx 服务的启动脚本 /etc/init.d/xxx</h4><hr><h3 id="Q-crontab-如何修改时区"><a href="#Q-crontab-如何修改时区" class="headerlink" title="Q:crontab 如何修改时区"></a>Q:crontab 如何修改时区</h3><h4 id="A-在crontab文件最上方添加命令，例如芝加哥时区"><a href="#A-在crontab文件最上方添加命令，例如芝加哥时区" class="headerlink" title="A:在crontab文件最上方添加命令，例如芝加哥时区"></a>A:在crontab文件最上方添加命令，例如芝加哥时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TZ=<span class="string">&#x27;America/Chicago&#x27;</span>                                          </span><br><span class="line">CRON_TZ=<span class="string">&#x27;America/Chicago&#x27;</span>  `</span><br></pre></td></tr></table></figure><hr><h3 id="Q-su-user-c-“command”-命令出错"><a href="#Q-su-user-c-“command”-命令出错" class="headerlink" title="Q:su - user -c “command” 命令出错"></a>Q:su - user -c “command” 命令出错</h3><h4 id="A-需要用户开启登陆权限，即-etc-passwd-中不能使-sbin-nologin"><a href="#A-需要用户开启登陆权限，即-etc-passwd-中不能使-sbin-nologin" class="headerlink" title="A:需要用户开启登陆权限，即 /etc/passwd 中不能使 /sbin/nologin"></a>A:需要用户开启登陆权限，即 /etc/passwd 中不能使 /sbin/nologin</h4><hr><h3 id="Q-zabbix-自动发现异常，表面看不出问题"><a href="#Q-zabbix-自动发现异常，表面看不出问题" class="headerlink" title="Q:zabbix 自动发现异常，表面看不出问题"></a>Q:zabbix 自动发现异常，表面看不出问题</h3><h4 id="A-zabbix-agent-端开启-debug-模式，配置加入参数-DebugLevel-4"><a href="#A-zabbix-agent-端开启-debug-模式，配置加入参数-DebugLevel-4" class="headerlink" title="A:zabbix-agent 端开启 debug 模式，配置加入参数 DebugLevel=4"></a>A:zabbix-agent 端开启 debug 模式，配置加入参数 DebugLevel=4</h4><hr><h3 id="Q-adminer-无效的CSRF令牌-Invalid-CSRF-token"><a href="#Q-adminer-无效的CSRF令牌-Invalid-CSRF-token" class="headerlink" title="Q:adminer: 无效的CSRF令牌(Invalid CSRF token)"></a>Q:adminer: 无效的CSRF令牌(Invalid CSRF token)</h3><h4 id="A-nginx-worker-user-用户无法访问-php-session-目录"><a href="#A-nginx-worker-user-用户无法访问-php-session-目录" class="headerlink" title="A:nginx worker user 用户无法访问 php session 目录."></a>A:nginx worker user 用户无法访问 php session 目录.</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chgrp <span class="variable">$&#123;nginxWorkerUser&#125;</span> <span class="variable">$&#123;phpSessionDir&#125;</span></span><br><span class="line"><span class="comment"># 如果是yum或者apt安装,那么php的session一般是 /var/lib/php/session</span></span><br></pre></td></tr></table></figure><hr><h3 id="Q-python3-No-module-named-‘PIL’"><a href="#Q-python3-No-module-named-‘PIL’" class="headerlink" title="Q:python3 : No module named ‘PIL’"></a>Q:python3 : No module named ‘PIL’</h3><h4 id="A-pip3-install-pillow"><a href="#A-pip3-install-pillow" class="headerlink" title="A:pip3 install pillow"></a>A:pip3 install pillow</h4><hr><h3 id="Q-python-workon-命令找不到"><a href="#Q-python-workon-命令找不到" class="headerlink" title="Q:python: workon 命令找不到"></a>Q:python: workon 命令找不到</h3><h4 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br><span class="line">echo &#39;export PATH&#x3D;~&#x2F;.local&#x2F;bin:$PATH&#39; &gt;&gt; ~&#x2F;.bashrc # 根据所用shell来决定文件路径</span><br></pre></td></tr></table></figure><hr><h3 id="Q-jira配置163的smtp连接超时-但是服务器终端telnet正常"><a href="#Q-jira配置163的smtp连接超时-但是服务器终端telnet正常" class="headerlink" title="Q:jira配置163的smtp连接超时,但是服务器终端telnet正常"></a>Q:jira配置163的smtp连接超时,但是服务器终端telnet正常</h3><h4 id="A-1"><a href="#A-1" class="headerlink" title="A:"></a>A:</h4><p><img src="/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/image-20200917111208620.png" alt="image-20200917111208620"></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/">linux☞时间</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-tags</title>
      <link href="2020/05/04/ansible%E2%98%9Eplaybook-tags/"/>
      <url>2020/05/04/ansible%E2%98%9Eplaybook-tags/</url>
      
        <content type="html"><![CDATA[<h4 id="tags的定义"><a href="#tags的定义" class="headerlink" title="tags的定义"></a>tags的定义</h4><blockquote><p>tags 可以让你在执行playbook的时候，有选择地执行某些任务，因此 tags 是 tasks 下的关键词</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play &lt;--tags-args&gt;</span><br></pre></td></tr></table></figure><h4 id="tags的参数"><a href="#tags的参数" class="headerlink" title="tags的参数"></a>tags的参数</h4><blockquote><ul><li>–tags=tag_name  执行具有 tag_name 任务</li><li>–skip-tags=tag_name 忽略具有 tag_name 任务</li><li>–list-tags 输出所有</li></ul></blockquote><blockquote><p>tag_name 内置值 ：</p><ul><li>tagged 有tag的task，表示执行具有标记的任务</li><li>untagged 没有tag的task，表示执行不具有标记的任务</li><li>all 所有task，表示执行所有任务</li></ul></blockquote><h4 id="tags的内置标记"><a href="#tags的内置标记" class="headerlink" title="tags的内置标记"></a>tags的内置标记</h4><blockquote><ul><li>always 总是执行某个 task</li><li>never 永远不执行某个 task</li></ul></blockquote><h4 id="tags-的位置"><a href="#tags-的位置" class="headerlink" title="tags 的位置"></a>tags 的位置</h4><blockquote><p>位于play或者tasks都可以，本身具有继承属性，也就是tasks里的tags会继承play的tags</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">father</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">tag</span> <span class="string">son</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">son,children</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;son is here!&quot;</span> <span class="string">&gt;</span> <span class="string">~/son.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">tag</span> <span class="string">daughter</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">daughter,children</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;daughter is here!&quot;</span> <span class="string">&gt;</span> <span class="string">~/daughter.log</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible-playbook test.play --tags=son <span class="comment"># 只会生成 son.log</span></span><br><span class="line">ansible-playbook test.play --tags=father  <span class="comment"># 因继承机制，会生成 son.log 和 daughter.log</span></span><br><span class="line">ansible-playbook test.play --tags=children <span class="comment"># 因都含有，同样会生成 son.log 和 daughter.log</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-错误捕获</title>
      <link href="2020/05/04/ansible%E2%98%9Eplaybook-%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/"/>
      <url>2020/05/04/ansible%E2%98%9Eplaybook-%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>类似于 python 中的 try…except…finally，ansible 可以用 block…rescue…always</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">mkdir</span> <span class="string">/file</span></span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">&quot;No operation permission&quot;</span></span><br><span class="line">      <span class="attr">always:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">&quot;Task End!&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建 file 目录失败，则输出”No operation permission”, 最终总是输出“Task End!”</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-条件判断</title>
      <link href="2020/05/04/ansible%E2%98%9Eplaybook-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
      <url>2020/05/04/ansible%E2%98%9Eplaybook-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h4><ul><li>when</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>==  !=  &gt;  &lt;  &gt;=  &lt;=</li><li>and or not</li><li>( ) 组合，例如 ( a and b ) or c</li></ul><blockquote><p>ansible 某个 task 报错，会导致任务终止，而ignore_errors: true 可以忽略某个任务的条件不满足</p></blockquote><h4 id="is-语句-或者-is-not-语句"><a href="#is-语句-或者-is-not-语句" class="headerlink" title="is 语句 或者 is not 语句"></a>is 语句 或者 is not 语句</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">is</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">debug:</span></span><br><span class="line">      <span class="attr">msg:</span> <span class="string">&quot;xxx is ok&quot;</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">var</span> <span class="string">is</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><blockquote><p>判断文件</p><ul><li>xxx 是 exists ，表示若 var 存在，条件为真</li><li>xxx 是 file, 表示若 var 是文件，条件为真</li><li>xxx 是 directory， 表示若 var 是目录，条件为真</li><li>xxx 是 link，表示若 var 是软连接，条件为真</li><li>xxx 是 mount，表示若 var 是挂载点，条件为真</li></ul></blockquote><blockquote><p>判断变量</p><ul><li>若 xxx 是 defined, 表示若 var 已定义，条件为真</li><li>若 xxx 是 undefined， 表示若 var 未定义，条件为真</li><li>若 xxx 是 none， 表示若 var 是空，条件为真</li></ul></blockquote><blockquote><p>判断任务状态</p><ul><li>若 xxx 是 success， 若 var 为某任务返回结果，则任务状态成功，条件为真</li><li>若 xxx 是 failure， 若 var 为某任务返回结果，则任务状态失败，条件为真</li><li>若 xxx 是 change，若 var 为某任务返回结果，则任务状态改变，条件为真</li><li>若 xxx 是 skip， 若 var 为某任务返回结果，则任务被忽略，条件为真</li></ul></blockquote><blockquote><p>判断字符串</p><ul><li><p>若 xxx 是 string，若 var 是字符串，条件为真</p></li><li><p>若 xxx 是 lower，若 var 是纯小写，条件为真</p></li><li><p>若 xxx 是 upper，若 var 是纯大写，条件为真</p></li></ul></blockquote><blockquote><p>判断数字</p><ul><li><p>若 xxx 是 number， 若 var 是数字，条件为真。 var: “123” ,这里 var 是字符串，不是数字</p></li><li><p>若 xxx 是 even，若 var 是偶数，条件为真</p></li><li><p>若 xxx 是 odd， 若 var 是奇数，条件为真</p></li><li><p>若 xxx 是 divisibleby(num), 若 var 可以被 num 整除，条件为真</p></li></ul></blockquote><blockquote><p>判断集合</p><ul><li>若 xxx 是 subset(list)，若 var 是 list 的子集，条件为真</li><li>若 xxx 是 superset(list), 若 var 是 list 的父集，条件为真</li></ul></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-循环</title>
      <link href="2020/05/04/ansible%E2%98%9Eplaybook-%E5%BE%AA%E7%8E%AF/"/>
      <url>2020/05/04/ansible%E2%98%9Eplaybook-%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="常见的循环"><a href="#常见的循环" class="headerlink" title="常见的循环"></a>常见的循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">debug</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">a</span>,<span class="string">b</span> ]</span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">A</span>,<span class="string">B</span>, [ <span class="string">D</span>,<span class="string">E</span>,<span class="string">F</span> ]]</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>with_list 输出最表层元素，在简例中，会输出 [ a,b ] 和 [ A,B, [ D,E,F ] ]</p></li><li><p>with_item 递归输出所有层元素</p></li><li><p>with_together 合并两个列表，元素按照对应下标结合，如果某一方列表元素缺失，则用null代替</p></li><li><p>with_indexed_items 最表层所有列表合并为一个新列表并循环。item由{ list.index: list.value } 构成。在简例中，新列表是[ a,b,A,B, [ D,E,F ]]</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">msg:</span> <span class="string">&quot;Index:<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>, Value:<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[0, u<span class="string">&#x27;a&#x27;</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Index:0, Vaule:a&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[1, u<span class="string">&#x27;b&#x27;</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Index:1, Vaule:b&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[2, u<span class="string">&#x27;A&#x27;</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Index:2, Vaule:A&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[3, u<span class="string">&#x27;B&#x27;</span>]) =&gt; &#123;</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Index:3, Vaule:B&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> ok: [localhost] =&gt; (item=[4, [u<span class="string">&#x27;D&#x27;</span>, u<span class="string">&#x27;E&#x27;</span>, u<span class="string">&#x27;F&#x27;</span>]]) =&gt; &#123;</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Index:4, Vaule:[u&#x27;D&#x27;, u&#x27;E&#x27;, u&#x27;F&#x27;]&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>with_random_choice 随机输出一个最表层列表元素，简例中输出 [a,b] 或者 [ A,B, [ D,E,F ]]</p></li></ul></blockquote><h4 id="dict-字典循环"><a href="#dict-字典循环" class="headerlink" title="dict 字典循环"></a>dict 字典循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">debug</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;Name:<span class="template-variable">&#123;&#123; item.key &#125;&#125;</span>, gender:<span class="template-variable">&#123;&#123; item.value &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_dict:</span></span><br><span class="line">        <span class="attr">Zhangsan:</span> <span class="string">male</span></span><br><span class="line">        <span class="attr">Lisi:</span> <span class="string">female</span></span><br></pre></td></tr></table></figure><blockquote><p>输出所有字典</p></blockquote><h4 id="sequence-序列循环"><a href="#sequence-序列循环" class="headerlink" title="sequence 序列循环"></a>sequence 序列循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">sequence</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_sequence:</span></span><br><span class="line">        <span class="string">start=1</span></span><br><span class="line">        <span class="string">end=5</span></span><br><span class="line">        <span class="string">stride=2</span></span><br><span class="line">        <span class="string">format=&quot;I&#x27;m</span> <span class="string">%0.4f&quot;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>with_sequence 获取奇偶数，start和end是起止点，stride 是步长（步长可以为负值），format是格式化</li></ul></blockquote><h4 id="nested-嵌套循环"><a href="#nested-嵌套循环" class="headerlink" title="nested 嵌套循环"></a>nested 嵌套循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">nested</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;mkdir /mnt/<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>/<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">with_nested:</span></span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">a</span>,<span class="string">b</span> ]</span><br><span class="line">        <span class="bullet">-</span> [ <span class="string">A</span>,<span class="string">B</span>,<span class="string">C</span> ]</span><br></pre></td></tr></table></figure><blockquote><p>两个列表做笛卡尔积, 例如构建环境目录</p></blockquote><h4 id="subelements-子元素循环"><a href="#subelements-子元素循环" class="headerlink" title="subelements 子元素循环"></a>subelements 子元素循环</h4><ul><li>简例</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">debug:</span></span><br><span class="line">                    <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.0.name &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.0.gender &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="attr">with_subelements:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users &#125;&#125;</span>&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">content</span></span><br></pre></td></tr></table></figure><blockquote><p>分解 , 选中列表内某一个列表元素 content, 与作为一个临时整体的剩余元素构建笛卡尔积，形成 item</p></blockquote><h4 id="file-文件循环"><a href="#file-文件循环" class="headerlink" title="file 文件循环"></a>file 文件循环</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">with_file:</span></span><br><span class="line">  <span class="string">/mnt/a.ini</span></span><br><span class="line">  <span class="string">/mnt/b.ini</span></span><br></pre></td></tr></table></figure><blockquote><p>始终循环获取ansible主机里文件的内容。（与目标主机无关）</p></blockquote><h4 id="fileglob-寻找通配符匹配的文件"><a href="#fileglob-寻找通配符匹配的文件" class="headerlink" title="fileglob 寻找通配符匹配的文件"></a>fileglob 寻找通配符匹配的文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">with_fileglob:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/home/zyh/test/dirA/*</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/home/zyh/test/dirB/[0-9].ini</span></span><br></pre></td></tr></table></figure><blockquote><p>始终循环获取ansible主机指定目录中匹配的文件名和路径。（与目标主机无关）</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-系统相关</title>
      <link href="2020/04/29/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/"/>
      <url>2020/04/29/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><blockquote><p>crontab 计划任务</p><p>参数介绍：</p><p>name 计划任务注释，多次操作同名任务，只会修改，而不会新加</p><p>时间参数：</p><ul><li><p>minute hour day month weekday </p></li><li><p>special_time : @reboot @yearly @monthly @weekly @daily @hourly (每xxx执行)</p></li></ul><p>user 添加到指定用户计划任务中</p><p>job 计划任务执行命令</p><p>state 当值为absent时，指删除任务. 只需指定 name.</p><p>disabled 注释任务，若任务信息和之前不一致，会同时修改任务</p><p>backup 先备份再操作, 备份文件位于 /tmp/crontabxxxx</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m cron -a <span class="string">&quot;name=&#x27;test cron module&#x27; user=zyh special_time=hourly job=&#x27;ls /home/zyh &gt; /home/zyh/cron.log 2&gt;&amp;1&#x27;&quot;</span></span><br><span class="line">ansible localhost -m cron -a <span class="string">&quot;name=&#x27;test cron module&#x27; state=absent&quot;</span></span><br></pre></td></tr></table></figure><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><blockquote><p>调用远程系统自身的服务管理模块，例如 centos6 的 service ，或者 centos7 的 systemctl</p><p>参数介绍:</p><p>name 服务名</p><p>state 执行动作 started, stopped, restarted, reloaded</p><p>enabled 开机自启动</p></blockquote><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><blockquote><p>用户管理</p><p>常用参数介绍：</p><p>name 用户名</p><p>group 用户组 groups 用户附加组</p><ul><li>append 额外附加用户附加组</li></ul><p>shell 指定默认shell，比如/usr/sbin/nologin</p><p>state 值为 absent 表示删除用户，值为 present 表示用户必须存在</p><ul><li>remove 删除用户时，同时删除用户家目录</li></ul><p>password 用户密码。（需要传递加密密码，不能是明文密码）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> crypt:</span><br><span class="line">passwd=</span><br><span class="line">print(crypt.crypt(passwd))</span><br></pre></td></tr></table></figure><p>generate_ssh_key 相当于远程执行 ssh-keygen 命令（不加任何参数，一路回车）。若已经存在~/.ssh/{id_rsa, id_rsa.pub}, 则不执行</p><ul><li>ssh_key_file 自定义私钥名和私钥存放路径, 公钥也会在自定义路径下生成</li></ul></blockquote><h4 id="group"><a href="#group" class="headerlink" title="group"></a>group</h4><blockquote><p>管理用户组</p><p>参数介绍：</p><p>name 组名</p><p>state 组状态, 值为 absent 指删除(组本身并非用户主要组)</p></blockquote><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><blockquote><p>获取机器信息</p><p>参数介绍：</p><p>gather_subset 获取某个子集（all, min, hardware, network, virtual, ohai, facter）</p><p>filter 获取某个集合的某个key</p><p>fact_path 自定义信息存放目录</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup 默认会搜索目标主机/etc/ansible/facts.d 下的自定义信息,例如 family.ini</span></span><br><span class="line"><span class="section">[family]</span></span><br><span class="line"><span class="attr">father</span>=Zhangsan</span><br><span class="line"><span class="attr">son</span>=Zhangxiaosan</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-handle</title>
      <link href="2020/04/28/ansible%E2%98%9Eplaybook-handle/"/>
      <url>2020/04/28/ansible%E2%98%9Eplaybook-handle/</url>
      
        <content type="html"><![CDATA[<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>用一个短路判断来说，就是两者是串联关系，handlers 用来处理任务后续</p><p>tasks &amp;&amp; handlers</p><p>tasks &amp;&amp; handlers - listen （handlers 组）</p><h4 id="handlers-的-playbook-样本"><a href="#handlers-的-playbook-样本" class="headerlink" title="handlers 的 playbook 样本"></a>handlers 的 playbook 样本</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/sbin/nginx</span> <span class="string">-t</span></span><br><span class="line">    <span class="attr">notify:</span></span><br><span class="line">      <span class="string">log</span></span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">meta:</span> <span class="string">flush_handlers</span> </span><br><span class="line">  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;nginx check success&quot;</span> <span class="string">&gt;</span> <span class="string">~/playbook.log</span></span><br></pre></td></tr></table></figure><blockquote><p>多个tasks的时候，tasks后面的 <code>meta: flush_handlers</code> 可以让tasks执行完，立马执行关联的handlers。否则handlers会在所有tasks执行完后，才开始执行</p></blockquote><h4 id="handlers-listen-的-playbook-样本"><a href="#handlers-listen-的-playbook-样本" class="headerlink" title="handlers-listen 的 playbook 样本"></a>handlers-listen 的 playbook 样本</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/sbin/nginx</span> <span class="string">-t</span></span><br><span class="line">    <span class="attr">notify:</span></span><br><span class="line">      <span class="string">log</span> <span class="string">group</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log1</span></span><br><span class="line">    <span class="attr">listen:</span> <span class="string">log</span> <span class="string">group</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;nginx check success 1&quot;</span> <span class="string">&gt;</span> <span class="string">~/playbook.log</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log2</span></span><br><span class="line">    <span class="attr">listen:</span> <span class="string">log</span> <span class="string">group</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">&quot;nginx check success 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">~/playbook.log</span></span><br></pre></td></tr></table></figure><blockquote><p>handlers 通过 listen 绑定在一起， tasks 关联 liasten 绑定 handlers 组，最终 playbook.log 将会写入两行信息</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> handle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis☞备份</title>
      <link href="2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/"/>
      <url>2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文主要记录 redis 的两种数据磁盘固化方式。<br>涉及到相关参数，简单的命令操作等。</p><h4 id="rdb"><a href="#rdb" class="headerlink" title="rdb"></a>rdb</h4><blockquote><p>通过fork一个子进程来存储某一时刻redis数据(bgsave方式)。rdb持久化是默认方式。</p><p>特点：</p><ul><li><p>小幅度丢失数据(取决于save或者bgsave命令的执行周期)，这里我们不说save，应该不会用到这个</p></li><li><p>恢复速度快</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩rdb文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="comment"># rdb 文件名称</span></span><br><span class="line">dbfilename redis-6379.rdb</span><br><span class="line"><span class="comment"># rdb文件保存目录</span></span><br><span class="line">dir /redis/data/</span><br></pre></td></tr></table></figure><ul><li>数据自动写入策略 (满足下列规则，就执行bgsave)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 900s内至少达到一条写命令</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300s内至少达至10条写命令</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60s内至少达到10000条写命令</span></span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><ul><li>数据人工写入策略 (每10分钟计划任务调用一次bgsave)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * root /<span class="built_in">export</span>/redis/bin/redis-cli -h 127.0.0.1 bgsave &gt;&gt; /<span class="built_in">export</span>/redis/bgsave.log 2&gt;&amp;1  </span><br></pre></td></tr></table></figure><blockquote><p>bgsave 因需要fork子进程，所以需要额外预留空闲的物理内存，在overcommit_memory=1开启的情况下，预留内存大小 &gt; 周期变化数据大小</p></blockquote><h4 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h4><blockquote><p>记录的是redis每一次的写入操作记录</p><p>特点：</p><ul><li>恢复速度慢</li><li>丢失数据小</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启aof机制</span></span><br><span class="line">appendonly yes</span><br><span class="line"><span class="comment"># aof文件名</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment"># 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或no。 everysec 每秒一次</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 默认不重写aof文件,意思就是每次 appendfsync 就压缩整合aof文件，避免aof过大，不推荐开启，影响性能</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="comment"># 保存目录</span></span><br><span class="line">dir /redis/data/</span><br></pre></td></tr></table></figure><ul><li>人工计划任务重写</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/10 * * * * root /<span class="built_in">export</span>/redis/bin/redis-cli -h 127.0.0.1 bgrewriteaof &gt;&gt; /<span class="built_in">export</span>/redis/bgrewriteaof.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><ul><li>aof 因服务器挂掉损坏可以修复</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof -fix file.aof</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>rdb 或者 aof 根据业务二选一即可，没必要都开启，但是不管是哪一种，都可以在人工计划任务之后，复刻一份备份文件到云端对象存储中。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://zyh.cool/2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/">安装脚本☞redis</a></li><li><a href="https://zyh.cool/2018/02/02/redis%E2%98%9E%E8%8E%B7%E5%8F%96%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEttl%E7%9A%84key/">redis☞调整内核参数</a></li><li><a href="https://thelighter.github.io/2020/02/19/redis/">redis是什么——redis优点和特性</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-软件包管理</title>
      <link href="2020/04/26/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
      <url>2020/04/26/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="apt-repository"><a href="#apt-repository" class="headerlink" title="apt_repository"></a>apt_repository</h4><blockquote><p>ubuntu 下：</p><p>repo 指定库地址，例如 nginx 地址 ppa:nginx/stable</p><p>state 值为 absent 时为删除</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m apt_repository -a <span class="string">&quot;repo=ppa:nginx/stable&quot;</span> -b --ask-become-pass</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;repo&quot;</span>: <span class="string">&quot;ppa:nginx/stable&quot;</span>, </span><br><span class="line">    <span class="string">&quot;state&quot;</span>: <span class="string">&quot;present&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#( 04/24/20@ 3:10PM )( zyh@zyh ):~</span></span><br><span class="line">   cat  /etc/apt/sources.list.d/ppa_nginx_stable_bionic.list</span><br><span class="line">deb http://ppa.launchpad.net/nginx/stable/ubuntu bionic main</span><br></pre></td></tr></table></figure><h4 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h4><blockquote><p>常用参数：</p><p>name 包名</p><p>state 包状态 （absent-删除，latest-最新包,  present-默认安装） latest 相当于升级包</p><p>upgrade 升级 （yes，dist，full，no-默认）</p><p><a href="https://docs.ansible.com/ansible/latest/modules/apt_module.html#apt-module">https://docs.ansible.com/ansible/latest/modules/apt_module.html#apt-module</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m apt -a <span class="string">&quot;name=nginx state=present&quot;</span> -b --ask-become-pass</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;cache_update_time&quot;</span>: 1587713114, </span><br><span class="line">    <span class="string">&quot;cache_updated&quot;</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [], </span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;Reading package lists...\nBuilding dependency tree.......</span></span><br></pre></td></tr></table></figure><h4 id="yum-repository"><a href="#yum-repository" class="headerlink" title="yum_repository"></a>yum_repository</h4><blockquote><p>name 仓库名</p><p>baseurl 仓库地址</p><p>enabled （yes-默认，no)</p><p>gpgcheck (yes, no)</p><p>gpgcakey 指定 gpg ca 公钥</p><p>state (present-默认，absent-删除)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m yum_repository -a <span class="string">&quot;name=epel baseurl=https://download.fedoraproject.org/pub/epel/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/&quot;</span></span><br></pre></td></tr></table></figure><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><blockquote><p>name 包名</p><p>state (absent-删除，present-安装-默认值，latest-更新)</p><p>disable_gpg_check 关闭gpg检查（用于源gpg检查没有的情况）</p><p>enablerepo 安装包的时候，先临时启用某个源</p><p>disablerepo 安装包的时候，先临时禁用某个源</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-命令调用</title>
      <link href="2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E5%91%BD%E4%BB%A4%E8%B0%83%E7%94%A8/"/>
      <url>2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E5%91%BD%E4%BB%A4%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><blockquote><p>远程执行一个命令</p><p>部分参数解析：</p><p>chdir 远程工作目录</p><p>executable 远程执行shell，需要绝对路径</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible localhost -m shell -a <span class="string">&quot;chdir=/ ls&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><blockquote><p>远程执行一个ansible主机环境的脚本</p><p>部分参数解析：</p><p>chdir 远程工作目录</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls /<span class="built_in">export</span>`;<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#-------------</span></span><br><span class="line">ansible -i hosts <span class="built_in">test</span> -m script -a <span class="string">&quot;/home/zyh/test.sh&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.200.10.212 | CHANGED =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;changed&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">&quot;rc&quot;</span>: 0, </span><br><span class="line">    <span class="string">&quot;stderr&quot;</span>: <span class="string">&quot;Shared connection to 10.200.10.212 closed.\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stderr_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Shared connection to 10.200.10.212 closed.&quot;</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="string">&quot;stdout&quot;</span>: <span class="string">&quot;jdk1.8.0_191\r\njdk8\r\nsen\r\n&quot;</span>, </span><br><span class="line">    <span class="string">&quot;stdout_lines&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;jdk1.8.0_191&quot;</span>, </span><br><span class="line">        <span class="string">&quot;jdk8&quot;</span>, </span><br><span class="line">        <span class="string">&quot;sen&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞常用模块-文本文件操作</title>
      <link href="2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2020/04/20/ansible%E2%98%9E%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97-%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h2><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><blockquote><p>path 文件对象地址<br>state 文件类型或者动作状态 （touch: 针对文件, directory：针对目录, link：针对软连接, hard：针对硬链接)</p><p>src 软硬链接的源文件</p><p>owner 属主</p><p>group 属组</p><p>mode 数字权限</p><p>recurse 递归操作</p></blockquote><h4 id="blockinfile"><a href="#blockinfile" class="headerlink" title="blockinfile"></a>blockinfile</h4><blockquote><p>在指定位置，插入文本块，并在文本块开头和结尾添加标记. 标记用来确认文本块的位置，一些参数会通过标记位置来修改文本块。</p><p>注释格式:</p><p># BEGIN xxx</p><p># END xxx</p><p>参数简介：</p><p>path 文件对象地址</p><p>block 需要添加的文本块</p><p>marker 自定义标记 xxx 部分，如果存在相同标记，则优先处理相同标记的文本块。</p><p>state 状态为absent时，删除标记包括的文本块</p><p>insertafter 正则或者EOF，插入匹配的指定行之后</p><p>insertbefore 正则或者BOF，插入匹配的指定行之前 </p><p>backup 先备份，再操作，备份文件后缀是时间戳</p><p>create 文件不存在，则创建</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这条命令中，如果marker标记已经存在，则insertafter将无效</span></span><br><span class="line">-m blockinfile -a <span class="string">&#x27;path= block=&quot; &quot; marker=&quot;#&#123;mark&#125; xxx&quot; insertafter=&quot;正则&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="lineinfile"><a href="#lineinfile" class="headerlink" title="lineinfile"></a>lineinfile</h4><blockquote><p>根据指定的内容，进行替换或删除</p><p>参数简介：</p><p>path 文件对象地址。</p><p>line 指定行内容（在没有正则的情况下，需要全匹配）。</p><p>regexp 通过正则匹配行，并将此行替换成 line 指定的内容，regexp有额外扩展参数，例如 backref。</p><ul><li><p>line  若line匹配到某行，则不修改，若无匹配，则添加line至末尾。</p></li><li><p>regexp + line  若有regexp匹配到某行，替换匹配行为line；如果没有匹配，则将line追加到行尾。此时，regexp不支持分组。</p></li><li><p>regexp + backrefs （true）+ line  若有regexp匹配到某行，替换匹配行为line；如果没有匹配，则保持源文件不变；此时，regexp支持分组。</p></li></ul><p>state 状态为absent时，删除匹配行</p><p>insertafter 正则或者EOF，插入匹配的指定行之后</p><p>insertbefore 正则或者BOF，插入匹配的指定行之前 </p><p>backup 先备份，再操作</p><p>create 文件不存在，则创建</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-m lineinfile -a <span class="string">&#x27;path= line=&quot; &quot; insertafter=&quot;正则&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><blockquote><p>替换文件对象中符合匹配的字符串</p><p>path 文件对象地址</p><p>regexp 正则匹配</p><p>replace 替换后的字符串</p><p>backup 先备份，再操作</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-aws</title>
      <link href="2020/04/14/ansible%E2%98%9Eplaybook-aws/"/>
      <url>2020/04/14/ansible%E2%98%9Eplaybook-aws/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/ansible/ansible/blob/stable-2.9/contrib/inventory/">https://github.com/ansible/ansible/blob/stable-2.9/contrib/inventory/</a></p><p><a href="https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html">https://docs.ansible.com/ansible/latest/modules/list_of_all_modules.html</a></p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html#inventory-script-example-aws-ec2">https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html#inventory-script-example-aws-ec2</a> （深坑，脚本404，找到了脚本，各种错误，请扔一边）</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>通过 ansible 获取大区下 ec2 资源信息</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export AWS_ACCESS_KEY_ID=&#x27;AK123&#x27;</span><br><span class="line">export AWS_SECRET_ACCESS_KEY=&#x27;abc123&#x27;</span><br><span class="line">export EC2_INI_PATH=ec2.ini</span><br></pre></td></tr></table></figure><h3 id="库存-inventory"><a href="#库存-inventory" class="headerlink" title="库存(inventory)"></a>库存(inventory)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line">localhost</span><br></pre></td></tr></table></figure><h3 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">ec2</span></span><br><span class="line">    <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">gather_facts:</span> <span class="literal">no</span>   <span class="comment"># 我们要这信息干什么？我们是有目标的</span></span><br><span class="line">    <span class="attr">connection:</span> <span class="string">local</span> <span class="comment"># 木有定义资源</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tasks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">ec2</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">ec2_instance_info:</span></span><br><span class="line">          <span class="attr">region:</span> <span class="string">cn-north-1</span></span><br><span class="line">        <span class="attr">register:</span> <span class="string">data_output</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">show</span> <span class="string">ec2</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">debug:</span></span><br><span class="line">          <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; data_output|json_query(&#x27;instances[*].network_interfaces[*].private_ip_address&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i hosts ec2.yml</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TASK [show ec2 info] ******************************************************************************************************************************************************</span><br><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &quot;10.100.10.250&quot;</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            &quot;10.100.10.252&quot;</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            &quot;10.100.10.210&quot;</span><br><span class="line">        ], </span><br><span class="line">        [</span><br><span class="line">            &quot;10.100.10.251&quot;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 包管理工具 scoop</title>
      <link href="2020/04/13/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop/"/>
      <url>2020/04/13/windows-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-scoop/</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> get.scoop.sh | <span class="built_in">iex</span></span><br><span class="line">scoop install aria2</span><br><span class="line">scoop config aria2<span class="literal">-max</span><span class="literal">-connection</span><span class="literal">-per</span><span class="literal">-server</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="operator">-split</span> <span class="number">16</span></span><br><span class="line">scoop config aria2<span class="literal">-min</span><span class="operator">-split</span><span class="literal">-size</span> <span class="number">1</span>M</span><br><span class="line">scoop bucket add extras</span><br><span class="line">scoop install Terminus</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windws </tag>
            
            <tag> scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins☞安装和基本配置</title>
      <link href="2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>jenkins </p><blockquote><p><a href="https://github.com/jenkinsci/docker/blob/master/README.md">https://github.com/jenkinsci/docker/blob/master/README.md</a></p></blockquote></li></ul>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jenkinsDomain=</span><br><span class="line">gitlabDomain=</span><br><span class="line">gitlabWanIP=</span><br><span class="line">jenkinsDns=</span><br><span class="line">docker volume create jenkins_home</span><br><span class="line">docker run --name jenkins --hostname <span class="variable">$&#123;jenkinsDomain&#125;</span> --add-host <span class="variable">$&#123;gitlabDomain&#125;</span>:<span class="variable">$&#123;gitlabWanIP&#125;</span> --restart always -d -v jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 -p 8080:8080 -p 50000:50000 --dns <span class="variable">$&#123;jenkinsDns&#125;</span> jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -u root jenkins /bin/bash</span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">pip install awscli</span><br><span class="line">pip install ansible</span><br><span class="line">groupadd -g &lt;docker-group-id&gt; docker</span><br><span class="line">usermod -aG docker jenkins</span><br><span class="line">docker stop jenkins &amp;&amp; docker start jenkins</span><br></pre></td></tr></table></figure><ul><li><p>用户和角色管理</p><ol><li><p>安装插件 Role-based Authorization Strategy</p></li><li><p>启用插件 Configure Global Security 中启用 Role-Based Strategy 策略</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/image-20200515180703925.png" alt="image-20200515180703925"></p></li><li><p>配置全局角色和项目角色 Manage and Assign Roles - Manage Roles</p><p>全局角色<strong>Global roles</strong> 设置两个： admin 和 read</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/image-20200515181449965.png" alt="image-20200515181449965"></p><p>项目角色<strong>Project roles</strong>：每一个项目设置一个</p><p>Pattern: <code>.*\.&lt;项目名&gt; </code></p><p>权限: 看图</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/image-20200515181359533.png" alt="image-20200515181359533"></p></li><li><p>创建项目用户</p></li><li><p>分配角色 Manage and Assign Roles - Assign Roles </p><p>给管理员分配 admin，给项目用户分配 read 和 cp (cp是我设置的项目角色)</p><p><img src="/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/image-20200515181740598.png" alt="image-20200515181740598"></p></li></ol></li><li><p>安装配置文件插件 Config File Provider</p></li><li><p>自动安装 git ，jdk，maven （这种方式只有在进行了一次构建后，才会安装）</p></li><li><p>maven 私服配置文件</p><ol><li><p>通过 Config File Provider 添加一个项目maven配置</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;          xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;          xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;  &lt;servers&gt;    &lt;server&gt;     &lt;id&gt;&lt;Repository Policy名&gt;&lt;/id&gt;     &lt;username&gt;&lt;/username&gt;     &lt;password&gt;&lt;/password&gt;    &lt;/server&gt;    &lt;server&gt;     &lt;id&gt;&lt;Repository Policy名&gt;&lt;/id&gt;      &lt;username&gt;&lt;/username&gt;      &lt;password&gt;&lt;/password&gt;    &lt;/server&gt;  &lt;/servers&gt;  &lt;profiles&gt;      &lt;profile&gt;        &lt;id&gt;&lt; 仓库名 &gt;&lt;/id&gt;        &lt;repositories&gt;          &lt;repository&gt;            &lt;id&gt;&lt;maven 仓库组或仓库ID&gt;&lt;/id&gt;            &lt;url&gt;&lt;maven 私服具体仓库组或仓库地址&gt;&lt;/url&gt;            &lt;releases&gt;              &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/releases&gt;            &lt;snapshots&gt;              &lt;enabled&gt;true&lt;/enabled&gt;            &lt;/snapshots&gt;          &lt;/repository&gt;        &lt;/repositories&gt;      &lt;/profile&gt;  &lt;/profiles&gt;  &lt;activeProfiles&gt;     &lt;activeProfile&gt;项目名&lt;/activeProfile&gt;  &lt;/activeProfiles&gt;&lt;/settings&gt;</code></pre></li><li><p>然后构建项目的时候，构建环境-Provide Configuration files-Files，并且Build-高级-Settings file-Provided settings.xml</p></li></ol></li></ul><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/06/09/jenkins%E2%98%9E%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAdocker%E5%91%BD%E4%BB%A4/">jenkins☞从容器中访问宿主机docker命令</a></li><li><a href="https://zyh.cool/2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/">日志☞ELK简单部署-容器方式</a></li><li><a href="https://songrgg.github.io/operation/how-to-build-a-smallest-docker-image/">how to build the smallest docker image as fast as you can</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞php包管理方式</title>
      <link href="2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>介绍如何通过yum或者apt-get安装php和php-fpm<br>适合php7.2</p><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><blockquote><p>安装源 <a href="https://webtatic.com/">https://webtatic.com/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">yum install gcc-c++ geoip-devel -y</span><br><span class="line">yum install php72w-cli php72w-devel mod_php72w php72w-fpm php72w-opcache php72w-gd php72w-bcmath php72w-xml php72w-lzo -y</span><br><span class="line"></span><br><span class="line">mkdir /<span class="built_in">export</span>/logs/php -p</span><br><span class="line"><span class="built_in">cd</span> /etc/php-fpm.d/ &amp;&amp; mv www.conf www.conf.bak</span><br><span class="line">webName=www</span><br><span class="line">cat &gt; www.conf &lt;&lt; EOF</span><br><span class="line">[<span class="variable">$&#123;webName&#125;</span>]</span><br><span class="line">user = webapps</span><br><span class="line">group = webapps</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm = static</span><br><span class="line">pm.max_children = 20</span><br><span class="line">pm.max_requests = 1024</span><br><span class="line">pm.status_path = /php-fpm_status</span><br><span class="line">request_slowlog_timeout = 2s</span><br><span class="line">slowlog = /<span class="built_in">export</span>/logs/php/php-slow.log</span><br><span class="line">php_admin_value[error_log] = /<span class="built_in">export</span>/logs/php/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br><span class="line">php_value[session.save_handler] = files</span><br><span class="line">php_value[session.save_path]    = /var/lib/php/session</span><br><span class="line">php_value[soap.wsdl_cache_dir]  = /var/lib/php/wsdlcache</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 安装源中没有的模块</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">phpModule=&lt;模块名&gt;</span><br><span class="line">wget https://pecl.php.net/get/<span class="variable">$&#123;phpModule&#125;</span> &amp;&amp; mkdir redis-src &amp;&amp; tar xf redis --strip-components 1 -C <span class="variable">$&#123;phpModule&#125;</span>-src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;phpModule&#125;</span>-src &amp;&amp; phpize &amp;&amp; ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cat &gt; /etc/php.d/<span class="variable">$&#123;phpModule&#125;</span>.ini &lt;&lt; EOF</span><br><span class="line">; Enable zip extension module</span><br><span class="line">extension=<span class="variable">$&#123;phpModule&#125;</span>.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line">apt-get install php7.2 php7.2-dev php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml  php7.2-intl php7.2-yac php7.2-yaf php7.2-redis php7.2-lzo php7.2-geoip php7.2-pecl php7.2-pear php7.2-dev php7.2-gd php7.2-zip php7.2-xml php7.2-bcmath</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞nginx编译方式</a></li><li><a href="https://zyh.cool/2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞php编译方式</a></li><li><a href="http://xugaoxiang.com/2017/03/22/phpstorm-2017.1.3-license/">phpstorm-2017.1.3-license</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞基础信息</title>
      <link href="2020/03/15/ansible%E2%98%9E%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/"/>
      <url>2020/03/15/ansible%E2%98%9E%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br><span class="line">pip3 install ansible --user -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p>pip 安装方式，不会生成默认配置<br><a href="https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg">https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg</a></p></blockquote><h3 id="关闭-known-hosts-检查"><a href="#关闭-known-hosts-检查" class="headerlink" title="关闭 known_hosts 检查"></a>关闭 known_hosts 检查</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/ansible/ansible.cfg or ~/.ansible.cfg</span></span><br><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="attr">host_key_checking</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="库存和变量"><a href="#库存和变量" class="headerlink" title="库存和变量"></a>库存和变量</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/ansible/hosts 默认位置，但可自定义，并通过 -i 来调用</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># 单主机</span></span><br><span class="line">mail.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># http_port 主机变量</span></span><br><span class="line"><span class="section">[webservers]</span></span><br><span class="line">www[01:50].example.comhttp_port=80</span><br><span class="line"></span><br><span class="line"><span class="section">[dbservers]</span></span><br><span class="line">db-[a:f].example.comansible_connection=ssh        ansible_ssh_user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组变量 ==&gt; 组名:vers</span></span><br><span class="line"><span class="section">[dbservers:vars]</span></span><br><span class="line"><span class="attr">mysql_port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套组 ==&gt; 父组:children</span></span><br><span class="line"><span class="section">[webproject:children]</span></span><br><span class="line">webservers</span><br><span class="line">dbservers</span><br></pre></td></tr></table></figure><blockquote><p>中括号表示分组，可以用组名代替组资源 ;</p></blockquote><h3 id="结构化变量"><a href="#结构化变量" class="headerlink" title="结构化变量"></a>结构化变量</h3><blockquote><p>采用 yaml 配置，格式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="string">变量:值</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/ansible/group_vars/&lt;组名&gt; # &lt;组名&gt;文件或路径下的文件，均会被认为是&lt;组名&gt;变量</span><br><span class="line">/etc/ansible/host_vars/&lt;主机名&gt; # &lt;主机名&gt;文件或路径下的文件，均会被认为是&lt;组名&gt;变量</span><br></pre></td></tr></table></figure><h4 id="常用的变量"><a href="#常用的变量" class="headerlink" title="常用的变量"></a>常用的变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible_ssh_host</span><br><span class="line">      将要连接的远程主机名.与你想要设定的主机的别名不同的话,可通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_port</span><br><span class="line">      ssh端口号.如果不是默认的端口号,通过此变量设置.</span><br><span class="line"></span><br><span class="line">ansible_ssh_user</span><br><span class="line">      默认的 ssh 用户名</span><br><span class="line"></span><br><span class="line">ansible_ssh_pass</span><br><span class="line">      ssh 密码(这种方式并不安全,我们强烈建议使用 --ask-pass 或 SSH 密钥)</span><br><span class="line"></span><br><span class="line">ansible_sudo_pass</span><br><span class="line">      sudo 密码(这种方式并不安全,我们强烈建议使用 -b --ask-become-pass)</span><br><span class="line"></span><br><span class="line">ansible_sudo_exe (new in version 1.8)</span><br><span class="line">      sudo 命令路径(适用于1.8及以上版本)</span><br><span class="line"></span><br><span class="line">ansible_connection</span><br><span class="line">      与主机的连接类型.比如:local, ssh 或者 paramiko. Ansible 1.2 以前默认使用 paramiko.1.2 以后默认使用 &#x27;smart&#x27;,&#x27;smart&#x27; 方式会根据是否支持 ControlPersist, 来判断&#x27;ssh&#x27; 方式是否可行.</span><br><span class="line"></span><br><span class="line">ansible_ssh_private_key_file</span><br><span class="line">      ssh 使用的私钥文件.适用于有多个密钥,而你不想使用 SSH 代理的情况.</span><br><span class="line"></span><br><span class="line">ansible_shell_type</span><br><span class="line">      目标系统的shell类型.默认情况下,命令的执行使用 &#x27;sh&#x27; 语法,可设置为 &#x27;csh&#x27; 或 &#x27;fish&#x27;.</span><br><span class="line"></span><br><span class="line">ansible_python_interpreter</span><br><span class="line">      目标主机的 python 路径.适用于的情况: 系统中有多个 Python, 或者命令路径不是&quot;/usr/bin/python&quot;,比如  \*BSD, 或者 /usr/bin/python</span><br><span class="line">      不是 2.X 版本的 Python.我们不使用 &quot;/usr/bin/env&quot; 机制,因为这要求远程用户的路径设置正确,且要求 &quot;python&quot; 可执行程序名不可为 python以外的名字(实际有可能名为python26).</span><br><span class="line"></span><br><span class="line">      与 ansible_python_interpreter 的工作方式相同,可设定如 ruby 或 perl 的路径....</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/21/ansible%E2%98%9E%E8%A7%92%E8%89%B2/">ansible☞角色</a></li><li><a href="https://zyh.cool/2020/05/20/ansible%E2%98%9E%E6%A8%A1%E6%9D%BF/">ansible☞模板</a></li><li><a href="https://zyh.cool/2020/05/18/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/">ansible☞playbook-lookup插件</a></li><li><a href="https://www.lengyuewusheng.com/ansible-copy%E6%A8%A1%E5%9D%97%E5%92%8Csynchronize%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%AF%94%E8%BE%83.html">Ansible copy模块和synchronize模块说明及比较</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具库</title>
      <link href="2020/03/12/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
      <url>2020/03/12/%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://encycolorpedia.cn/323e4e">十六进制颜色代码表，图表，调色板，绘图&amp;油漆</a></p><p><a href="http://gosspublic.alicdn.com/ram-policy-editor/index.html">阿里云 ram 策略生成器</a></p><p><a href="https://develop.aliyun.com/tools/sdk#/python">阿里云SDK频道</a></p><p><a href="https://app.xuty.tk/static/app/index.html">表情锅</a></p><p><a href="https://whoer.net/zh">测试国外出口ip</a></p><p><a href="http://www.ip-api.com/">测试国外出口ip</a></p><p><a href="https://www.wondercv.com/">超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载</a></p><p><a href="https://help.aliyun.com/knowledge_detail/50270.html?spm=a2c4g.11186623.6.621.483534bfFo31Sm">各地区管局备案规则</a></p><p><a href="https://www.ipplus360.com/">更精准的全球IP地址定位平台_IP问问 -埃文科技(ipplus360.com)</a></p><p><a href="http://域名.信息/">工信部-域名.信息</a></p><p><a href="http://explainshell.com/">解析命令 explainshell.com - match command-line arguments to their help text</a></p><p><a href="https://haveibeenpwned.com/Passwords">密码泄露检测</a></p><p><a href="https://tuna.moe/">清华大学 TUNA 协会 - Home</a></p><p><a href="http://zh.thetimenow.com/time-zone-converter.php">时区转换生成</a></p><p><a href="https://help.aliyun.com/document_detail/116378.html?spm=a2c4g.11186623.2.17.6f36578flUOrcy#concept-188715">使用redis-shake迁移RDB文件内的数据</a></p><p><a href="https://www.17ce.com/">网站测速|网站速度测试|网速测试|电信|联通|网通|全国|监控|CDN|PING|DNS 17CE.COM</a></p><p><a href="https://devhints.io/">语言/工具语法常用摘要</a></p><p><a href="https://ipchaxun.com/">域名反查ip</a></p><p><a href="https://www.whatsmydns.net/">域名解析检查</a></p><p><a href="https://intodns.com/">域名状态报告</a></p><p><a href="https://github.com/ireaderlab/alex">alex:web压力测试工具</a></p><p><a href="http://www.kammerl.de/ascii/AsciiSignature.php">Ascii Text / Signature Generator motd动态开机提醒</a></p><p><a href="https://www.json2yaml.com/convert-yaml-to-json">Convert YAML to JSON</a></p><p><a href="https://csr.chinassl.net/generator-csr.html">CSR文件生成工具-中国数字证书CHINASSL</a></p><p><a href="https://apps.evozi.com/apk-downloader/">gp apk 下载</a></p><p><a href="http://tool.520101.com/wangluo/ipjisuan/">ip地址在线计算器</a></p><p><a href="https://ipv6-test.com/validate.php">IPv6 站点测试</a></p><p><a href="http://grokconstructor.appspot.com/do/match#result">logstash grok 测试</a></p><p><a href="https://github.com/DoubleLabyrinth/MobaXterm-keygen">MobaXterm-keygen 密钥</a></p><p><a href="http://msdn.itellyou.cn/">MSDN, 我告诉你</a></p><p><a href="https://api.aliyun.com/#/cli">OpenAPI Explorer</a></p><p><a href="https://www.pyman.com.cn/">pyman网址导航</a></p><p><a href="http://rpm.pbone.net/">RPM Search</a></p><p><a href="https://www.cnblogs.com/zhaoruiqing/articles/12870209.html">Typora的Emoji指令</a></p><p><a href="https://paste.ubuntu.com/">Ubuntu Pastebin</a></p><p><a href="http://www.92csz.com/study/UnixToolbox-zh_CN.html">Unix Toolbox - 中文版</a></p><p><a href="https://www.dotcom-tools.com/">Website Performance Test Tools</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux☞时间</title>
      <link href="2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/"/>
      <url>2020/02/11/linux%E2%98%9E%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文中描述的并不能涵盖所有时间设置命令，只是记录了经常用到的一些。</p><h4 id="修改会话时区"><a href="#修改会话时区" class="headerlink" title="修改会话时区"></a>修改会话时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;TZ=&#x27;UTC+0&#x27;; export TZ&quot;</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>需要注意以下几点：</p><ol><li>UTC8 表示西8区</li><li>tzselect 可以帮你查看时区有哪些</li><li>UTC 方式，无法识别冬令时和夏令时，所以建议用地区名称，例如 asia/shanghai</li></ol></blockquote><h4 id="修改crontab时区"><a href="#修改crontab时区" class="headerlink" title="修改crontab时区"></a>修改crontab时区</h4><p>在 crontab 用户配置最上面加入，例如添加芝加哥时区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TZ=<span class="string">&#x27;America/Chicago&#x27;</span></span><br><span class="line">CRON_TZ=<span class="string">&#x27;America/Chicago&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于时区设置方面，不建议修改配置，因为不够灵活</p></blockquote><h4 id="修正时间-写入硬件时钟"><a href="#修正时间-写入硬件时钟" class="headerlink" title="修正时间, 写入硬件时钟"></a>修正时间, 写入硬件时钟</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">ntpdate cn.ntp.org.cn</span><br><span class="line">hwclock -w</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0 12 * * * /usr/sbin/ntpdate cn.ntp.org.cn &gt; /dev/null 2&gt;&amp;1&#x27;</span> &gt;&gt; /etc/crontab</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 时区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志☞ELK简单部署-容器方式</title>
      <link href="2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/"/>
      <url>2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>各组件总下载页: <a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></li><li>容器下载页: <a href="https://www.docker.elastic.co/">https://www.docker.elastic.co</a></li></ul><ol><li>Elasticsearch 搜索分析 <a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></li><li>Logstash 转换输出 <a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></li><li>Filebeat 收集 <a href="https://www.elastic.co/cn/downloads/beats/filebeat">https://www.elastic.co/cn/downloads/beats/filebeat</a></li><li>Kibana 展示 <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></li></ol><h4 id="数据过程"><a href="#数据过程" class="headerlink" title="数据过程:"></a>数据过程:</h4><p>Filebeat ☞ Logstash ☞ Elasticsearch (master node) + data node ☞ Kibana </p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker</span></span><br><span class="line">yum install docker -y 或者 yum install docker-ce -y</span><br><span class="line">yum install python3-pip -y</span><br><span class="line">pip3 install docker-compose 或者 pip install docker-compose</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 docker 默认数据目录</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/export/docker-data-root&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># elasticsearch 具体安装命令和版本请以下载页中对应的docker安装方式页里命令为基准</span></span><br><span class="line"><span class="string">sysctl</span> <span class="string">-a</span> <span class="string">|</span> <span class="string">grep</span>  <span class="string">vm.max_map_count</span>  <span class="comment"># 查看是否过小, 如果过小执行下一条</span></span><br><span class="line"><span class="string">echo</span> <span class="string">&#x27;vm.max_map_count=262144&#x27;</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/sysctl.conf</span> <span class="string">&amp;&amp;</span> <span class="string">sysctl</span> <span class="string">-p</span></span><br><span class="line"></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/es;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/docker-compose.yml;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/es/es01.yml;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/es/es02.yml;</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/kibana;</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/kibana/kibana.yml;</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/export/docker-compose-data/logstash</span></span><br><span class="line"><span class="string">touch</span> <span class="string">/export/docker-compose-data/logstash/logstash.yml;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># es01 master 和 data</span></span><br><span class="line"><span class="comment"># es02 data</span></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/es/es01.yml &lt;&lt; EOF</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">http.port: 9200</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span> </span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/es/es02.yml &lt;&lt; EOF</span><br><span class="line">node.master: <span class="literal">false</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">http.port: 9200</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span> </span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/kibana/kibana.yml &lt;&lt; EOF</span><br><span class="line">xpack.monitoring.ui.container.elasticsearch.enabled: <span class="literal">true</span></span><br><span class="line">i18n.locale: zh-CN</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; /<span class="built_in">export</span>/docker-compose-data/logstash/logstash.yml &lt;&lt; EOF</span><br><span class="line">node.name: logstash</span><br><span class="line">http.host: 0.0.0.0</span><br><span class="line">http.port: 9600</span><br><span class="line">log.level: info</span><br><span class="line">config.reload.automatic: <span class="literal">true</span></span><br><span class="line">config.reload.interval: 10s</span><br><span class="line">config.support_escapes: <span class="literal">false</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="编写-logstash-管道文件"><a href="#编写-logstash-管道文件" class="headerlink" title="编写 logstash 管道文件"></a>编写 logstash 管道文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例 /export/docker-compose-data/logstash/pipeline/es-curator.conf</span></span><br><span class="line"><span class="string">input</span> &#123;</span><br><span class="line"><span class="string">file</span> &#123;</span><br><span class="line"><span class="string">path</span> <span class="string">=&gt;</span> <span class="string">&quot;/mnt/info.log&quot;</span></span><br><span class="line"><span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;es-curator&quot;</span></span><br><span class="line"><span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line"><span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;es-curator&quot;</span> &#123;</span><br><span class="line"><span class="string">elasticsearch</span> &#123;</span><br><span class="line"><span class="string">hosts=&gt;</span> [<span class="string">&quot;es01:9200&quot;</span>]</span><br><span class="line"><span class="string">index=&gt;</span> <span class="string">&quot;es-curator-<span class="template-variable">%&#123;+YYYY-MM-dd&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动服务docker-compose配置文件"><a href="#启动服务docker-compose配置文件" class="headerlink" title="启动服务docker-compose配置文件"></a>启动服务docker-compose配置文件</h4><blockquote><p> <a href="https://docs.docker.com/compose/compose-file/compose-file-v2/">https://docs.docker.com/compose/compose-file/compose-file-v2/</a></p><p>本配置文件参考 2.3 版本, 请勿使用 3.x 版本, 因为它的资源层 deploy, docker-compose命令不支持</p></blockquote><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/export/docker-compose-data/docker-compose.yml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-sen</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms1536m -Xmx1536m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata01:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/es/es01.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9200&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">es02:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es02</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=es02</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.seed_hosts=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.initial_master_nodes=es01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-sen</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms1536m-Xmx1536m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata02:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/es/es02.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">3G</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9200&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVER_NAME:</span> <span class="string">kibana.sen-sdk.com</span></span><br><span class="line">      <span class="attr">SERVER_HOST:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://es01:9200</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">512m</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:5601&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/logstash/logstash:7.4.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/logstash/pipeline/:/usr/share/logstash/pipeline/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/export/docker-compose-data/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logstash:/usr/share/logstash/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5044:5044&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9600:9600&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">mem_limit:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">memswap_limit:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">mem_reservation:</span> <span class="string">1g</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9600&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">120s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">esdata02:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">esnet:</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="启动-docker-compose"><a href="#启动-docker-compose" class="headerlink" title="启动 docker-compose"></a>启动 docker-compose</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="built_in">export</span>/docker-compose-data/</span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># docker-compose up -d --no-recreate</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/">jenkins☞安装和基本配置</a></li><li><a href="https://zyh.cool/2018/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eopenvpn-docker%E6%96%B9%E5%BC%8F/">安装脚本☞openvpn-docker方式</a></li><li><a href="https://songrgg.github.io/operation/how-to-build-a-smallest-docker-image/">how to build the smallest docker image as fast as you can</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx ☞ 基本认证</title>
      <link href="2019/09/04/nginx%E2%98%9E%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/"/>
      <url>2019/09/04/nginx%E2%98%9E%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 htpasswd 工具</span></span><br><span class="line">yum install httpd-tools -y</span><br><span class="line"><span class="comment"># 生成密码文件</span></span><br><span class="line">htpasswd -bc /usr/<span class="built_in">local</span>/nginx/conf/.passwd usera <span class="built_in">pwd</span> <span class="comment"># 创建用户usera, 并写入 .passwd</span></span><br><span class="line">htpasswd -b /usr/<span class="built_in">local</span>/nginx/conf.passwd userb <span class="built_in">pwd</span>  <span class="comment"># 追加用户 userb</span></span><br><span class="line">htpasswd -D /usr/<span class="built_in">local</span>/nginx/conf/.passwd usera <span class="comment"># 删除用户</span></span><br><span class="line"><span class="comment"># nginx配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    index index.html;</span><br><span class="line">    location /auth &#123;</span><br><span class="line">        auth_basic <span class="string">&quot;nginx auth&quot;</span>;</span><br><span class="line">        auth_basic_user_file /usr/<span class="built_in">local</span>/nginx/conf/.passwd;</span><br><span class="line">        <span class="built_in">alias</span> /<span class="built_in">export</span>/webapps/xxx.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞nginx编译方式</a></li><li><a href="https://zyh.cool/2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/">nginx☞日志切割脚本</a></li><li><a href="https://www.lengyuewusheng.com/ngxtop%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5.html">ngxtop应用实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux ☞ 软 raid 创建</title>
      <link href="2019/07/01/linux%E2%98%9E%E8%BD%AFraid%E5%88%9B%E5%BB%BA/"/>
      <url>2019/07/01/linux%E2%98%9E%E8%BD%AFraid%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-☞-软-raid-创建"><a href="#linux-☞-软-raid-创建" class="headerlink" title="linux ☞ 软 raid 创建"></a>linux ☞ 软 raid 创建</h2><ul><li>创建</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘分区</span></span><br><span class="line">fdisk /dev/sda</span><br><span class="line">fdisk /dev/sdb</span><br><span class="line"><span class="comment"># 构建raid0</span></span><br><span class="line"><span class="comment"># --level raid级别</span></span><br><span class="line"><span class="comment"># --raid-devices 盘数</span></span><br><span class="line"><span class="comment"># --chunk 条带深度，决定了数据分割的标准单位大小，数值越小，则数据越分散，性能越低(如若没有特殊优化需求，建议选默认值即可)</span></span><br><span class="line">mdadm -Cv /dev/md0 --level=0 --raid-devices=2 /dev/sda1 /dev/sdb1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已上配置中, 也可以不分区, 直接进行 raid 构建</span></span><br><span class="line">mdadm --create --verbose /dev/md0 --level=0 --name=MY_RAID --raid-devices=number_of_volumes device_name1 device_name2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察和等待阵列初始化</span></span><br><span class="line">cat /proc/mdstat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察初始化后的阵列信息</span></span><br><span class="line">mdadm --detail /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化 （加卷标）</span></span><br><span class="line">mke2fs -t ext4 -L raid0 /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入配置</span></span><br><span class="line"><span class="comment"># 不同的操作系统 mdadm.conf 位置不同, 具体以 man mdadm.conf 为准</span></span><br><span class="line">mdadm --detail --scan | tee -a /etc/mdadm.conf</span><br><span class="line"><span class="comment"># echo &quot;DEVICE /dev/sda1 /dev/sdb1 &quot; &gt;&gt; /etc/mdadm/mdadm.conf</span></span><br><span class="line"><span class="comment"># mdadm -Ds &gt;&gt; /etc/mdadm/mdadm.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的 Ramdisk Image 以为新的 RAID 配置正确地预加载块储存设备模块</span></span><br><span class="line">sudo dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入挂载 （用卷标挂载，有些系统重启后，设备名会从md0变成md127）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;LABEL=raid0 /data ext4 defaults,nofail 0 2&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line">mkdir /data</span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 确认挂载成功</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除/etc/fstab的挂载信息</span></span><br><span class="line">$ mdadm -S /dev/md0</span><br><span class="line">$ mdadm --misc --zero-superblock /dev/sda</span><br><span class="line">$ mdadm --misc --zero-superblock /dev/sdb</span><br><span class="line"><span class="comment"># 删除/etc/mdadm/mdadm.conf文件中添加的DEVICE行和ARRAY行</span></span><br></pre></td></tr></table></figure><ul><li>额外信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2T以上大小分区</span></span><br><span class="line">parted /dev/sda</span><br><span class="line"> mklabel gpt</span><br><span class="line"> mkpart primary1 0% 100%</span><br><span class="line">partprobe</span><br></pre></td></tr></table></figure><ul><li>关于云</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">当使用云端磁盘构建raid的时候,且又想进行 raid 备份,则务必先停止io操作,停止io操作的方法最好是 umount 或者停机. 否则会导致 raid 数据完整性出现问题.</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> raid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aws☞s3 初始化安装</title>
      <link href="2019/05/23/aws%E2%98%9Es3%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%9B%E5%BB%BA/"/>
      <url>2019/05/23/aws%E2%98%9Es3%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>脚本的目的：</p><ol><li>创建S3</li><li>添加生命周期</li><li>创建iam规则</li></ol><h3 id="主体脚本"><a href="#主体脚本" class="headerlink" title="主体脚本"></a>主体脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># http://docs.amazonaws.cn/general/latest/gr/rande.html#s3_region</span></span><br><span class="line"><span class="comment"># us-east-1 us-west-1 等</span></span><br><span class="line"><span class="comment"># 需要s3权限和iam权限</span></span><br><span class="line"><span class="comment"># 需要先编写 s3-lifecycle.json</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#桶名</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入s3桶名=&quot;</span> S3BucketName</span><br><span class="line"><span class="comment">#所属项目</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入项目名=&quot;</span> TeamName</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入AWS_ACCESS_KEY_ID=&quot;</span> AWS_ACCESS_KEY_ID</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入AWS_SECRET_ACCESS_KEY=&quot;</span> AWS_SECRET_ACCESS_KEY</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入AWS_DEFAULT_REGION=&quot;</span> AWS_DEFAULT_REGION</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="variable">$AWS_ACCESS_KEY_ID</span></span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="variable">$AWS_SECRET_ACCESS_KEY</span></span><br><span class="line"><span class="built_in">export</span> AWS_DEFAULT_REGION=<span class="variable">$AWS_DEFAULT_REGION</span></span><br><span class="line"></span><br><span class="line">S3LocationConstraint=<span class="variable">$&#123;AWS_DEFAULT_REGION&#125;</span></span><br><span class="line"></span><br><span class="line">[[ <span class="variable">$&#123;S3LocationConstraint&#125;</span> == <span class="string">&#x27;us-east-1&#x27;</span> ]] &amp;&amp; aws s3api create-bucket --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --region <span class="variable">$&#123;S3LocationConstraint&#125;</span> || aws s3api create-bucket --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --region <span class="variable">$&#123;S3LocationConstraint&#125;</span> --create-bucket-configuration LocationConstraint=<span class="variable">$&#123;S3LocationConstraint&#125;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;conf/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;data/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;backup/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/7days/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/15days/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/30days/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/60days/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/90days/&#x27;</span></span><br><span class="line">aws s3api put-object --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --key <span class="string">&#x27;logs/longlasting/&#x27;</span></span><br><span class="line"></span><br><span class="line">aws s3api put-bucket-tagging --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --tagging <span class="string">&quot;TagSet=[&#123;Key=Team,Value=<span class="variable">$&#123;TeamName&#125;</span>&#125;]&quot;</span></span><br><span class="line">aws s3api put-bucket-lifecycle-configuration --bucket <span class="variable">$&#123;S3BucketName&#125;</span> --lifecycle-configuration file://s3-lifecycle.json</span><br><span class="line"></span><br><span class="line">cat &gt; s3-program.rule &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:DeleteObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/7days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/15days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/30days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/60days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/90days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/longlasting/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/conf/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/data/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/backup/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">cat &gt; s3-local.rule &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:ListBucket&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ForAnyValue:IpAddress&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aws:SourceIp&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;1.1.1.1/32&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;s3:PutObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">                <span class="string">&quot;s3:DeleteObject&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/7days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/15days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/30days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/60days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/90days/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/logs/longlasting/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/conf/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/data/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>/backup/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ForAnyValue:IpAddress&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aws:SourceIp&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;1.1.1.1/32&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:GetBucketLocation&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;arn:aws:s3:::<span class="variable">$&#123;S3BucketName&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ForAnyValue:IpAddress&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aws:SourceIp&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;1.1.1.1/32&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Sid&quot;</span>: <span class="string">&quot;VisualEditor3&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Action&quot;</span>: <span class="string">&quot;s3:ListAllMyBuckets&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Condition&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ForAnyValue:IpAddress&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;aws:SourceIp&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;1.1.1.1/32&quot;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">aws iam create-policy --policy-name s3-<span class="variable">$&#123;S3BucketName&#125;</span>-role --description <span class="string">&quot;For role use only!!!!!!!!!!!!&quot;</span> --policy-document  file://s3-program.rule</span><br><span class="line">aws iam create-policy --policy-name s3-<span class="variable">$&#123;S3BucketName&#125;</span>-<span class="built_in">local</span> --description <span class="string">&quot;Limit the source IP!!!!!!!!!!!!&quot;</span> --policy-document file://s3-local.rule</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;程序用户规则: s3-<span class="variable">$&#123;S3BucketName&#125;</span>-role 已生成&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;本地用户规则：s3-<span class="variable">$&#123;S3BucketName&#125;</span>-local 已生成&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请将 local 规则关联到对应个人用户或组&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请将 role 规则关联到角色&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期规则-s3-lifecycle-json"><a href="#生命周期规则-s3-lifecycle-json" class="headerlink" title="生命周期规则 s3-lifecycle.json"></a>生命周期规则 s3-lifecycle.json</h3><blockquote><p>规则说明：</p><ol><li>所有对象，30天之后转为ONEZONE_IA;</li><li>logs 前缀单独定义：<ul><li>days 路径下的对象保存对应的天数</li><li>longlasting 路径下的对象永久保存，但是 90 天之后的对象转换为 GLACIER</li></ul></li></ol></blockquote>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Rules&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;, </span><br><span class="line">            &quot;Transitions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Days&quot;: 30, </span><br><span class="line">                    &quot;StorageClass&quot;: &quot;ONEZONE_IA&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;NoncurrentVersionTransitions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;NoncurrentDays&quot;: 30, </span><br><span class="line">                    &quot;StorageClass&quot;: &quot;ONEZONE_IA&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;ID&quot;: &quot;30days_onezone_ia&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/longlasting/&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;, </span><br><span class="line">            &quot;Transitions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Days&quot;: 90, </span><br><span class="line">                    &quot;StorageClass&quot;: &quot;GLACIER&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ], </span><br><span class="line">            &quot;ID&quot;: &quot;logs_90day_glacier&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;,</span><br><span class="line">            &quot;NoncurrentVersionExpiration&quot;: &#123;</span><br><span class="line">                &quot;NoncurrentDays&quot;: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/7days/&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Expiration&quot;: &#123;</span><br><span class="line">                &quot;Days&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AbortIncompleteMultipartUpload&quot;: &#123;</span><br><span class="line">                &quot;DaysAfterInitiation&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ID&quot;: &quot;logs_delete_7days_before&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;,</span><br><span class="line">            &quot;NoncurrentVersionExpiration&quot;: &#123;</span><br><span class="line">                &quot;NoncurrentDays&quot;:  1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/15days/&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Expiration&quot;: &#123;</span><br><span class="line">                &quot;Days&quot;: 15</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AbortIncompleteMultipartUpload&quot;: &#123;</span><br><span class="line">                &quot;DaysAfterInitiation&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ID&quot;: &quot;logs_delete_15days_before&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;,</span><br><span class="line">            &quot;NoncurrentVersionExpiration&quot;: &#123;</span><br><span class="line">                &quot;NoncurrentDays&quot;:  1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/30days/&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Expiration&quot;: &#123;</span><br><span class="line">                &quot;Days&quot;: 30</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AbortIncompleteMultipartUpload&quot;: &#123;</span><br><span class="line">                &quot;DaysAfterInitiation&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ID&quot;: &quot;logs_delete_30days_before&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;,</span><br><span class="line">            &quot;NoncurrentVersionExpiration&quot;: &#123;</span><br><span class="line">                &quot;NoncurrentDays&quot;: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/60days/&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Expiration&quot;: &#123;</span><br><span class="line">                &quot;Days&quot;: 60</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AbortIncompleteMultipartUpload&quot;: &#123;</span><br><span class="line">                &quot;DaysAfterInitiation&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ID&quot;: &quot;logs_delete_60days_before&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;Enabled&quot;,</span><br><span class="line">            &quot;NoncurrentVersionExpiration&quot;: &#123;</span><br><span class="line">                &quot;NoncurrentDays&quot;: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Filter&quot;: &#123;</span><br><span class="line">                &quot;Prefix&quot;: &quot;logs/90days/&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Expiration&quot;: &#123;</span><br><span class="line">                &quot;Days&quot;: 90</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AbortIncompleteMultipartUpload&quot;: &#123;</span><br><span class="line">                &quot;DaysAfterInitiation&quot;: 7</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ID&quot;: &quot;logs_delete_90days_before&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/04/14/ansible%E2%98%9Eplaybook-aws/">ansible☞playbook-aws</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> s3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s☞01常见术语概念</title>
      <link href="2019/03/20/k8s%E2%98%9E01%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E6%A6%82%E5%BF%B5/"/>
      <url>2019/03/20/k8s%E2%98%9E01%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h2><ol><li><p>master 是 k8s 的主节点，负责协调集群中的所有活动，例如调度应用程序、维护应用程序的所需状态、扩展应用程序和滚动更新。</p></li><li><p>node 是 k8s 的工作节点，也就是实际跑容器的节点。</p></li></ol><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>master 节点服务</p><ol><li>kube-apiserver 是master节点服务， 是k8s 的 api 服务，是集群入口，提供 http rset 服务。</li><li>kube-controller-manager 是master节点服务，维护集群状态（故障检测/滚动升级/node扩展等），是集群所有资源对象的自动化中心。</li><li>kube-scheduler 是负责 pod 的调度, 即如何将pod分发到node</li><li>etcd 注册中心，保存集群状态。</li></ol><p>node 节点服务</p><ol><li><p>kubelet 是节点代理程序，部署在 node 上。它是k8s master和k8s node之间的纽带。处理 pod 创建/启动/监控/重启/销毁等工作。</p><p>开启 register-node = true 的情况下 会自动向 apiserver 服务注册自己。</p></li><li><p>kube-proxy 是实现node节点上各资源的通信</p></li></ol><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ol><li><p>Namespace</p><p>命名空间是一个逻辑概念，起到了隔离作用。通过它，你可以找到它内部的其它资源对象，例如 pod，svc，deployment等</p></li><li><p>Pod</p><p>pod 内包含多个容器，所以多个容器共享以下资源。</p><ul><li>PID命名空间: pod内的进程能互相看到PID</li><li>网络命名空间: pod中的多个容器共享一个ip (唯一)</li><li>IPC命名空间: pod中的多个容器之间可以互相通信</li><li>UTS命名空间: pod中的多个容器共享一个主机名 (唯一)</li><li>存储卷: pod多个容器可以共同访问pod定义的存储卷</li></ul></li><li><p>Label</p><p>label用于表示资源，从而方便的被其它资源找到。它很重要。</p><p>标签定义 <code>key: value</code></p><p>选择器: <code>key &lt;= !=&gt; value</code>  <code>key &lt;not&gt; in (value1, value2)</code> </p><p>RC 和 Service 通过 selector 选择器来选择 Pod 对象范围, 从而精细化的将 Pod 进行分组。</p></li><li><p>Deployment</p><p>无状态副本集。用来部署一个 pod 组，它通过 ReplicaSet 来进行缩放， 并需要 pod 模板创建 pod， 需要 Label 监控 pod。Deployment 通过 RC 严格执行配置所定义的pod副本数量。可以比喻为 aws 的目标组或者nginx的upstream组。</p></li><li><p>Satefulset</p><p>有状态副本集。</p></li><li><p>Service</p><p>svc 用来构建一个负载配置。可以比喻为aws的elb内网负载均衡器或者nginx的service proxy配置。</p><p>svc 通过 pod 定义的 label 发现一组 pod。这些 pod 本身有 endpoint 地址。 </p><p>svc 创建后，会拿到一个集群内部ip和dns。kube-proxy 服务会将 svc 的 ip 和 pod 的 endpoint 地址关联起来。</p><p>最终，其它容器可以通过这个ip和dns来访问svc关联的pod资源。</p></li><li><p>Ingress</p><p>映射一个端口到宿主ip，提供服务的外部访问</p></li></ol><h2 id="服务组件流程图"><a href="#服务组件流程图" class="headerlink" title="服务组件流程图"></a>服务组件流程图</h2><blockquote><ul><li>apiserver 负责 etcd 存储的所有操作，且只有 apiserver 才直接操作 etcd 集群</li><li>apiserver 对内（集群中的其他组件）和对外（用户）提供统一的 REST API，其他组件均通过 apiserver 进行通信<ul><li>controller manager、scheduler、kube-proxy 和 kubelet 等均通过 apiserver watch API 监测资源变化情况，并对资源作相应的操作</li><li>所有需要更新资源状态的操作均通过 apiserver 的 REST API 进行</li></ul></li><li>apiserver 也会直接调用 kubelet API（如 logs, exec, attach 等），默认不校验 kubelet 证书，但可以通过 <code>--kubelet-certificate-authority</code> 开启（而 GKE 通过 SSH 隧道保护它们之间的通信）</li></ul></blockquote><p><img src="/2019/03/20/k8s%E2%98%9E01%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E6%A6%82%E5%BF%B5/image-20200823102314477.png" alt="image-20200823102314477"></p><p><img src="/2019/03/20/k8s%E2%98%9E01%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E6%A6%82%E5%BF%B5/image-20200823103640732.png" alt="image-20200823103640732"></p><blockquote><p>以一个pod的构建为例:</p><ul><li>用户通过 REST API 创建一个 Pod</li><li>apiserver 将其写入 etcd</li><li>scheduluer 检测到未绑定 Node 的 Pod，开始调度并更新 Pod 的 Node 绑定</li><li>kubelet 检测到有新的 Pod 调度过来，通过 container runtime 运行该 Pod</li><li>kubelet 通过 container runtime 取到 Pod 状态，并更新到 apiserver 中</li></ul></blockquote><p><img src="/2019/03/20/k8s%E2%98%9E01%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%E6%A6%82%E5%BF%B5/image-20200823102430144.png" alt="image-20200823102430144"></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql☞5.7容器基本搭建</title>
      <link href="2019/02/10/mysql%E2%98%9E5.7%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
      <url>2019/02/10/mysql%E2%98%9E5.7%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /<span class="built_in">export</span>/docker-data-mysql/&#123;config,logs,data&#125;</span><br><span class="line">docker run --name mysql57 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--restart=always \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/config,dst=/etc/mysql&#x27;</span> \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/logs,dst=/var/log/mysql&#x27;</span> \</span><br><span class="line">--mount <span class="string">&#x27;type=bind,src=/export/docker-data-mysql/data,dst=/var/lib/mysql&#x27;</span> \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx ☞ 泛域名_变量截取</title>
      <link href="2018/09/06/nginx%E2%98%9E%E6%B3%9B%E5%9F%9F%E5%90%8D_%E5%8F%98%E9%87%8F%E6%88%AA%E5%8F%96/"/>
      <url>2018/09/06/nginx%E2%98%9E%E6%B3%9B%E5%9F%9F%E5%90%8D_%E5%8F%98%E9%87%8F%E6%88%AA%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       [::]:80;</span><br><span class="line">    server_name ~^(?&lt;userName&gt;.*)\.apple\.com\.cn$;</span><br><span class="line">    root /<span class="built_in">export</span>/webapps/apple.com/<span class="variable">$userName</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启浏览器静态文件缓存</span></span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ &#123;</span><br><span class="line">        expires      3h;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># https://&lt;username&gt;.apple.com/api -&gt; /export/webapps/apple.com/api.php #####</span></span><br><span class="line">    location ~* ^/(api|event_api)$ &#123;</span><br><span class="line">        root /<span class="built_in">export</span>/webapps/apple.com;</span><br><span class="line">        rewrite ^/(.*)$ /<span class="variable">$1</span>.php <span class="built_in">break</span>;</span><br><span class="line">        fastcgi_pass     127.0.0.1:9001;</span><br><span class="line">        fastcgi_index    index.php;</span><br><span class="line">        include      fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout    600s;</span><br><span class="line">        fastcgi_send_timeout       600s;</span><br><span class="line">        fastcgi_read_timeout       600s;</span><br><span class="line">        fastcgi_buffers 8 256k;</span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># https://&lt;username&gt;.apple.com/&lt;uri&gt; -&gt; /export/webapps/apple.com/&lt;username&gt;/&lt;uri&gt;.php</span></span><br><span class="line">    location ~* ^/[0-9a-zA-Z]+$ &#123;</span><br><span class="line">        rewrite ^/(.*)$ /<span class="variable">$1</span>.php <span class="built_in">break</span>;</span><br><span class="line">        fastcgi_pass     127.0.0.1:9001;</span><br><span class="line">        fastcgi_index    index.php;</span><br><span class="line">        include      fastcgi.conf;</span><br><span class="line">        fastcgi_connect_timeout    600s;</span><br><span class="line">        fastcgi_send_timeout       600s;</span><br><span class="line">        fastcgi_read_timeout       600s;</span><br><span class="line">        fastcgi_buffers 8 256k;</span><br><span class="line">        fastcgi_buffer_size 256k;</span><br><span class="line">        fastcgi_busy_buffers_size 256k;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>location 优先级从上往下依次递减：<br>location =      仅匹配字符串自身<br>location ^~    匹配某个字符串开头的uri<br>location ~      正则匹配，区分大小写<br>location ~*    正则匹配，不区分大小写<br>location /      表示匹配“域名/之后的uri”，再比如localtion /images，表示匹配“域名/images之后的uri</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞nginx编译方式</a></li><li><a href="https://zyh.cool/2020/05/14/nginx%E2%98%9E%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/">nginx☞日志切割脚本</a></li><li><a href="https://www.lengyuewusheng.com/ngxtop%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5.html">ngxtop应用实践</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞php编译方式</title>
      <link href="2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/"/>
      <url>2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>用于编译安装php7.1</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>根目录：/usr/local/php<br>日志目录：/usr/local/php/var/log -&gt; /export/logs/php</p><h4 id="脚本在此"><a href="#脚本在此" class="headerlink" title="脚本在此"></a>脚本在此</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 脚本, 适用于 php 7.1</span></span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$basedir</span></span><br><span class="line">runuser=`whoami`</span><br><span class="line">[[ <span class="variable">$runuser</span> == <span class="string">&#x27;root&#x27;</span> ]] || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ERROR:执行用户不是<span class="variable">$runuser</span>&quot;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#初始化服务器环境</span></span><br><span class="line">[[ -d /<span class="built_in">export</span>/logs/php ]] || &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/export/logs/php目录不存在&quot;</span> &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br><span class="line">yum install libmcrypt-devel ncurses-devel recode-devel aspell-devel curl-devel readline-devel openldap-devel enchant-devel pcre-devel net-snmp-devel libicu-devel libtool-ltdl-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel freetype-devel gcc-c++ mysql-devel</span><br><span class="line">cp -p /usr/lib64/libldap* /usr/lib</span><br><span class="line">ln -s /usr/lib64/mysql /usr/lib/mysql</span><br><span class="line">wget http://sg2.php.net/distributions/php-7.1.25.tar.gz -O php.tar.gz</span><br><span class="line">rm -rf php &amp;&amp; mkdir php</span><br><span class="line">tar xf php.tar.gz --strip-components 1 -C php</span><br><span class="line"><span class="built_in">cd</span> php &amp;&amp; ./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --with-config-file-scan-dir=/usr/<span class="built_in">local</span>/php/etc/php.d --with-curl --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-openssl --enable-mbstring --with-freetype-dir --with-jpeg-dir --with-png-dir --with-gd --with-libxml-dir --with-zlib --with-mcrypt --with-bz2 --enable-sysvshm --enable-sysvsem --enable-soap --with-recode --with-snmp --with-readline --enable-intl --enable-dba --enable-bcmath --with-enchant --with-pspell --enable-xml --enable-sockets --enable-exif --enable-inline-optimization --enable-fpm || <span class="built_in">exit</span></span><br><span class="line">make &amp;&amp; make install || <span class="built_in">exit</span></span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm</span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line">chkconfig php-fpm off</span><br><span class="line">chmod u+x /etc/rc.d/init.d/php-fpm</span><br><span class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/var &amp;&amp; rm -rf <span class="built_in">log</span></span><br><span class="line">ln -s /<span class="built_in">export</span>/logs/php <span class="built_in">log</span></span><br><span class="line">cat&gt;&gt;/usr/<span class="built_in">local</span>/php/etc/php.ini&lt;&lt;EOF</span><br><span class="line">; 关闭php无用日志信息</span><br><span class="line">error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR</span><br><span class="line">; 开启php opcache 缓存功能</span><br><span class="line">[opcache]</span><br><span class="line">zend_extension=opcache.so</span><br><span class="line">; 启动操作码缓存</span><br><span class="line">opcache.enable=1</span><br><span class="line">; 针对支持CLI版本PHP启动操作码缓存 一般被用来测试和调试</span><br><span class="line">opcache.enable_cli=0</span><br><span class="line">; 共享内存大小，单位为MB</span><br><span class="line">opcache.memory_consumption=128</span><br><span class="line">; 存储临时字符串缓存大小，单位为MB，PHP5.3.0以前会忽略此项配置</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line">; 缓存文件数最大限制，命中率不到100%，可以试着提高这个值</span><br><span class="line">opcache.max_accelerated_files=4000</span><br><span class="line">; 一定时间内检查文件的修改时间, 这里设置检查的时间周期, 默认为 2, 单位为秒</span><br><span class="line">opcache.revalidate_freq=60</span><br><span class="line">; 开启快速停止续发事件，依赖于Zend引擎的内存管理模块，一次释放全部请求变量的内存，而不是依次释放内存块</span><br><span class="line">opcache.fast_shutdown=1</span><br><span class="line">;启用检查 PHP 脚本存在性和可读性的功能，无论文件是否已经被缓存，都会检查操作码缓存,可以提升性能。 但是如果禁用了 opcache.validate_timestamps选项， 可能存在返回过时数据的风险。</span><br><span class="line">opcache.enable_file_override=1</span><br><span class="line">EOF</span><br><span class="line">cat&gt;&gt;/usr/<span class="built_in">local</span>/php/etc/php-fpm.conf&lt;&lt;EOF</span><br><span class="line">[global]</span><br><span class="line">log_level =error</span><br><span class="line">daemonize = yes</span><br><span class="line">events.mechanism = epoll</span><br><span class="line">rlimit_files = 10240</span><br><span class="line">emergency_restart_threshold = 60</span><br><span class="line">emergency_restart_interval = 60s</span><br><span class="line"></span><br><span class="line">[fcgi]</span><br><span class="line">user = webapps</span><br><span class="line">group = webapps</span><br><span class="line">listen = 0.0.0.0:9000</span><br><span class="line">pm = static</span><br><span class="line">pm.max_children = 100</span><br><span class="line">pm.max_requests = 1024</span><br><span class="line">request_slowlog_timeout = 1s</span><br><span class="line">slowlog = /usr/<span class="built_in">local</span>/php/var/<span class="built_in">log</span>/php-slow.log</span><br><span class="line">pm.status_path = /php-fpm_status</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/05/15/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Enginx%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞nginx编译方式</a></li><li><a href="https://zyh.cool/2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/">安装脚本☞php包管理方式</a></li><li><a href="http://xugaoxiang.com/2017/03/22/phpstorm-2017.1.3-license/">phpstorm-2017.1.3-license</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-fpm ☞ 静态配置</title>
      <link href="2018/05/11/php-fpm%E2%98%9E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>2018/05/11/php-fpm%E2%98%9E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>QPS 800-1000</p><p>2*4 机器</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[www01]</span></span><br><span class="line"><span class="attr">user</span> = webapps</span><br><span class="line"><span class="attr">group</span> = webapps</span><br><span class="line"><span class="attr">listen</span> = /usr/local/php/var/log/php-fpm-www01.sock</span><br><span class="line"><span class="attr">listen.owner</span> = webapps</span><br><span class="line"><span class="attr">listen.group</span> = webapps</span><br><span class="line"><span class="attr">listen.backlog</span> = <span class="number">10240</span></span><br><span class="line"><span class="attr">listen.mode</span> = <span class="number">0666</span></span><br><span class="line"><span class="attr">listen.allowed_clients</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">pm</span> = static</span><br><span class="line"><span class="attr">pm.max_children</span> = <span class="number">300</span></span><br><span class="line"><span class="attr">pm.max_requests</span> = <span class="number">1024</span></span><br><span class="line"><span class="attr">request_slowlog_timeout</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">request_terminate_timeout</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">slowlog</span> = /usr/local/php/var/log/php-slow.log</span><br><span class="line"><span class="attr">pm.status_path</span> = /php-fpm_status</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/27/nginx%E2%98%9Ealias/">nginx☞alias</a></li><li><a href="https://zyh.cool/2020/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E5%8C%85%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/">安装脚本☞php包管理方式</a></li><li><a href="https://zyh.cool/2018/08/21/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Ephp%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F/">安装脚本☞php编译方式</a></li><li><a href="http://xugaoxiang.com/2017/03/22/phpstorm-2017.1.3-license/">phpstorm-2017.1.3-license</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装脚本☞openvpn-docker方式</title>
      <link href="2018/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eopenvpn-docker%E6%96%B9%E5%BC%8F/"/>
      <url>2018/03/22/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eopenvpn-docker%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>openvpn 一般用于小公司远程连接公司办公网络环境，此脚本需要一个linux系统的主机。<br>至于土豪公司，可以无视。<br>文档包含安装脚本，创建用户脚本，删除用户脚本。使用的时候，安装脚本和创建用户脚本，需要自行修改一些变量。</p><blockquote><p>需要注意的是，发现移动网络连接其它运营商网络的时候，不稳定。<br>比如我这边，移动网络连接电信网络（openvpn所在网络），就容易丢包。</p></blockquote><h4 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br><span class="line">docker pull kylemanna&#x2F;openvpn</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">IP&#x3D;&quot;机器外网ip或者nat后的内网ip&quot;  # 自行修改</span><br><span class="line">mkdir $&#123;OVPN_DATA&#125;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_genconfig -u tcp:&#x2F;&#x2F;$&#123;IP&#125;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn ovpn_initpki</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn easyrsa build-client-full CLIENTNAME nopass</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_getclient CLIENTNAME &gt; $&#123;OVPN_DATA&#125;&#x2F;CLIENTNAME.ovpn</span><br><span class="line">docker run --name openvpn -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn -d -p 1194:1194 --privileged kylemanna&#x2F;openvpn</span><br></pre></td></tr></table></figure><h4 id="创建用户脚本"><a href="#创建用户脚本" class="headerlink" title="创建用户脚本"></a>创建用户脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 如果是nat后的内网ip，则需要修改配置文件里的ip为外网ip</span><br><span class="line"># bash xxx.sh &lt;用户名&gt;</span><br><span class="line">[[ -z $1 ]] &amp;&amp; exit</span><br><span class="line">CLIENTNAME&#x3D;$1</span><br><span class="line">#read -p &#39;输入用户名（字母组成）:&#39; CLIENTNAME</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm -it kylemanna&#x2F;openvpn easyrsa build-client-full $&#123;CLIENTNAME&#125; nopass</span><br><span class="line">docker run -v $&#123;OVPN_DATA&#125;:&#x2F;etc&#x2F;openvpn --rm kylemanna&#x2F;openvpn ovpn_getclient $CLIENTNAME &gt; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;1a comp-lzo&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;2a tun-mtu 1500&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &#39;3a auth-nocache&#39; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn</span><br><span class="line">sed -i &quot;s&#x2F;$&#123;本机ip&#125;&#x2F;$&#123;外网ip&#125;&#x2F;&quot; $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn  # 若为nat环境，自行修改，若不是nat环境，注释掉本行</span><br><span class="line">mkdir -pv $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;private&#x2F;$&#123;CLIENTNAME&#125;.key $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;issued&#x2F;$&#123;CLIENTNAME&#125;.crt $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">mv $&#123;OVPN_DATA&#125;&#x2F;$&#123;CLIENTNAME&#125;.ovpn $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;$&#123;CLIENTNAME&#125;</span><br><span class="line">cd $&#123;OVPN_DATA&#125;&#x2F;users&#x2F;</span><br><span class="line">tar zcf $&#123;CLIENTNAME&#125;.tar.gz $&#123;CLIENTNAME&#125;</span><br><span class="line">sz $&#123;CLIENTNAME&#125;.tar.gz</span><br></pre></td></tr></table></figure><h4 id="删除用户脚本"><a href="#删除用户脚本" class="headerlink" title="删除用户脚本"></a>删除用户脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># bash xxx.sh &lt;用户名&gt;</span><br><span class="line">[[ -z $1 ]] &amp;&amp; exit</span><br><span class="line">CLIENTNAME&#x3D;$1</span><br><span class="line">#read -p &#39;输入用户名（字母组成）:&#39; CLIENTNAME</span><br><span class="line">OVPN_DATA&#x3D;&quot;&#x2F;root&#x2F;ovpn-data&quot;</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;private&#x2F;$&#123;CLIENTNAME&#125;.key*</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;reqs&#x2F;$&#123;CLIENTNAME&#125;.req</span><br><span class="line">rm -rf &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;issued&#x2F;$&#123;CLIENTNAME&#125;.crt</span><br><span class="line">sed -i &quot;&#x2F;$&#123;CLIENTNAME&#125;&#x2F;d&quot; &#x2F;root&#x2F;ovpn-data&#x2F;pki&#x2F;index.txt</span><br><span class="line">cd &#x2F;root&#x2F;ovpn-data&#x2F;users</span><br><span class="line">rm -rf $&#123;CLIENTNAME&#125;</span><br><span class="line">rm -f $&#123;CLIENTNAME&#125;.tar.gz</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/08/30/zabbix%E2%98%9E%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA/">zabbix☞容器搭建</a></li><li><a href="https://zyh.cool/2020/03/25/jenkins%E2%98%9E%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/">jenkins☞安装和基本配置</a></li><li><a href="https://zyh.cool/2019/12/11/%E6%97%A5%E5%BF%97%E2%98%9EELK%E7%AE%80%E5%8D%95%E9%83%A8%E7%BD%B2-%E5%AE%B9%E5%99%A8%E6%96%B9%E5%BC%8F/">日志☞ELK简单部署-容器方式</a></li><li><a href="https://songrgg.github.io/operation/how-to-build-a-smallest-docker-image/">how to build the smallest docker image as fast as you can</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> openvpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis☞调整内核参数</title>
      <link href="2018/02/02/redis%E2%98%9E%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/"/>
      <url>2018/02/02/redis%E2%98%9E%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>之前安装完redis，启动redis，总会告诉你让你默认修改一些参数，不知其原因，但每次都招办。<br>后来遇到一些redis内存使用紧张的时候，从而导致 redis-bgsave 失败，再一次想到了这个问题。<br>经过查阅资料，发现官方文档里告诉了原因，在此记录一下。如有不对之处，还请指出。</p><h4 id="我是问题"><a href="#我是问题" class="headerlink" title="我是问题"></a>我是问题</h4><p>redis-bgsave与overcommit_memory的关系。<br>当剩余物理内存低于当前redis所用内存的时候，overcommit_memory=1的意义</p><h4 id="官方解释在此"><a href="#官方解释在此" class="headerlink" title="官方解释在此"></a>官方解释在此</h4><blockquote><p><a href="https://redis.io/topics/faq">https://redis.io/topics/faq</a></p></blockquote><h2 id="Background-saving-fails-with-a-fork-error-under-Linux-even-if-I-have-a-lot-of-free-RAM"><a href="#Background-saving-fails-with-a-fork-error-under-Linux-even-if-I-have-a-lot-of-free-RAM" class="headerlink" title="Background saving fails with a fork() error under Linux even if I have a lot of free RAM!"></a>Background saving fails with a fork() error under Linux even if I have a lot of free RAM!</h2><p>Short answer: : <code>echo 1 &gt; /proc/sys/vm/overcommit_memory</code></p><p>And now the long one:</p><p>Redis background saving schema relies on the copy-on-write semantic of fork in modern operating systems: Redis forks (creates a child process) that is an exact copy of the parent. The child process dumps the DB on disk and finally exits. In theory the child should use as much memory as the parent being a copy, but actually thanks to the copy-on-write semantic implemented by most modern operating systems the parent and child process will <em>share</em> the common memory pages. A page will be duplicated only when it changes in the child or in the parent. Since in theory all the pages may change while the child process is saving, Linux can’t tell in advance how much memory the child will take, so if the setting is set to zero fork will fail unless there is as much free RAM as required to really duplicate all the parent memory pages, with the result that if you have a Redis dataset of 3 GB and just 2 GB of free memory it will fail.<code>overcommit_memory</code></p><p>Setting to 1 tells Linux to relax and perform the fork in a more optimistic allocation fashion, and this is indeed what you want for Redis.<code>overcommit_memory</code></p><p>A good source to understand how Linux Virtual Memory works and other alternatives for and is this classic from Red Hat Magazine, <a href="https://people.redhat.com/nhorman/papers/rhel3_vm.pdf">“Understanding Virtual Memory”</a>. You can also refer to the <a href="http://man7.org/linux/man-pages/man5/proc.5.html">proc(5)</a> man page for explanations of the available values.<code>overcommit_memory``overcommit_ratio</code></p><h4 id="翻译后的大致意思"><a href="#翻译后的大致意思" class="headerlink" title="翻译后的大致意思"></a>翻译后的大致意思</h4><p>官方的FAQ，给人一种这么个意思。 如果你不设置overcommit_memory=1，那么COW机制将无法使用，所以当空余内存小于当前redis占用内存时，redis-bgsave 因为无法申请到足够的内存，将导致分配内存失败。<br>而COW机制的意思就是：父子进程公用内存页，因此只会copy变化的数据。因此，在COW机制下，redis-bgsave只需要申请到支撑变化数据的内存即可。<br>至于是否是因为启用 overcommit_memory=1 从而使得COW机制起作用，限于这是内核层面的东西</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://zyh.cool/2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/">安装脚本☞redis</a></li><li><a href="https://zyh.cool/2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/">redis☞备份</a></li><li><a href="https://thelighter.github.io/2020/02/19/redis/">redis是什么——redis优点和特性</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis☞调整内核参数</title>
      <link href="2018/02/02/redis%E2%98%9E%E8%8E%B7%E5%8F%96%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEttl%E7%9A%84key/"/>
      <url>2018/02/02/redis%E2%98%9E%E8%8E%B7%E5%8F%96%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEttl%E7%9A%84key/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis 内存占用爆炸. 所以网上找了一个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">author: yangyi@youzan.com</span></span><br><span class="line"><span class="string">time: 2018/4/26 下午4:34</span></span><br><span class="line"><span class="string">func: 获取数据库中没有设置ttl的 key</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowProcess</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    显示处理进度的类</span></span><br><span class="line"><span class="string">    调用该类相关函数即可实现处理进度的显示</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span> <span class="comment"># 当前的处理进度</span></span><br><span class="line">    max_steps = <span class="number">0</span> <span class="comment"># 总共需要处理的次数</span></span><br><span class="line">    max_arrow = <span class="number">100</span> <span class="comment"># 进度条的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化函数，需要知道总共的处理次数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max_steps</span>):</span></span><br><span class="line">        self.max_steps = max_steps</span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示函数，根据当前的处理进度i显示进度</span></span><br><span class="line">    <span class="comment"># 效果为[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]100.00%</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_process</span>(<span class="params">self, i = None</span>):</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.i = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line">        num_arrow = int(self.i * self.max_arrow / self.max_steps) <span class="comment"># 计算显示多少个&#x27;&gt;&#x27;</span></span><br><span class="line">        num_line = self.max_arrow - num_arrow <span class="comment"># 计算显示多少个&#x27;-&#x27;</span></span><br><span class="line">        percent = self.i * <span class="number">100.0</span> / self.max_steps <span class="comment"># 计算完成进度，格式为xx.xx%</span></span><br><span class="line">        process_bar = <span class="string">&#x27;[&#x27;</span> + <span class="string">&#x27;&gt;&#x27;</span> * num_arrow + <span class="string">&#x27; &#x27;</span> * num_line + <span class="string">&#x27;]&#x27;</span>\</span><br><span class="line">                      + <span class="string">&#x27;%.2f&#x27;</span> % percent + <span class="string">&#x27;%&#x27;</span> + <span class="string">&#x27;\r&#x27;</span> <span class="comment"># 带输出的字符串，&#x27;\r&#x27;表示不换行回到最左边</span></span><br><span class="line">        sys.stdout.write(process_bar) <span class="comment"># 这两句打印字符到终端</span></span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self, words=<span class="string">&#x27;done&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">print</span> words</span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_ttl</span>(<span class="params">redis_conn, no_ttl_file, dbindex</span>):</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    no_ttl_num = <span class="number">0</span></span><br><span class="line">    keys_num = redis_conn.dbsize()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;there are &#123;num&#125; keys in db &#123;index&#125; &quot;</span>.format(num=keys_num, index=dbindex)</span><br><span class="line">    process_bar = ShowProcess(keys_num)</span><br><span class="line">    <span class="keyword">with</span> open(no_ttl_file, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> redis_conn.scan_iter(count=<span class="number">1000</span>):</span><br><span class="line">            process_bar.show_process()</span><br><span class="line">            <span class="keyword">if</span> redis_conn.ttl(key) == <span class="number">-1</span>:</span><br><span class="line">                no_ttl_num += <span class="number">1</span></span><br><span class="line">    <span class="comment">#            if no_ttl_num &lt; 1000:</span></span><br><span class="line">                f.write(key+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    process_bar.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;cost time(s):&quot;</span>, time.time() - start_time</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;no ttl keys number:&quot;</span>, no_ttl_num</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;we write keys with no ttl to the file: %s&quot;</span> % no_ttl_file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, type=int, dest=<span class="string">&#x27;port&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, help=<span class="string">&#x27;port of redis &#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, type=str, dest=<span class="string">&#x27;db_list&#x27;</span>, action=<span class="string">&#x27;store&#x27;</span>, default=<span class="number">0</span>,</span><br><span class="line">                        help=<span class="string">&#x27;ex : -d all / -d 1,2,3,4 &#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    port = args.port</span><br><span class="line">    <span class="keyword">if</span> args.db_list == <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        db_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db_list = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> args.db_list.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> db_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pool = redis.ConnectionPool(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=port, db=index)</span><br><span class="line">            r = redis.StrictRedis(connection_pool=pool)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            no_ttl_keys_file = <span class="string">&quot;/tmp/&#123;port&#125;_&#123;db&#125;_no_ttl_keys.txt&quot;</span>.format(port=port, db=index)</span><br><span class="line">            check_ttl(r, no_ttl_keys_file, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ol><li>请勿在redis服务器上执行</li><li>修改脚本中 127.0.0.1 为 redis 服务器地址</li><li>脚本执行命令: <code>python nottlkey.py -d all -p 6379  </code> </li><li>添加ttl命令：<code>cat no_ttl_keys.txt  |  xargs -i -t ./redis-cli -h &lt;redis_ip&gt; -n &lt;database_num&gt; expire &lt;ttl_time&gt;</code></li></ol><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/05/14/zabbix%E2%98%9Eredis/">zabbix ☞ redis</a></li><li><a href="https://zyh.cool/2020/05/14/%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E2%98%9Eredis/">安装脚本☞redis</a></li><li><a href="https://zyh.cool/2020/04/27/redis%E2%98%9E%E5%A4%87%E4%BB%BD/">redis☞备份</a></li><li><a href="https://thelighter.github.io/2020/02/19/redis/">redis是什么——redis优点和特性</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web ☞ 系统基本优化</title>
      <link href="2017/01/20/web%E2%98%9E%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/"/>
      <url>2017/01/20/web%E2%98%9E%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内核参数</span></span><br><span class="line"><span class="comment"># 系统级别上限， 即整个系统所有进程单位时间可打开的文件描述符数量</span></span><br><span class="line">fs.file-max = 6553500</span><br><span class="line"><span class="comment"># 三次握手请求频次</span></span><br><span class="line">net.ipv4.tcp_syn_retries = 5</span><br><span class="line"><span class="comment"># 放弃回应一个TCP请求之前，需要尝试多少次</span></span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line"><span class="comment"># 三次握手应答频次</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"><span class="comment"># 三次握手完毕， 没有数据沟通的情况下， 空连接存活时间</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 60</span><br><span class="line"><span class="comment"># 探测消息发送次数</span></span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line"><span class="comment"># 探测消息发送间隔时间</span></span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 15</span><br><span class="line">net.ipv4.tcp_retries2 = 5</span><br><span class="line">net.ipv4.tcp_fin_timeout = 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统处理不属于任何进程的TCP链接</span></span><br><span class="line">net.ipv4.tcp_orphan_retries = 3</span><br><span class="line">net.ipv4.tcp_max_orphans = 35000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span><br><span class="line">net.core.netdev_max_backlog = 10240</span><br><span class="line"><span class="comment"># 对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 10240</span><br><span class="line"><span class="comment"># 定义了系统中每一个端口最大的监听队列的长度 </span></span><br><span class="line">net.core.somaxconn=10240</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大timewait数</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.ip_local_port_range=1024 65500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启时间戳</span></span><br><span class="line">net.ipv4.tcp_timestamps=1</span><br><span class="line"><span class="comment"># 针对客户端有效，必须在开启时间戳的前提下</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 iptables 后， 链路追踪上限和超时时间, 若没有使用 iptables，则无效</span></span><br><span class="line">net.netfilter.nf_conntrack_max = 6553500</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established = 150</span><br><span class="line"></span><br><span class="line"><span class="comment">## tcp栈内存使用， 单位是内存页， 一页=4KB</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_mem = 524288 786432 1310720</span></span><br><span class="line"><span class="comment">## socket读写缓冲区大小，单位是字节</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_rmem = 4096 4096 16777216</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_wmem = 4096 4096 16777216</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最低内存和缓冲区回收倾向（此参数有一定风险）</span></span><br><span class="line"><span class="comment">#vm.min_free_kbytes=409600</span></span><br><span class="line"><span class="comment">#vm.vfs_cache_pressure=200</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改/etc/security/limits.conf</span></span><br><span class="line"><span class="comment"># 单会话级别，可打开的所有文件描述符上限</span></span><br><span class="line">* soft nofile 655350</span><br><span class="line">* hard nofile 655350</span><br><span class="line"><span class="comment"># 单会话级别， 可打开的所有进程上限</span></span><br><span class="line">* soft nproc 10240</span><br><span class="line">* hard nproc 10240</span><br></pre></td></tr></table></figure><blockquote><h5 id="开启iptables后-查看当前链路表数量命令"><a href="#开启iptables后-查看当前链路表数量命令" class="headerlink" title="开启iptables后, 查看当前链路表数量命令"></a>开启iptables后, 查看当前链路表数量命令</h5><p>$ sysctl net.netfilter.nf_conntrack_count</p><p>net.netfilter.nf_conntrack_count = 601032</p><h5 id="查看连接数最高的10个IP：可以查封某个ip-或者判断是谁导致的"><a href="#查看连接数最高的10个IP：可以查封某个ip-或者判断是谁导致的" class="headerlink" title="查看连接数最高的10个IP：可以查封某个ip, 或者判断是谁导致的"></a>查看连接数最高的10个IP：可以查封某个ip, 或者判断是谁导致的</h5><p>$ awk -F’=’ ‘{c[$2]++}END{for ( i in c) print i,c[i]}’ /proc/net/nf_conntrack | head -10 </p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell☞if判定</title>
      <link href="2016/10/02/shell%E2%98%9Eif%E5%88%A4%E5%AE%9A/"/>
      <url>2016/10/02/shell%E2%98%9Eif%E5%88%A4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a FILE：存在则为真；否则则为假；</span><br><span class="line">-e FILE: 存在则为真；否则则为假；</span><br><span class="line">-f FILE: 存在并且为普通文件，则为真；否则为假；</span><br><span class="line">-d DIR: 存在并且为目录，则为真；否则为假；</span><br><span class="line">-L&#x2F;-h FILE: 存在并且为符号链接文件，则为真；否则为假；</span><br><span class="line">-b: 存在并且为块设备，则为真；否则为假；</span><br><span class="line">-c: 存在并且为字符设备，则为真；否则为假</span><br><span class="line">-S: 存在并且为套接字文件，则为真；否则为假</span><br><span class="line">-p: 存在并且为命名管道，则为真；否则为假</span><br><span class="line">-s FILE: 存在并且为非空文件则为值，否则为假；</span><br><span class="line">-r FILE：文件可读为真，否则为假</span><br><span class="line">-w FILE：文件可写为真，否则为假</span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="chunlife.top/2019/12/05/查看linux当前shell/">查看linux当前shell</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux ☞ df与du数据不一致的原因</title>
      <link href="2015/11/15/linux%E2%98%9Edf%E4%B8%8Edu%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>2015/11/15/linux%E2%98%9Edf%E4%B8%8Edu%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-☞-df与du数据不一致的原因"><a href="#linux-☞-df与du数据不一致的原因" class="headerlink" title="linux ☞ df与du数据不一致的原因"></a>linux ☞ df与du数据不一致的原因</h2><ul><li><h3 id="问题表现："><a href="#问题表现：" class="headerlink" title="问题表现："></a>问题表现：</h3></li></ul><p>df 数据比 du 数据小，而且是发生在删除文件之后。</p><hr><p>这个问题牵扯到 linux 系统是将如何确认和回收数据的.</p><ul><li><h3 id="空间是如何被判定占用的"><a href="#空间是如何被判定占用的" class="headerlink" title="空间是如何被判定占用的"></a>空间是如何被判定占用的</h3></li></ul><p>linux文件系统判定空间是否被占用，是查看空间的 imap 是否为1，而 imap 是否为1，则取决于占用空间的文件的 inode 节点的 Links 是否为0。而每当程序调用文件且没有关闭，那么此文件的 inode 的 Links 就会加 1。</p><p>如果 Links 不为0，则 imap 就不会是 0 ，则这份空间就无法被再次调用.<br>另外，每一个文件，默认 inode  Links 是1</p><ul><li><h3 id="系统是如何删除一个文件的"><a href="#系统是如何删除一个文件的" class="headerlink" title="系统是如何删除一个文件的"></a>系统是如何删除一个文件的</h3></li></ul><p>文件系统首先在父目录文件里找到所要删除的文件名，将此文件信息从父目录里清除掉，如若清除后，Links 为0 ，则删除 inode 节点，将 imap 就置为0，空间可以再次被利用。但是，如果父目录文件信息清除后，有程序在调用文件，则 Links 不为0，那么 inode 无法被删除， imap 也无法置为0，结果就是文件看着没了，但是空间还是没有释放。</p><hr><p>df 和 du 的最大区别就是：</p><p>df 是根据 inode 的 Links 来确认空间是否被占用，并进而统计</p><p>du 是根据目录的文件信息来确认空间是否被占用，并进而统计</p><ul><li><h3 id="如何释放被占用的空间"><a href="#如何释放被占用的空间" class="headerlink" title="如何释放被占用的空间"></a>如何释放被占用的空间</h3></li></ul><p>从上面可知，我们只需要将被删除文件的 inode Links 降成 0 即可，也就是关闭此文件的调用程序.</p><p>如何查找调用程序？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -n | grep rm_file_name <span class="comment"># 获取到程序 pid，并将其杀死即可</span></span><br></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://zyh.cool/2020/06/06/linux%E2%98%9Essh-MFA%E8%87%AA%E5%8A%A8%E7%99%BB%E9%99%86/">linux☞ssh-MFA自动登陆</a></li><li><a href="https://zyh.cool/2020/05/09/linux%E2%98%9E%E8%BE%93%E5%87%BA%E4%B8%AA%E6%80%A7%E5%8C%96%E5%BC%80%E6%9C%BA%E7%8A%B6%E6%80%81/">linux☞输出个性化开机状态</a></li><li><a href="https://zyh.cool/2020/05/08/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/">问题记录</a></li><li><a href="https://www.gzhao01.top/2020/06/09/vim-command/">vim_command</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible☞playbook-lookup插件</title>
      <link href="1970/01/01/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/"/>
      <url>1970/01/01/ansible%E2%98%9Eplaybook-lookup%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>lookup 插件可以配合 loop 循环实现 with_x 循环</p><h2 id="lookup-查询插件"><a href="#lookup-查询插件" class="headerlink" title="lookup 查询插件"></a>lookup 查询插件</h2><blockquote><p>query 插件与 lookup 插件一样，区别在于 query 默认情况下，启用了wantlist=true。<br>wantlist 的意思是将返回的字符串构成一个列表<br>另外，query 可以简写为q</p></blockquote><h5 id="loop-关键词"><a href="#loop-关键词" class="headerlink" title="loop 关键词"></a>loop 关键词</h5><p>用于将一个列表进行循环，默认循环单体变量是 item. 官方用来替代 with_xxx </p><p>用来遍历 lookup 结果集</p><blockquote><p>自定义loop循环单体变量为 xxx</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">loop_control:</span></span><br><span class="line">  <span class="attr">loop_var:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>loop_control 还有其它控制，比如 </p><ul><li>index_var: var_name 循环索引. </li><li>pause: time 循环间隔时间</li><li>label: var_name 去掉 var_name 之外的不相干信息输出</li></ul></blockquote><h2 id="常用参数示例"><a href="#常用参数示例" class="headerlink" title="常用参数示例"></a>常用参数示例</h2><h4 id="file-参数"><a href="#file-参数" class="headerlink" title="file 参数"></a>file 参数</h4><blockquote><p>多个文件内容合并在一起，或以字符串逗号分隔输出，或以列表形式输出</p></blockquote><h4 id="ini-参数"><a href="#ini-参数" class="headerlink" title="ini 参数"></a>ini 参数</h4><blockquote><p>获取 ini 配置信息</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/test.ini</span></span><br><span class="line"><span class="section">[testA]</span></span><br><span class="line"><span class="attr">a1</span>=zhangsan</span><br><span class="line"><span class="attr">a2</span>=lisi</span><br><span class="line"></span><br><span class="line"><span class="section">[testB]</span></span><br><span class="line"><span class="attr">b1</span>=wangwu</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">zyh</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">ini</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; q(&#x27;ini&#x27;, &#x27;a1 section=testA file=~/test.ini&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当配置是 properties，可以追加 type=properties </p></blockquote><h4 id="dict参数"><a href="#dict参数" class="headerlink" title="dict参数"></a>dict参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果集 </span></span><br><span class="line">[&#123;key: xxx, value: xxx&#125;, &#123;key: xxx, value: xxx&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="attr">male:</span> <span class="string">Bob</span></span><br><span class="line">      <span class="attr">female:</span> <span class="string">Maris</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.key &#125;&#125;</span>: <span class="template-variable">&#123;&#123; item.value &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; lookup(&#x27;dict&#x27;, users) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=&#123;<span class="string">&#x27;key&#x27;</span>: u<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: u<span class="string">&#x27;Bob&#x27;</span>&#125;) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;male: Bob&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=&#123;<span class="string">&#x27;key&#x27;</span>: u<span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: u<span class="string">&#x27;Maris&#x27;</span>&#125;) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;female: Maris&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subelements参数"><a href="#subelements参数" class="headerlink" title="subelements参数"></a>subelements参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写法：</span></span><br><span class="line">&#123;&#123; lookup(<span class="string">&#x27;subelements&#x27;</span>,list,<span class="string">&#x27;content&#x27;</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个由相同结构字典组成的列表list，将字典中某一个元素key（值必须是列表）与字典剩余的元素（剩余的元素作为一个整体新字典），构建笛卡尔积。从而形成 item。每一个字典拆分组合后的 item 构建结果集 items</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果集</span></span><br><span class="line"></span><br><span class="line">items=[</span><br><span class="line">[&#123;list.0.剩余kv&#125;,  list.0.key.0], </span><br><span class="line">[&#123;list.0.剩余kv&#125;,  list.0.key.1], </span><br><span class="line">[&#123;list.1.剩余kv&#125;,  list.1.key.0], </span><br><span class="line">[&#123;list.1.剩余kv&#125;,  list.1.key.1], </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span></span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">vars</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">debug:</span></span><br><span class="line">                    <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.0.name &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.0.gender &#125;&#125;</span> - <span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; lookup(&#x27;subelements&#x27;,users,&#x27;content&#x27;) &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;male&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 18, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Bob&#x27;</span>&#125;, u<span class="string">&#x27;eating&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Bob - male - eating&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;male&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 18, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Bob&#x27;</span>&#125;, u<span class="string">&#x27;sleeping&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Bob - male - sleeping&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;male&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 18, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Bob&#x27;</span>&#125;, u<span class="string">&#x27;play ogre&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Bob - male - play ogre&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;female&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 20, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Maris&#x27;</span>&#125;, u<span class="string">&#x27;eating&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Maris - female - eating&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;female&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 20, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Maris&#x27;</span>&#125;, u<span class="string">&#x27;sleeping&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Maris - female - sleeping&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[&#123;u<span class="string">&#x27;gender&#x27;</span>: u<span class="string">&#x27;female&#x27;</span>, u<span class="string">&#x27;age&#x27;</span>: 20, u<span class="string">&#x27;name&#x27;</span>: u<span class="string">&#x27;Maris&#x27;</span>&#125;, u<span class="string">&#x27;shopping&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Maris - female - shopping&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若有多个key需要附加，需要 nested 与  include_tasks 的组合实现</p></blockquote><h4 id="nested参数"><a href="#nested参数" class="headerlink" title="nested参数"></a>nested参数</h4><blockquote><p>将多个列表进行笛卡尔积运算</p><ol><li>test3.yml 中拿到 users循环单体 user</li><li>针对循环单体 user引入附加任务 test3_1.yml</li><li>通过lookup插件nested，将 user字典中各key的value相互遍历，构建新列表 item</li></ol></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">################ test3.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">connection:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">          <span class="attr">users:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Bob</span></span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">male</span>       </span><br><span class="line">                    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span>   </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span> </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">play</span> <span class="string">ogre</span></span><br><span class="line">                    <span class="attr">specialty:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">english</span>  </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">game</span>     </span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Maris</span>        </span><br><span class="line">                    <span class="attr">gender:</span> <span class="string">female</span>     </span><br><span class="line">                    <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">                    <span class="attr">content:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">eating</span>   </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">sleeping</span> </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">shopping</span> </span><br><span class="line">                    <span class="attr">specialty:</span></span><br><span class="line">                            <span class="bullet">-</span> <span class="string">history</span>  </span><br><span class="line">                            <span class="bullet">-</span> <span class="string">cooking</span>  </span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">test3_1.yml</span> </span><br><span class="line">            <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users &#125;&#125;</span>&quot;</span></span><br><span class="line">            <span class="attr">loop_control:</span></span><br><span class="line">                    <span class="attr">loop_var:</span> <span class="string">user</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">################ test3_1.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; lookup(&#x27;nested&#x27;,user.name, user.age, user.content, user.specialty) &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">debug:</span></span><br><span class="line">    <span class="attr">msg:</span> <span class="string">&quot;name:<span class="template-variable">&#123;&#123; item.0 &#125;&#125;</span>, age:<span class="template-variable">&#123;&#123; item.1 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; item.2 &#125;&#125;</span>, <span class="template-variable">&#123;&#123; item.3 &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;eating&#x27;</span>, u<span class="string">&#x27;english&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, eating, english&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;eating&#x27;</span>, u<span class="string">&#x27;game&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, eating, game&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;sleeping&#x27;</span>, u<span class="string">&#x27;english&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, sleeping, english&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;sleeping&#x27;</span>, u<span class="string">&#x27;game&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, sleeping, game&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;play ogre&#x27;</span>, u<span class="string">&#x27;english&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, play ogre, english&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Bob&#x27;</span>, 18, u<span class="string">&#x27;play ogre&#x27;</span>, u<span class="string">&#x27;game&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Bob, age:18, play ogre, game&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;eating&#x27;</span>, u<span class="string">&#x27;history&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, eating, history&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;eating&#x27;</span>, u<span class="string">&#x27;cooking&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, eating, cooking&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;sleeping&#x27;</span>, u<span class="string">&#x27;history&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, sleeping, history&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;sleeping&#x27;</span>, u<span class="string">&#x27;cooking&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, sleeping, cooking&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;shopping&#x27;</span>, u<span class="string">&#x27;history&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, shopping, history&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [localhost] =&gt; (item=[u<span class="string">&#x27;Maris&#x27;</span>, 20, u<span class="string">&#x27;shopping&#x27;</span>, u<span class="string">&#x27;cooking&#x27;</span>]) =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;name:Maris, age:20, shopping, cooking&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> lookup </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
